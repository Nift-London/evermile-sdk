<?php
/**
 * QuoteMultiRoutePostRequestParamsOptimizationParamsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuoteMultiRoutePostRequestParamsOptimizationParamsInner Class Doc Comment
 *
 * @category Class
 * @description Optimization configuration overrides for multi-drop
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuoteMultiRoutePostRequestParamsOptimizationParamsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_multiRoute_post_request_params_optimizationParams_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier' => 'string',
        'number_of_drivers' => 'int',
        'max_number_of_stops' => 'int',
        'max_number_of_parcels' => 'int',
        'max_route_length_minutes' => 'int',
        'override_pickup_start_hour' => 'array<string,string>',
        'pickup_window_length_minutes' => 'int',
        'drivers_schedule' => '\OpenAPI\Client\Model\QuoteMultiRoutePostRequestParamsOptimizationParamsInnerDriversScheduleInner[]',
        'disabled_slot_groups' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrier' => null,
        'number_of_drivers' => 'int64',
        'max_number_of_stops' => 'int64',
        'max_number_of_parcels' => 'int64',
        'max_route_length_minutes' => 'int64',
        'override_pickup_start_hour' => null,
        'pickup_window_length_minutes' => 'int64',
        'drivers_schedule' => null,
        'disabled_slot_groups' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carrier' => false,
        'number_of_drivers' => false,
        'max_number_of_stops' => false,
        'max_number_of_parcels' => false,
        'max_route_length_minutes' => false,
        'override_pickup_start_hour' => false,
        'pickup_window_length_minutes' => false,
        'drivers_schedule' => false,
        'disabled_slot_groups' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier' => 'carrier',
        'number_of_drivers' => 'numberOfDrivers',
        'max_number_of_stops' => 'maxNumberOfStops',
        'max_number_of_parcels' => 'maxNumberOfParcels',
        'max_route_length_minutes' => 'maxRouteLengthMinutes',
        'override_pickup_start_hour' => 'overridePickupStartHour',
        'pickup_window_length_minutes' => 'pickupWindowLengthMinutes',
        'drivers_schedule' => 'driversSchedule',
        'disabled_slot_groups' => 'disabledSlotGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier' => 'setCarrier',
        'number_of_drivers' => 'setNumberOfDrivers',
        'max_number_of_stops' => 'setMaxNumberOfStops',
        'max_number_of_parcels' => 'setMaxNumberOfParcels',
        'max_route_length_minutes' => 'setMaxRouteLengthMinutes',
        'override_pickup_start_hour' => 'setOverridePickupStartHour',
        'pickup_window_length_minutes' => 'setPickupWindowLengthMinutes',
        'drivers_schedule' => 'setDriversSchedule',
        'disabled_slot_groups' => 'setDisabledSlotGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier' => 'getCarrier',
        'number_of_drivers' => 'getNumberOfDrivers',
        'max_number_of_stops' => 'getMaxNumberOfStops',
        'max_number_of_parcels' => 'getMaxNumberOfParcels',
        'max_route_length_minutes' => 'getMaxRouteLengthMinutes',
        'override_pickup_start_hour' => 'getOverridePickupStartHour',
        'pickup_window_length_minutes' => 'getPickupWindowLengthMinutes',
        'drivers_schedule' => 'getDriversSchedule',
        'disabled_slot_groups' => 'getDisabledSlotGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CARRIER_STUART = 'Stuart';
    public const CARRIER_GOPHR = 'Gophr';
    public const CARRIER_PACKFLEET = 'Packfleet';
    public const CARRIER_PEDIVAN = 'Pedivan';
    public const CARRIER_PEDIVAN_FBX = 'PedivanFBX';
    public const CARRIER_PEDIVAN_SAGE = 'PedivanSage';
    public const CARRIER_PEDIVAN_OVERNIGHT = 'PedivanOvernight';
    public const CARRIER_BRISQQ = 'Brisqq';
    public const CARRIER_FINMILE = 'Finmile';
    public const CARRIER_FINMILE_GREEN_ELF = 'FinmileGreenElf';
    public const CARRIER_UBER = 'Uber';
    public const CARRIER_DPD = 'DPD';
    public const CARRIER_SPEED_COURIERS = 'SpeedCouriers';
    public const CARRIER_EVERMILE_MANUAL = 'EvermileManual';
    public const CARRIER_EVERMILE_FLICK_FIRST = 'EvermileFlickFirst';
    public const CARRIER_EVERMILE_GO_PANDA = 'EvermileGoPanda';
    public const CARRIER_EVERMILE_VANUSE = 'EvermileVanuse';
    public const CARRIER_APC = 'APC';
    public const CARRIER_UPS = 'UPS';
    public const CARRIER_DHL = 'DHL';
    public const CARRIER_EVERMILE_OWN_FLEET = 'EvermileOwnFleet';
    public const CARRIER_GO_PANDA = 'GoPanda';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCarrierAllowableValues()
    {
        return [
            self::CARRIER_STUART,
            self::CARRIER_GOPHR,
            self::CARRIER_PACKFLEET,
            self::CARRIER_PEDIVAN,
            self::CARRIER_PEDIVAN_FBX,
            self::CARRIER_PEDIVAN_SAGE,
            self::CARRIER_PEDIVAN_OVERNIGHT,
            self::CARRIER_BRISQQ,
            self::CARRIER_FINMILE,
            self::CARRIER_FINMILE_GREEN_ELF,
            self::CARRIER_UBER,
            self::CARRIER_DPD,
            self::CARRIER_SPEED_COURIERS,
            self::CARRIER_EVERMILE_MANUAL,
            self::CARRIER_EVERMILE_FLICK_FIRST,
            self::CARRIER_EVERMILE_GO_PANDA,
            self::CARRIER_EVERMILE_VANUSE,
            self::CARRIER_APC,
            self::CARRIER_UPS,
            self::CARRIER_DHL,
            self::CARRIER_EVERMILE_OWN_FLEET,
            self::CARRIER_GO_PANDA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('number_of_drivers', $data ?? [], null);
        $this->setIfExists('max_number_of_stops', $data ?? [], null);
        $this->setIfExists('max_number_of_parcels', $data ?? [], null);
        $this->setIfExists('max_route_length_minutes', $data ?? [], null);
        $this->setIfExists('override_pickup_start_hour', $data ?? [], null);
        $this->setIfExists('pickup_window_length_minutes', $data ?? [], null);
        $this->setIfExists('drivers_schedule', $data ?? [], null);
        $this->setIfExists('disabled_slot_groups', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        $allowedValues = $this->getCarrierAllowableValues();
        if (!is_null($this->container['carrier']) && !in_array($this->container['carrier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'carrier', must be one of '%s'",
                $this->container['carrier'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $allowedValues = $this->getCarrierAllowableValues();
        if (!in_array($carrier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'carrier', must be one of '%s'",
                    $carrier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets number_of_drivers
     *
     * @return int|null
     */
    public function getNumberOfDrivers()
    {
        return $this->container['number_of_drivers'];
    }

    /**
     * Sets number_of_drivers
     *
     * @param int|null $number_of_drivers The number of drivers available for the carrier / own fleet
     *
     * @return self
     */
    public function setNumberOfDrivers($number_of_drivers)
    {
        if (is_null($number_of_drivers)) {
            throw new \InvalidArgumentException('non-nullable number_of_drivers cannot be null');
        }
        $this->container['number_of_drivers'] = $number_of_drivers;

        return $this;
    }

    /**
     * Gets max_number_of_stops
     *
     * @return int|null
     */
    public function getMaxNumberOfStops()
    {
        return $this->container['max_number_of_stops'];
    }

    /**
     * Sets max_number_of_stops
     *
     * @param int|null $max_number_of_stops The maximum number of stops per driver
     *
     * @return self
     */
    public function setMaxNumberOfStops($max_number_of_stops)
    {
        if (is_null($max_number_of_stops)) {
            throw new \InvalidArgumentException('non-nullable max_number_of_stops cannot be null');
        }
        $this->container['max_number_of_stops'] = $max_number_of_stops;

        return $this;
    }

    /**
     * Gets max_number_of_parcels
     *
     * @return int|null
     */
    public function getMaxNumberOfParcels()
    {
        return $this->container['max_number_of_parcels'];
    }

    /**
     * Sets max_number_of_parcels
     *
     * @param int|null $max_number_of_parcels The maximum number of parcels per driver
     *
     * @return self
     */
    public function setMaxNumberOfParcels($max_number_of_parcels)
    {
        if (is_null($max_number_of_parcels)) {
            throw new \InvalidArgumentException('non-nullable max_number_of_parcels cannot be null');
        }
        $this->container['max_number_of_parcels'] = $max_number_of_parcels;

        return $this;
    }

    /**
     * Gets max_route_length_minutes
     *
     * @return int|null
     */
    public function getMaxRouteLengthMinutes()
    {
        return $this->container['max_route_length_minutes'];
    }

    /**
     * Sets max_route_length_minutes
     *
     * @param int|null $max_route_length_minutes The maximum route length in minutes
     *
     * @return self
     */
    public function setMaxRouteLengthMinutes($max_route_length_minutes)
    {
        if (is_null($max_route_length_minutes)) {
            throw new \InvalidArgumentException('non-nullable max_route_length_minutes cannot be null');
        }
        $this->container['max_route_length_minutes'] = $max_route_length_minutes;

        return $this;
    }

    /**
     * Gets override_pickup_start_hour
     *
     * @return array<string,string>|null
     */
    public function getOverridePickupStartHour()
    {
        return $this->container['override_pickup_start_hour'];
    }

    /**
     * Sets override_pickup_start_hour
     *
     * @param array<string,string>|null $override_pickup_start_hour override_pickup_start_hour
     *
     * @return self
     */
    public function setOverridePickupStartHour($override_pickup_start_hour)
    {
        if (is_null($override_pickup_start_hour)) {
            throw new \InvalidArgumentException('non-nullable override_pickup_start_hour cannot be null');
        }
        $this->container['override_pickup_start_hour'] = $override_pickup_start_hour;

        return $this;
    }

    /**
     * Gets pickup_window_length_minutes
     *
     * @return int|null
     */
    public function getPickupWindowLengthMinutes()
    {
        return $this->container['pickup_window_length_minutes'];
    }

    /**
     * Sets pickup_window_length_minutes
     *
     * @param int|null $pickup_window_length_minutes The length of the pickup window in minutes
     *
     * @return self
     */
    public function setPickupWindowLengthMinutes($pickup_window_length_minutes)
    {
        if (is_null($pickup_window_length_minutes)) {
            throw new \InvalidArgumentException('non-nullable pickup_window_length_minutes cannot be null');
        }
        $this->container['pickup_window_length_minutes'] = $pickup_window_length_minutes;

        return $this;
    }

    /**
     * Gets drivers_schedule
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePostRequestParamsOptimizationParamsInnerDriversScheduleInner[]|null
     */
    public function getDriversSchedule()
    {
        return $this->container['drivers_schedule'];
    }

    /**
     * Sets drivers_schedule
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePostRequestParamsOptimizationParamsInnerDriversScheduleInner[]|null $drivers_schedule drivers_schedule
     *
     * @return self
     */
    public function setDriversSchedule($drivers_schedule)
    {
        if (is_null($drivers_schedule)) {
            throw new \InvalidArgumentException('non-nullable drivers_schedule cannot be null');
        }
        $this->container['drivers_schedule'] = $drivers_schedule;

        return $this;
    }

    /**
     * Gets disabled_slot_groups
     *
     * @return string[]|null
     */
    public function getDisabledSlotGroups()
    {
        return $this->container['disabled_slot_groups'];
    }

    /**
     * Sets disabled_slot_groups
     *
     * @param string[]|null $disabled_slot_groups A list of slot groups to disable
     *
     * @return self
     */
    public function setDisabledSlotGroups($disabled_slot_groups)
    {
        if (is_null($disabled_slot_groups)) {
            throw new \InvalidArgumentException('non-nullable disabled_slot_groups cannot be null');
        }
        $this->container['disabled_slot_groups'] = $disabled_slot_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


