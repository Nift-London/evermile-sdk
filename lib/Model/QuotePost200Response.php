<?php
/**
 * QuotePost200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuotePost200Response Class Doc Comment
 *
 * @category Class
 * @description Proposals response for a quote request
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuotePost200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_post_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_proposals' => '\OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInner[]',
        'express_proposals' => '\OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInner[]',
        'valid_until' => '\DateTime',
        'delivery_type' => 'string',
        'delivery_area' => 'string',
        'current_price' => '\OpenAPI\Client\Model\QuotePost200ResponseCurrentPrice',
        'cancellation_fee' => '\OpenAPI\Client\Model\QuotePost200ResponseCancellationFee',
        'cancellation_token' => 'string',
        'override_display_hours' => '\OpenAPI\Client\Model\QuotePost200ResponseOverrideDisplayHours',
        'booking_fee_cents' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_proposals' => null,
        'express_proposals' => null,
        'valid_until' => 'date-time',
        'delivery_type' => null,
        'delivery_area' => null,
        'current_price' => null,
        'cancellation_fee' => null,
        'cancellation_token' => null,
        'override_display_hours' => null,
        'booking_fee_cents' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date_proposals' => false,
        'express_proposals' => false,
        'valid_until' => false,
        'delivery_type' => false,
        'delivery_area' => false,
        'current_price' => false,
        'cancellation_fee' => false,
        'cancellation_token' => false,
        'override_display_hours' => false,
        'booking_fee_cents' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_proposals' => 'dateProposals',
        'express_proposals' => 'expressProposals',
        'valid_until' => 'validUntil',
        'delivery_type' => 'deliveryType',
        'delivery_area' => 'deliveryArea',
        'current_price' => 'currentPrice',
        'cancellation_fee' => 'cancellationFee',
        'cancellation_token' => 'cancellationToken',
        'override_display_hours' => 'overrideDisplayHours',
        'booking_fee_cents' => 'bookingFeeCents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_proposals' => 'setDateProposals',
        'express_proposals' => 'setExpressProposals',
        'valid_until' => 'setValidUntil',
        'delivery_type' => 'setDeliveryType',
        'delivery_area' => 'setDeliveryArea',
        'current_price' => 'setCurrentPrice',
        'cancellation_fee' => 'setCancellationFee',
        'cancellation_token' => 'setCancellationToken',
        'override_display_hours' => 'setOverrideDisplayHours',
        'booking_fee_cents' => 'setBookingFeeCents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_proposals' => 'getDateProposals',
        'express_proposals' => 'getExpressProposals',
        'valid_until' => 'getValidUntil',
        'delivery_type' => 'getDeliveryType',
        'delivery_area' => 'getDeliveryArea',
        'current_price' => 'getCurrentPrice',
        'cancellation_fee' => 'getCancellationFee',
        'cancellation_token' => 'getCancellationToken',
        'override_display_hours' => 'getOverrideDisplayHours',
        'booking_fee_cents' => 'getBookingFeeCents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DELIVERY_TYPE_NATION_WIDE = 'nationWide';
    public const DELIVERY_TYPE_NATION_WIDE_REMOTE = 'nationWideRemote';
    public const DELIVERY_TYPE_LOCAL = 'local';
    public const DELIVERY_TYPE_INTERNATIONAL = 'international';
    public const DELIVERY_AREA_MAINLAND_UK = 'mainlandUK';
    public const DELIVERY_AREA_SCOTTISH_HIGHLANDS = 'scottishHighlands';
    public const DELIVERY_AREA_SCOTTISH_ISLANDS = 'scottishIslands';
    public const DELIVERY_AREA_NORTHERN_IRELAND = 'northernIreland';
    public const DELIVERY_AREA_ISLE_OF_MAN = 'isleOfMan';
    public const DELIVERY_AREA_ISLE_OF_WIGHT = 'isleOfWight';
    public const DELIVERY_AREA_CHANNEL_ISLANDS = 'channelIslands';
    public const DELIVERY_AREA_SCILLY_ISLES = 'scillyIsles';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_NATION_WIDE,
            self::DELIVERY_TYPE_NATION_WIDE_REMOTE,
            self::DELIVERY_TYPE_LOCAL,
            self::DELIVERY_TYPE_INTERNATIONAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryAreaAllowableValues()
    {
        return [
            self::DELIVERY_AREA_MAINLAND_UK,
            self::DELIVERY_AREA_SCOTTISH_HIGHLANDS,
            self::DELIVERY_AREA_SCOTTISH_ISLANDS,
            self::DELIVERY_AREA_NORTHERN_IRELAND,
            self::DELIVERY_AREA_ISLE_OF_MAN,
            self::DELIVERY_AREA_ISLE_OF_WIGHT,
            self::DELIVERY_AREA_CHANNEL_ISLANDS,
            self::DELIVERY_AREA_SCILLY_ISLES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date_proposals', $data ?? [], null);
        $this->setIfExists('express_proposals', $data ?? [], null);
        $this->setIfExists('valid_until', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('delivery_area', $data ?? [], null);
        $this->setIfExists('current_price', $data ?? [], null);
        $this->setIfExists('cancellation_fee', $data ?? [], null);
        $this->setIfExists('cancellation_token', $data ?? [], null);
        $this->setIfExists('override_display_hours', $data ?? [], null);
        $this->setIfExists('booking_fee_cents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date_proposals'] === null) {
            $invalidProperties[] = "'date_proposals' can't be null";
        }
        if ($this->container['express_proposals'] === null) {
            $invalidProperties[] = "'express_proposals' can't be null";
        }
        if ($this->container['valid_until'] === null) {
            $invalidProperties[] = "'valid_until' can't be null";
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['delivery_type']) && !in_array($this->container['delivery_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_type', must be one of '%s'",
                $this->container['delivery_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryAreaAllowableValues();
        if (!is_null($this->container['delivery_area']) && !in_array($this->container['delivery_area'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_area', must be one of '%s'",
                $this->container['delivery_area'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_proposals
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInner[]
     */
    public function getDateProposals()
    {
        return $this->container['date_proposals'];
    }

    /**
     * Sets date_proposals
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInner[] $date_proposals An array (map) of proposals by date
     *
     * @return self
     */
    public function setDateProposals($date_proposals)
    {
        if (is_null($date_proposals)) {
            throw new \InvalidArgumentException('non-nullable date_proposals cannot be null');
        }
        $this->container['date_proposals'] = $date_proposals;

        return $this;
    }

    /**
     * Gets express_proposals
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInner[]
     */
    public function getExpressProposals()
    {
        return $this->container['express_proposals'];
    }

    /**
     * Sets express_proposals
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInner[] $express_proposals An array (map) of proposals by date
     *
     * @return self
     */
    public function setExpressProposals($express_proposals)
    {
        if (is_null($express_proposals)) {
            throw new \InvalidArgumentException('non-nullable express_proposals cannot be null');
        }
        $this->container['express_proposals'] = $express_proposals;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime $valid_until Proposals are valid until this time in ISO8601 format
     *
     * @return self
     */
    public function setValidUntil($valid_until)
    {
        if (is_null($valid_until)) {
            throw new \InvalidArgumentException('non-nullable valid_until cannot be null');
        }
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type delivery_type
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!in_array($delivery_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_type', must be one of '%s'",
                    $delivery_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets delivery_area
     *
     * @return string|null
     */
    public function getDeliveryArea()
    {
        return $this->container['delivery_area'];
    }

    /**
     * Sets delivery_area
     *
     * @param string|null $delivery_area delivery_area
     *
     * @return self
     */
    public function setDeliveryArea($delivery_area)
    {
        if (is_null($delivery_area)) {
            throw new \InvalidArgumentException('non-nullable delivery_area cannot be null');
        }
        $allowedValues = $this->getDeliveryAreaAllowableValues();
        if (!in_array($delivery_area, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_area', must be one of '%s'",
                    $delivery_area,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_area'] = $delivery_area;

        return $this;
    }

    /**
     * Gets current_price
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseCurrentPrice|null
     */
    public function getCurrentPrice()
    {
        return $this->container['current_price'];
    }

    /**
     * Sets current_price
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseCurrentPrice|null $current_price current_price
     *
     * @return self
     */
    public function setCurrentPrice($current_price)
    {
        if (is_null($current_price)) {
            throw new \InvalidArgumentException('non-nullable current_price cannot be null');
        }
        $this->container['current_price'] = $current_price;

        return $this;
    }

    /**
     * Gets cancellation_fee
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseCancellationFee|null
     */
    public function getCancellationFee()
    {
        return $this->container['cancellation_fee'];
    }

    /**
     * Sets cancellation_fee
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseCancellationFee|null $cancellation_fee cancellation_fee
     *
     * @return self
     */
    public function setCancellationFee($cancellation_fee)
    {
        if (is_null($cancellation_fee)) {
            throw new \InvalidArgumentException('non-nullable cancellation_fee cannot be null');
        }
        $this->container['cancellation_fee'] = $cancellation_fee;

        return $this;
    }

    /**
     * Gets cancellation_token
     *
     * @return string|null
     */
    public function getCancellationToken()
    {
        return $this->container['cancellation_token'];
    }

    /**
     * Sets cancellation_token
     *
     * @param string|null $cancellation_token A token that should be returned in order to confirm the cancellation of the original order. To confirm the cancellation, pass this in an X-EVERMILE-TOKEN header to createOrder.
     *
     * @return self
     */
    public function setCancellationToken($cancellation_token)
    {
        if (is_null($cancellation_token)) {
            throw new \InvalidArgumentException('non-nullable cancellation_token cannot be null');
        }
        $this->container['cancellation_token'] = $cancellation_token;

        return $this;
    }

    /**
     * Gets override_display_hours
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseOverrideDisplayHours|null
     */
    public function getOverrideDisplayHours()
    {
        return $this->container['override_display_hours'];
    }

    /**
     * Sets override_display_hours
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseOverrideDisplayHours|null $override_display_hours override_display_hours
     *
     * @return self
     */
    public function setOverrideDisplayHours($override_display_hours)
    {
        if (is_null($override_display_hours)) {
            throw new \InvalidArgumentException('non-nullable override_display_hours cannot be null');
        }
        $this->container['override_display_hours'] = $override_display_hours;

        return $this;
    }

    /**
     * Gets booking_fee_cents
     *
     * @return int|null
     */
    public function getBookingFeeCents()
    {
        return $this->container['booking_fee_cents'];
    }

    /**
     * Sets booking_fee_cents
     *
     * @param int|null $booking_fee_cents An override for the booking fee in cents
     *
     * @return self
     */
    public function setBookingFeeCents($booking_fee_cents)
    {
        if (is_null($booking_fee_cents)) {
            throw new \InvalidArgumentException('non-nullable booking_fee_cents cannot be null');
        }
        $this->container['booking_fee_cents'] = $booking_fee_cents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


