<?php
/**
 * QuotePostRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuotePostRequest Class Doc Comment
 *
 * @category Class
 * @description A quote request object
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuotePostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pickup_info' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfo',
        'pickup_window' => '\OpenAPI\Client\Model\QuotePostRequestPickupWindow',
        'destination_locations' => '\OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInner[]',
        'destination_locations_ids' => 'string[]',
        'parcels' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInner[]',
        'in_stock' => 'bool',
        'handling' => 'string[]',
        'proof_of_delivery_requirement' => 'string[]',
        'instructions' => 'string',
        'original_order_id' => 'string',
        'exclude_carriers' => 'string[]',
        'excluded_vehicle_types' => 'string[]',
        'proposal_types' => 'string[]',
        'destination_location_ids_with_contraints' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOfPickupLocationsInner[]',
        'allow_proposals_outside_store_hours' => 'bool',
        'promotion_id' => 'string',
        'additional_properties' => 'array<string,mixed>',
        'pickup_locations' => 'string[]',
        'pickup_locations_data' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1Inner[]',
        'pickup_location_ids_with_constraints' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOfPickupLocationsInner[]',
        'timeout_seconds' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pickup_info' => null,
        'pickup_window' => null,
        'destination_locations' => null,
        'destination_locations_ids' => 'uuid',
        'parcels' => null,
        'in_stock' => null,
        'handling' => null,
        'proof_of_delivery_requirement' => null,
        'instructions' => null,
        'original_order_id' => 'uuid',
        'exclude_carriers' => null,
        'excluded_vehicle_types' => null,
        'proposal_types' => null,
        'destination_location_ids_with_contraints' => null,
        'allow_proposals_outside_store_hours' => null,
        'promotion_id' => 'uuid',
        'additional_properties' => null,
        'pickup_locations' => 'uuid',
        'pickup_locations_data' => null,
        'pickup_location_ids_with_constraints' => null,
        'timeout_seconds' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pickup_info' => false,
        'pickup_window' => false,
        'destination_locations' => false,
        'destination_locations_ids' => false,
        'parcels' => false,
        'in_stock' => false,
        'handling' => false,
        'proof_of_delivery_requirement' => false,
        'instructions' => false,
        'original_order_id' => false,
        'exclude_carriers' => false,
        'excluded_vehicle_types' => false,
        'proposal_types' => false,
        'destination_location_ids_with_contraints' => false,
        'allow_proposals_outside_store_hours' => false,
        'promotion_id' => false,
        'additional_properties' => false,
        'pickup_locations' => false,
        'pickup_locations_data' => false,
        'pickup_location_ids_with_constraints' => false,
        'timeout_seconds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pickup_info' => 'pickupInfo',
        'pickup_window' => 'pickupWindow',
        'destination_locations' => 'destinationLocations',
        'destination_locations_ids' => 'destinationLocationsIds',
        'parcels' => 'parcels',
        'in_stock' => 'inStock',
        'handling' => 'handling',
        'proof_of_delivery_requirement' => 'proofOfDeliveryRequirement',
        'instructions' => 'instructions',
        'original_order_id' => 'originalOrderId',
        'exclude_carriers' => 'excludeCarriers',
        'excluded_vehicle_types' => 'excludedVehicleTypes',
        'proposal_types' => 'proposalTypes',
        'destination_location_ids_with_contraints' => 'destinationLocationIdsWithContraints',
        'allow_proposals_outside_store_hours' => 'allowProposalsOutsideStoreHours',
        'promotion_id' => 'promotionId',
        'additional_properties' => 'additionalProperties',
        'pickup_locations' => 'pickupLocations',
        'pickup_locations_data' => 'pickupLocationsData',
        'pickup_location_ids_with_constraints' => 'pickupLocationIdsWithConstraints',
        'timeout_seconds' => 'timeoutSeconds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pickup_info' => 'setPickupInfo',
        'pickup_window' => 'setPickupWindow',
        'destination_locations' => 'setDestinationLocations',
        'destination_locations_ids' => 'setDestinationLocationsIds',
        'parcels' => 'setParcels',
        'in_stock' => 'setInStock',
        'handling' => 'setHandling',
        'proof_of_delivery_requirement' => 'setProofOfDeliveryRequirement',
        'instructions' => 'setInstructions',
        'original_order_id' => 'setOriginalOrderId',
        'exclude_carriers' => 'setExcludeCarriers',
        'excluded_vehicle_types' => 'setExcludedVehicleTypes',
        'proposal_types' => 'setProposalTypes',
        'destination_location_ids_with_contraints' => 'setDestinationLocationIdsWithContraints',
        'allow_proposals_outside_store_hours' => 'setAllowProposalsOutsideStoreHours',
        'promotion_id' => 'setPromotionId',
        'additional_properties' => 'setAdditionalProperties',
        'pickup_locations' => 'setPickupLocations',
        'pickup_locations_data' => 'setPickupLocationsData',
        'pickup_location_ids_with_constraints' => 'setPickupLocationIdsWithConstraints',
        'timeout_seconds' => 'setTimeoutSeconds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pickup_info' => 'getPickupInfo',
        'pickup_window' => 'getPickupWindow',
        'destination_locations' => 'getDestinationLocations',
        'destination_locations_ids' => 'getDestinationLocationsIds',
        'parcels' => 'getParcels',
        'in_stock' => 'getInStock',
        'handling' => 'getHandling',
        'proof_of_delivery_requirement' => 'getProofOfDeliveryRequirement',
        'instructions' => 'getInstructions',
        'original_order_id' => 'getOriginalOrderId',
        'exclude_carriers' => 'getExcludeCarriers',
        'excluded_vehicle_types' => 'getExcludedVehicleTypes',
        'proposal_types' => 'getProposalTypes',
        'destination_location_ids_with_contraints' => 'getDestinationLocationIdsWithContraints',
        'allow_proposals_outside_store_hours' => 'getAllowProposalsOutsideStoreHours',
        'promotion_id' => 'getPromotionId',
        'additional_properties' => 'getAdditionalProperties',
        'pickup_locations' => 'getPickupLocations',
        'pickup_locations_data' => 'getPickupLocationsData',
        'pickup_location_ids_with_constraints' => 'getPickupLocationIdsWithConstraints',
        'timeout_seconds' => 'getTimeoutSeconds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HANDLING_ALCOHOL = 'alcohol';
    public const HANDLING_CAKE = 'cake';
    public const HANDLING_FLOWERS = 'flowers';
    public const HANDLING_FLUIDS = 'fluids';
    public const HANDLING_FRAGILE = 'fragile';
    public const HANDLING_HOT = 'hot';
    public const HANDLING_PERISHABLE = 'perishable';
    public const HANDLING_PRESCRIPTION_DRUGS = 'prescriptionDrugs';
    public const HANDLING_REQUIRES_REFRIGERATION = 'requiresRefrigeration';
    public const HANDLING_RIGHT_SIDE_UP = 'rightSideUp';
    public const HANDLING_TEMPERATURE_CONTROLLED = 'temperatureControlled';
    public const PROOF_OF_DELIVERY_REQUIREMENT_SIGNATURE = 'signature';
    public const PROOF_OF_DELIVERY_REQUIREMENT_PARCEL_PHOTO = 'parcelPhoto';
    public const PROOF_OF_DELIVERY_REQUIREMENT_PHOTO_ID = 'photoId';
    public const PROOF_OF_DELIVERY_REQUIREMENT_ANY = 'any';
    public const PROOF_OF_DELIVERY_REQUIREMENT_NONE = 'none';
    public const EXCLUDE_CARRIERS_STUART = 'Stuart';
    public const EXCLUDE_CARRIERS_GOPHR = 'Gophr';
    public const EXCLUDE_CARRIERS_PACKFLEET = 'Packfleet';
    public const EXCLUDE_CARRIERS_PEDIVAN = 'Pedivan';
    public const EXCLUDE_CARRIERS_PEDIVAN_FBX = 'PedivanFBX';
    public const EXCLUDE_CARRIERS_PEDIVAN_SAGE = 'PedivanSage';
    public const EXCLUDE_CARRIERS_PEDIVAN_OVERNIGHT = 'PedivanOvernight';
    public const EXCLUDE_CARRIERS_BRISQQ = 'Brisqq';
    public const EXCLUDE_CARRIERS_FINMILE = 'Finmile';
    public const EXCLUDE_CARRIERS_FINMILE_GREEN_ELF = 'FinmileGreenElf';
    public const EXCLUDE_CARRIERS_UBER = 'Uber';
    public const EXCLUDE_CARRIERS_DPD = 'DPD';
    public const EXCLUDE_CARRIERS_SPEED_COURIERS = 'SpeedCouriers';
    public const EXCLUDE_CARRIERS_EVERMILE_MANUAL = 'EvermileManual';
    public const EXCLUDE_CARRIERS_EVERMILE_FLICK_FIRST = 'EvermileFlickFirst';
    public const EXCLUDE_CARRIERS_EVERMILE_GO_PANDA = 'EvermileGoPanda';
    public const EXCLUDE_CARRIERS_EVERMILE_VANUSE = 'EvermileVanuse';
    public const EXCLUDE_CARRIERS_APC = 'APC';
    public const EXCLUDE_CARRIERS_UPS = 'UPS';
    public const EXCLUDE_CARRIERS_DHL = 'DHL';
    public const EXCLUDE_CARRIERS_EVERMILE_OWN_FLEET = 'EvermileOwnFleet';
    public const EXCLUDE_CARRIERS_GO_PANDA = 'GoPanda';
    public const EXCLUDED_VEHICLE_TYPES_PUSHBIKE = 'pushbike';
    public const EXCLUDED_VEHICLE_TYPES_MOTORBIKE = 'motorbike';
    public const EXCLUDED_VEHICLE_TYPES_CARGO_BIKE = 'cargo_bike';
    public const EXCLUDED_VEHICLE_TYPES_CAR = 'car';
    public const EXCLUDED_VEHICLE_TYPES_SMALL_VAN = 'small_van';
    public const EXCLUDED_VEHICLE_TYPES_MEDIUM_VAN = 'medium_van';
    public const EXCLUDED_VEHICLE_TYPES_LARGE_VAN = 'large_van';
    public const EXCLUDED_VEHICLE_TYPES_XLARGE_VAN = 'xlarge_van';
    public const PROPOSAL_TYPES_GREEN = 'Green';
    public const PROPOSAL_TYPES_FLEXIBLE = 'flexible';
    public const PROPOSAL_TYPES_STORE_PICKUP = 'storePickup';
    public const PROPOSAL_TYPES_OWN_FLEET = 'ownFleet';
    public const PROPOSAL_TYPES_COLLECTION_POINT = 'CollectionPoint';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandlingAllowableValues()
    {
        return [
            self::HANDLING_ALCOHOL,
            self::HANDLING_CAKE,
            self::HANDLING_FLOWERS,
            self::HANDLING_FLUIDS,
            self::HANDLING_FRAGILE,
            self::HANDLING_HOT,
            self::HANDLING_PERISHABLE,
            self::HANDLING_PRESCRIPTION_DRUGS,
            self::HANDLING_REQUIRES_REFRIGERATION,
            self::HANDLING_RIGHT_SIDE_UP,
            self::HANDLING_TEMPERATURE_CONTROLLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProofOfDeliveryRequirementAllowableValues()
    {
        return [
            self::PROOF_OF_DELIVERY_REQUIREMENT_SIGNATURE,
            self::PROOF_OF_DELIVERY_REQUIREMENT_PARCEL_PHOTO,
            self::PROOF_OF_DELIVERY_REQUIREMENT_PHOTO_ID,
            self::PROOF_OF_DELIVERY_REQUIREMENT_ANY,
            self::PROOF_OF_DELIVERY_REQUIREMENT_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcludeCarriersAllowableValues()
    {
        return [
            self::EXCLUDE_CARRIERS_STUART,
            self::EXCLUDE_CARRIERS_GOPHR,
            self::EXCLUDE_CARRIERS_PACKFLEET,
            self::EXCLUDE_CARRIERS_PEDIVAN,
            self::EXCLUDE_CARRIERS_PEDIVAN_FBX,
            self::EXCLUDE_CARRIERS_PEDIVAN_SAGE,
            self::EXCLUDE_CARRIERS_PEDIVAN_OVERNIGHT,
            self::EXCLUDE_CARRIERS_BRISQQ,
            self::EXCLUDE_CARRIERS_FINMILE,
            self::EXCLUDE_CARRIERS_FINMILE_GREEN_ELF,
            self::EXCLUDE_CARRIERS_UBER,
            self::EXCLUDE_CARRIERS_DPD,
            self::EXCLUDE_CARRIERS_SPEED_COURIERS,
            self::EXCLUDE_CARRIERS_EVERMILE_MANUAL,
            self::EXCLUDE_CARRIERS_EVERMILE_FLICK_FIRST,
            self::EXCLUDE_CARRIERS_EVERMILE_GO_PANDA,
            self::EXCLUDE_CARRIERS_EVERMILE_VANUSE,
            self::EXCLUDE_CARRIERS_APC,
            self::EXCLUDE_CARRIERS_UPS,
            self::EXCLUDE_CARRIERS_DHL,
            self::EXCLUDE_CARRIERS_EVERMILE_OWN_FLEET,
            self::EXCLUDE_CARRIERS_GO_PANDA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcludedVehicleTypesAllowableValues()
    {
        return [
            self::EXCLUDED_VEHICLE_TYPES_PUSHBIKE,
            self::EXCLUDED_VEHICLE_TYPES_MOTORBIKE,
            self::EXCLUDED_VEHICLE_TYPES_CARGO_BIKE,
            self::EXCLUDED_VEHICLE_TYPES_CAR,
            self::EXCLUDED_VEHICLE_TYPES_SMALL_VAN,
            self::EXCLUDED_VEHICLE_TYPES_MEDIUM_VAN,
            self::EXCLUDED_VEHICLE_TYPES_LARGE_VAN,
            self::EXCLUDED_VEHICLE_TYPES_XLARGE_VAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProposalTypesAllowableValues()
    {
        return [
            self::PROPOSAL_TYPES_GREEN,
            self::PROPOSAL_TYPES_FLEXIBLE,
            self::PROPOSAL_TYPES_STORE_PICKUP,
            self::PROPOSAL_TYPES_OWN_FLEET,
            self::PROPOSAL_TYPES_COLLECTION_POINT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pickup_info', $data ?? [], null);
        $this->setIfExists('pickup_window', $data ?? [], null);
        $this->setIfExists('destination_locations', $data ?? [], null);
        $this->setIfExists('destination_locations_ids', $data ?? [], null);
        $this->setIfExists('parcels', $data ?? [], null);
        $this->setIfExists('in_stock', $data ?? [], true);
        $this->setIfExists('handling', $data ?? [], null);
        $this->setIfExists('proof_of_delivery_requirement', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('original_order_id', $data ?? [], null);
        $this->setIfExists('exclude_carriers', $data ?? [], null);
        $this->setIfExists('excluded_vehicle_types', $data ?? [], null);
        $this->setIfExists('proposal_types', $data ?? [], null);
        $this->setIfExists('destination_location_ids_with_contraints', $data ?? [], null);
        $this->setIfExists('allow_proposals_outside_store_hours', $data ?? [], null);
        $this->setIfExists('promotion_id', $data ?? [], null);
        $this->setIfExists('additional_properties', $data ?? [], null);
        $this->setIfExists('pickup_locations', $data ?? [], null);
        $this->setIfExists('pickup_locations_data', $data ?? [], null);
        $this->setIfExists('pickup_location_ids_with_constraints', $data ?? [], null);
        $this->setIfExists('timeout_seconds', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['destination_locations']) && (count($this->container['destination_locations']) > 2)) {
            $invalidProperties[] = "invalid value for 'destination_locations', number of items must be less than or equal to 2.";
        }

        if (!is_null($this->container['destination_locations_ids']) && (count($this->container['destination_locations_ids']) < 1)) {
            $invalidProperties[] = "invalid value for 'destination_locations_ids', number of items must be greater than or equal to 1.";
        }

        if ($this->container['parcels'] === null) {
            $invalidProperties[] = "'parcels' can't be null";
        }
        if ((count($this->container['parcels']) < 1)) {
            $invalidProperties[] = "invalid value for 'parcels', number of items must be greater than or equal to 1.";
        }

        if ($this->container['in_stock'] === null) {
            $invalidProperties[] = "'in_stock' can't be null";
        }
        if (!is_null($this->container['excluded_vehicle_types']) && (count($this->container['excluded_vehicle_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'excluded_vehicle_types', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['proposal_types']) && (count($this->container['proposal_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'proposal_types', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['pickup_locations']) && (count($this->container['pickup_locations']) < 1)) {
            $invalidProperties[] = "invalid value for 'pickup_locations', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['pickup_locations_data']) && (count($this->container['pickup_locations_data']) > 2)) {
            $invalidProperties[] = "invalid value for 'pickup_locations_data', number of items must be less than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pickup_info
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfo|null
     */
    public function getPickupInfo()
    {
        return $this->container['pickup_info'];
    }

    /**
     * Sets pickup_info
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfo|null $pickup_info pickup_info
     *
     * @return self
     */
    public function setPickupInfo($pickup_info)
    {
        if (is_null($pickup_info)) {
            throw new \InvalidArgumentException('non-nullable pickup_info cannot be null');
        }
        $this->container['pickup_info'] = $pickup_info;

        return $this;
    }

    /**
     * Gets pickup_window
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupWindow|null
     */
    public function getPickupWindow()
    {
        return $this->container['pickup_window'];
    }

    /**
     * Sets pickup_window
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupWindow|null $pickup_window pickup_window
     *
     * @return self
     */
    public function setPickupWindow($pickup_window)
    {
        if (is_null($pickup_window)) {
            throw new \InvalidArgumentException('non-nullable pickup_window cannot be null');
        }
        $this->container['pickup_window'] = $pickup_window;

        return $this;
    }

    /**
     * Gets destination_locations
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInner[]|null
     */
    public function getDestinationLocations()
    {
        return $this->container['destination_locations'];
    }

    /**
     * Sets destination_locations
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInner[]|null $destination_locations A list of locations to which the items can be delivered. Either *destinationLocations* or *destinationLocationIds* must be provided.
     *
     * @return self
     */
    public function setDestinationLocations($destination_locations)
    {
        if (is_null($destination_locations)) {
            throw new \InvalidArgumentException('non-nullable destination_locations cannot be null');
        }

        if ((count($destination_locations) > 2)) {
            throw new \InvalidArgumentException('invalid value for $destination_locations when calling QuotePostRequest., number of items must be less than or equal to 2.');
        }
        $this->container['destination_locations'] = $destination_locations;

        return $this;
    }

    /**
     * Gets destination_locations_ids
     *
     * @return string[]|null
     */
    public function getDestinationLocationsIds()
    {
        return $this->container['destination_locations_ids'];
    }

    /**
     * Sets destination_locations_ids
     *
     * @param string[]|null $destination_locations_ids A list of location ids to which the items can be delivered. Either *destinationLocations* or *destinationLocationIds* must be provided.
     *
     * @return self
     */
    public function setDestinationLocationsIds($destination_locations_ids)
    {
        if (is_null($destination_locations_ids)) {
            throw new \InvalidArgumentException('non-nullable destination_locations_ids cannot be null');
        }


        if ((count($destination_locations_ids) < 1)) {
            throw new \InvalidArgumentException('invalid length for $destination_locations_ids when calling QuotePostRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['destination_locations_ids'] = $destination_locations_ids;

        return $this;
    }

    /**
     * Gets parcels
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInner[]
     */
    public function getParcels()
    {
        return $this->container['parcels'];
    }

    /**
     * Sets parcels
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInner[] $parcels The list of parcels to pick up in this delivery from any **single** source<br>(must all be available at all of the pickup locations in *pickupLocations*)
     *
     * @return self
     */
    public function setParcels($parcels)
    {
        if (is_null($parcels)) {
            throw new \InvalidArgumentException('non-nullable parcels cannot be null');
        }


        if ((count($parcels) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parcels when calling QuotePostRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['parcels'] = $parcels;

        return $this;
    }

    /**
     * Gets in_stock
     *
     * @return bool
     */
    public function getInStock()
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param bool $in_stock Are all the items in stock (may affect the proposals)
     *
     * @return self
     */
    public function setInStock($in_stock)
    {
        if (is_null($in_stock)) {
            throw new \InvalidArgumentException('non-nullable in_stock cannot be null');
        }
        $this->container['in_stock'] = $in_stock;

        return $this;
    }

    /**
     * Gets handling
     *
     * @return string[]|null
     */
    public function getHandling()
    {
        return $this->container['handling'];
    }

    /**
     * Sets handling
     *
     * @param string[]|null $handling Handling instructions for a parcel
     *
     * @return self
     */
    public function setHandling($handling)
    {
        if (is_null($handling)) {
            throw new \InvalidArgumentException('non-nullable handling cannot be null');
        }
        $allowedValues = $this->getHandlingAllowableValues();
        if (array_diff($handling, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'handling', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handling'] = $handling;

        return $this;
    }

    /**
     * Gets proof_of_delivery_requirement
     *
     * @return string[]|null
     */
    public function getProofOfDeliveryRequirement()
    {
        return $this->container['proof_of_delivery_requirement'];
    }

    /**
     * Sets proof_of_delivery_requirement
     *
     * @param string[]|null $proof_of_delivery_requirement Proof of delivery requirements for a parcel
     *
     * @return self
     */
    public function setProofOfDeliveryRequirement($proof_of_delivery_requirement)
    {
        if (is_null($proof_of_delivery_requirement)) {
            throw new \InvalidArgumentException('non-nullable proof_of_delivery_requirement cannot be null');
        }
        $allowedValues = $this->getProofOfDeliveryRequirementAllowableValues();
        if (array_diff($proof_of_delivery_requirement, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'proof_of_delivery_requirement', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proof_of_delivery_requirement'] = $proof_of_delivery_requirement;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions Additional handling instructions for the packages
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets original_order_id
     *
     * @return string|null
     */
    public function getOriginalOrderId()
    {
        return $this->container['original_order_id'];
    }

    /**
     * Sets original_order_id
     *
     * @param string|null $original_order_id The id of the order that this quote is based on, usually for cases when editing an existing order
     *
     * @return self
     */
    public function setOriginalOrderId($original_order_id)
    {
        if (is_null($original_order_id)) {
            throw new \InvalidArgumentException('non-nullable original_order_id cannot be null');
        }
        $this->container['original_order_id'] = $original_order_id;

        return $this;
    }

    /**
     * Gets exclude_carriers
     *
     * @return string[]|null
     */
    public function getExcludeCarriers()
    {
        return $this->container['exclude_carriers'];
    }

    /**
     * Sets exclude_carriers
     *
     * @param string[]|null $exclude_carriers An array of carriers names to exclude from the proposals results
     *
     * @return self
     */
    public function setExcludeCarriers($exclude_carriers)
    {
        if (is_null($exclude_carriers)) {
            throw new \InvalidArgumentException('non-nullable exclude_carriers cannot be null');
        }
        $allowedValues = $this->getExcludeCarriersAllowableValues();
        if (array_diff($exclude_carriers, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exclude_carriers', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exclude_carriers'] = $exclude_carriers;

        return $this;
    }

    /**
     * Gets excluded_vehicle_types
     *
     * @return string[]|null
     */
    public function getExcludedVehicleTypes()
    {
        return $this->container['excluded_vehicle_types'];
    }

    /**
     * Sets excluded_vehicle_types
     *
     * @param string[]|null $excluded_vehicle_types Which vehicle types to exclude from the request. **note** excluding vehicle types may result in higher prices.
     *
     * @return self
     */
    public function setExcludedVehicleTypes($excluded_vehicle_types)
    {
        if (is_null($excluded_vehicle_types)) {
            throw new \InvalidArgumentException('non-nullable excluded_vehicle_types cannot be null');
        }
        $allowedValues = $this->getExcludedVehicleTypesAllowableValues();
        if (array_diff($excluded_vehicle_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'excluded_vehicle_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        if ((count($excluded_vehicle_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $excluded_vehicle_types when calling QuotePostRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['excluded_vehicle_types'] = $excluded_vehicle_types;

        return $this;
    }

    /**
     * Gets proposal_types
     *
     * @return string[]|null
     */
    public function getProposalTypes()
    {
        return $this->container['proposal_types'];
    }

    /**
     * Sets proposal_types
     *
     * @param string[]|null $proposal_types proposal_types
     *
     * @return self
     */
    public function setProposalTypes($proposal_types)
    {
        if (is_null($proposal_types)) {
            throw new \InvalidArgumentException('non-nullable proposal_types cannot be null');
        }
        $allowedValues = $this->getProposalTypesAllowableValues();
        if (array_diff($proposal_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'proposal_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        if ((count($proposal_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $proposal_types when calling QuotePostRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['proposal_types'] = $proposal_types;

        return $this;
    }

    /**
     * Gets destination_location_ids_with_contraints
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOfPickupLocationsInner[]|null
     */
    public function getDestinationLocationIdsWithContraints()
    {
        return $this->container['destination_location_ids_with_contraints'];
    }

    /**
     * Sets destination_location_ids_with_contraints
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOfPickupLocationsInner[]|null $destination_location_ids_with_contraints destination_location_ids_with_contraints
     *
     * @return self
     */
    public function setDestinationLocationIdsWithContraints($destination_location_ids_with_contraints)
    {
        if (is_null($destination_location_ids_with_contraints)) {
            throw new \InvalidArgumentException('non-nullable destination_location_ids_with_contraints cannot be null');
        }
        $this->container['destination_location_ids_with_contraints'] = $destination_location_ids_with_contraints;

        return $this;
    }

    /**
     * Gets allow_proposals_outside_store_hours
     *
     * @return bool|null
     */
    public function getAllowProposalsOutsideStoreHours()
    {
        return $this->container['allow_proposals_outside_store_hours'];
    }

    /**
     * Sets allow_proposals_outside_store_hours
     *
     * @param bool|null $allow_proposals_outside_store_hours Whether to allow proposals outside store hours
     *
     * @return self
     */
    public function setAllowProposalsOutsideStoreHours($allow_proposals_outside_store_hours)
    {
        if (is_null($allow_proposals_outside_store_hours)) {
            throw new \InvalidArgumentException('non-nullable allow_proposals_outside_store_hours cannot be null');
        }
        $this->container['allow_proposals_outside_store_hours'] = $allow_proposals_outside_store_hours;

        return $this;
    }

    /**
     * Gets promotion_id
     *
     * @return string|null
     */
    public function getPromotionId()
    {
        return $this->container['promotion_id'];
    }

    /**
     * Sets promotion_id
     *
     * @param string|null $promotion_id The id of the promotion to apply to this quote
     *
     * @return self
     */
    public function setPromotionId($promotion_id)
    {
        if (is_null($promotion_id)) {
            throw new \InvalidArgumentException('non-nullable promotion_id cannot be null');
        }
        $this->container['promotion_id'] = $promotion_id;

        return $this;
    }

    /**
     * Gets additional_properties
     *
     * @return array<string,mixed>|null
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     *
     * @param array<string,mixed>|null $additional_properties Additional properties for the order
     *
     * @return self
     */
    public function setAdditionalProperties($additional_properties)
    {
        if (is_null($additional_properties)) {
            throw new \InvalidArgumentException('non-nullable additional_properties cannot be null');
        }
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets pickup_locations
     *
     * @return string[]|null
     * @deprecated
     */
    public function getPickupLocations()
    {
        return $this->container['pickup_locations'];
    }

    /**
     * Sets pickup_locations
     *
     * @param string[]|null $pickup_locations A list of location ids from which the items can be picked up. **Deprecated** use *pickupInfo* instead.
     *
     * @return self
     * @deprecated
     */
    public function setPickupLocations($pickup_locations)
    {
        if (is_null($pickup_locations)) {
            throw new \InvalidArgumentException('non-nullable pickup_locations cannot be null');
        }


        if ((count($pickup_locations) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pickup_locations when calling QuotePostRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['pickup_locations'] = $pickup_locations;

        return $this;
    }

    /**
     * Gets pickup_locations_data
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1Inner[]|null
     * @deprecated
     */
    public function getPickupLocationsData()
    {
        return $this->container['pickup_locations_data'];
    }

    /**
     * Sets pickup_locations_data
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1Inner[]|null $pickup_locations_data A list of locations from which the items can be picked up. **Deprecated** use *pickupInfo* instead.
     *
     * @return self
     * @deprecated
     */
    public function setPickupLocationsData($pickup_locations_data)
    {
        if (is_null($pickup_locations_data)) {
            throw new \InvalidArgumentException('non-nullable pickup_locations_data cannot be null');
        }

        if ((count($pickup_locations_data) > 2)) {
            throw new \InvalidArgumentException('invalid value for $pickup_locations_data when calling QuotePostRequest., number of items must be less than or equal to 2.');
        }
        $this->container['pickup_locations_data'] = $pickup_locations_data;

        return $this;
    }

    /**
     * Gets pickup_location_ids_with_constraints
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOfPickupLocationsInner[]|null
     * @deprecated
     */
    public function getPickupLocationIdsWithConstraints()
    {
        return $this->container['pickup_location_ids_with_constraints'];
    }

    /**
     * Sets pickup_location_ids_with_constraints
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOfPickupLocationsInner[]|null $pickup_location_ids_with_constraints A list of location ids from which the items can be picked up, with a pickup constraint. **Deprecated** use *pickupInfo* instead.
     *
     * @return self
     * @deprecated
     */
    public function setPickupLocationIdsWithConstraints($pickup_location_ids_with_constraints)
    {
        if (is_null($pickup_location_ids_with_constraints)) {
            throw new \InvalidArgumentException('non-nullable pickup_location_ids_with_constraints cannot be null');
        }
        $this->container['pickup_location_ids_with_constraints'] = $pickup_location_ids_with_constraints;

        return $this;
    }

    /**
     * Gets timeout_seconds
     *
     * @return float|null
     */
    public function getTimeoutSeconds()
    {
        return $this->container['timeout_seconds'];
    }

    /**
     * Sets timeout_seconds
     *
     * @param float|null $timeout_seconds The timeout in seconds for the quote request
     *
     * @return self
     */
    public function setTimeoutSeconds($timeout_seconds)
    {
        if (is_null($timeout_seconds)) {
            throw new \InvalidArgumentException('non-nullable timeout_seconds cannot be null');
        }
        $this->container['timeout_seconds'] = $timeout_seconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


