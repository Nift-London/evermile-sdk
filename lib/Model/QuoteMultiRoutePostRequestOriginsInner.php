<?php
/**
 * QuoteMultiRoutePostRequestOriginsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuoteMultiRoutePostRequestOriginsInner Class Doc Comment
 *
 * @category Class
 * @description Destination
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuoteMultiRoutePostRequestOriginsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_multiRoute_post_request_origins_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reference_id' => 'string',
        'location_id' => 'string',
        'location' => '\OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInner',
        'parcel_reference_ids' => 'string[]',
        'location_constraints' => '\OpenAPI\Client\Model\QuoteMultiRoutePostRequestOriginsInnerLocationConstraints',
        'handling' => 'string[]',
        'proof_requirement' => 'string[]',
        'instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reference_id' => null,
        'location_id' => 'uuid',
        'location' => null,
        'parcel_reference_ids' => null,
        'location_constraints' => null,
        'handling' => null,
        'proof_requirement' => null,
        'instructions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'reference_id' => false,
        'location_id' => false,
        'location' => false,
        'parcel_reference_ids' => false,
        'location_constraints' => false,
        'handling' => false,
        'proof_requirement' => false,
        'instructions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference_id' => 'referenceId',
        'location_id' => 'locationId',
        'location' => 'location',
        'parcel_reference_ids' => 'parcelReferenceIds',
        'location_constraints' => 'locationConstraints',
        'handling' => 'handling',
        'proof_requirement' => 'proofRequirement',
        'instructions' => 'instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference_id' => 'setReferenceId',
        'location_id' => 'setLocationId',
        'location' => 'setLocation',
        'parcel_reference_ids' => 'setParcelReferenceIds',
        'location_constraints' => 'setLocationConstraints',
        'handling' => 'setHandling',
        'proof_requirement' => 'setProofRequirement',
        'instructions' => 'setInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference_id' => 'getReferenceId',
        'location_id' => 'getLocationId',
        'location' => 'getLocation',
        'parcel_reference_ids' => 'getParcelReferenceIds',
        'location_constraints' => 'getLocationConstraints',
        'handling' => 'getHandling',
        'proof_requirement' => 'getProofRequirement',
        'instructions' => 'getInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HANDLING_ALCOHOL = 'alcohol';
    public const HANDLING_CAKE = 'cake';
    public const HANDLING_FLOWERS = 'flowers';
    public const HANDLING_FLUIDS = 'fluids';
    public const HANDLING_FRAGILE = 'fragile';
    public const HANDLING_HOT = 'hot';
    public const HANDLING_PERISHABLE = 'perishable';
    public const HANDLING_PRESCRIPTION_DRUGS = 'prescriptionDrugs';
    public const HANDLING_REQUIRES_REFRIGERATION = 'requiresRefrigeration';
    public const HANDLING_RIGHT_SIDE_UP = 'rightSideUp';
    public const HANDLING_TEMPERATURE_CONTROLLED = 'temperatureControlled';
    public const PROOF_REQUIREMENT_SIGNATURE = 'signature';
    public const PROOF_REQUIREMENT_PARCEL_PHOTO = 'parcelPhoto';
    public const PROOF_REQUIREMENT_PHOTO_ID = 'photoId';
    public const PROOF_REQUIREMENT_ANY = 'any';
    public const PROOF_REQUIREMENT_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandlingAllowableValues()
    {
        return [
            self::HANDLING_ALCOHOL,
            self::HANDLING_CAKE,
            self::HANDLING_FLOWERS,
            self::HANDLING_FLUIDS,
            self::HANDLING_FRAGILE,
            self::HANDLING_HOT,
            self::HANDLING_PERISHABLE,
            self::HANDLING_PRESCRIPTION_DRUGS,
            self::HANDLING_REQUIRES_REFRIGERATION,
            self::HANDLING_RIGHT_SIDE_UP,
            self::HANDLING_TEMPERATURE_CONTROLLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProofRequirementAllowableValues()
    {
        return [
            self::PROOF_REQUIREMENT_SIGNATURE,
            self::PROOF_REQUIREMENT_PARCEL_PHOTO,
            self::PROOF_REQUIREMENT_PHOTO_ID,
            self::PROOF_REQUIREMENT_ANY,
            self::PROOF_REQUIREMENT_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('parcel_reference_ids', $data ?? [], null);
        $this->setIfExists('location_constraints', $data ?? [], null);
        $this->setIfExists('handling', $data ?? [], null);
        $this->setIfExists('proof_requirement', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reference_id'] === null) {
            $invalidProperties[] = "'reference_id' can't be null";
        }
        if ($this->container['parcel_reference_ids'] === null) {
            $invalidProperties[] = "'parcel_reference_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_id
     *
     * @return string
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string $reference_id A required reference ID for the location. Must be unique within the context of a route.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string|null $location_id The location ID in the Evermile database
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInner|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInner|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets parcel_reference_ids
     *
     * @return string[]
     */
    public function getParcelReferenceIds()
    {
        return $this->container['parcel_reference_ids'];
    }

    /**
     * Sets parcel_reference_ids
     *
     * @param string[] $parcel_reference_ids A list of parcel reference ids that should be picked up or dropped off at the current location.
     *
     * @return self
     */
    public function setParcelReferenceIds($parcel_reference_ids)
    {
        if (is_null($parcel_reference_ids)) {
            throw new \InvalidArgumentException('non-nullable parcel_reference_ids cannot be null');
        }
        $this->container['parcel_reference_ids'] = $parcel_reference_ids;

        return $this;
    }

    /**
     * Gets location_constraints
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePostRequestOriginsInnerLocationConstraints|null
     */
    public function getLocationConstraints()
    {
        return $this->container['location_constraints'];
    }

    /**
     * Sets location_constraints
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePostRequestOriginsInnerLocationConstraints|null $location_constraints location_constraints
     *
     * @return self
     */
    public function setLocationConstraints($location_constraints)
    {
        if (is_null($location_constraints)) {
            throw new \InvalidArgumentException('non-nullable location_constraints cannot be null');
        }
        $this->container['location_constraints'] = $location_constraints;

        return $this;
    }

    /**
     * Gets handling
     *
     * @return string[]|null
     */
    public function getHandling()
    {
        return $this->container['handling'];
    }

    /**
     * Sets handling
     *
     * @param string[]|null $handling Handling instructions for the parcels
     *
     * @return self
     */
    public function setHandling($handling)
    {
        if (is_null($handling)) {
            throw new \InvalidArgumentException('non-nullable handling cannot be null');
        }
        $allowedValues = $this->getHandlingAllowableValues();
        if (array_diff($handling, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'handling', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handling'] = $handling;

        return $this;
    }

    /**
     * Gets proof_requirement
     *
     * @return string[]|null
     */
    public function getProofRequirement()
    {
        return $this->container['proof_requirement'];
    }

    /**
     * Sets proof_requirement
     *
     * @param string[]|null $proof_requirement Proof of delivery requirements for a parcel
     *
     * @return self
     */
    public function setProofRequirement($proof_requirement)
    {
        if (is_null($proof_requirement)) {
            throw new \InvalidArgumentException('non-nullable proof_requirement cannot be null');
        }
        $allowedValues = $this->getProofRequirementAllowableValues();
        if (array_diff($proof_requirement, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'proof_requirement', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proof_requirement'] = $proof_requirement;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions Additional handling instructions for the packages
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


