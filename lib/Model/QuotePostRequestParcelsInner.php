<?php
/**
 * QuotePostRequestParcelsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuotePostRequestParcelsInner Class Doc Comment
 *
 * @category Class
 * @description Data about the parcel
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuotePostRequestParcelsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_post_request_parcels_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reference_id' => 'string',
        'dimensions' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerDimensions',
        'weight_kg' => 'float',
        'parcel_type' => 'string',
        'template_name' => 'string',
        'items_list' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reference_id' => null,
        'dimensions' => null,
        'weight_kg' => 'float',
        'parcel_type' => null,
        'template_name' => null,
        'items_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'reference_id' => false,
        'dimensions' => false,
        'weight_kg' => false,
        'parcel_type' => false,
        'template_name' => false,
        'items_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference_id' => 'referenceId',
        'dimensions' => 'dimensions',
        'weight_kg' => 'weightKg',
        'parcel_type' => 'parcelType',
        'template_name' => 'templateName',
        'items_list' => 'itemsList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference_id' => 'setReferenceId',
        'dimensions' => 'setDimensions',
        'weight_kg' => 'setWeightKg',
        'parcel_type' => 'setParcelType',
        'template_name' => 'setTemplateName',
        'items_list' => 'setItemsList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference_id' => 'getReferenceId',
        'dimensions' => 'getDimensions',
        'weight_kg' => 'getWeightKg',
        'parcel_type' => 'getParcelType',
        'template_name' => 'getTemplateName',
        'items_list' => 'getItemsList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PARCEL_TYPE_PACKAGE = 'Package';
    public const PARCEL_TYPE_FLOWER_BOUQUET = 'FlowerBouquet';
    public const PARCEL_TYPE_ALCOHOL = 'alcohol';
    public const PARCEL_TYPE_CAKE = 'cake';
    public const PARCEL_TYPE_FLOWERS = 'flowers';
    public const PARCEL_TYPE_PARCEL = 'parcel';
    public const PARCEL_TYPE_PERISHABLE = 'perishable';
    public const PARCEL_TYPE_CUSTOM = 'custom';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParcelTypeAllowableValues()
    {
        return [
            self::PARCEL_TYPE_PACKAGE,
            self::PARCEL_TYPE_FLOWER_BOUQUET,
            self::PARCEL_TYPE_ALCOHOL,
            self::PARCEL_TYPE_CAKE,
            self::PARCEL_TYPE_FLOWERS,
            self::PARCEL_TYPE_PARCEL,
            self::PARCEL_TYPE_PERISHABLE,
            self::PARCEL_TYPE_CUSTOM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('weight_kg', $data ?? [], null);
        $this->setIfExists('parcel_type', $data ?? [], 'Package');
        $this->setIfExists('template_name', $data ?? [], null);
        $this->setIfExists('items_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if ($this->container['weight_kg'] === null) {
            $invalidProperties[] = "'weight_kg' can't be null";
        }
        if ($this->container['parcel_type'] === null) {
            $invalidProperties[] = "'parcel_type' can't be null";
        }
        $allowedValues = $this->getParcelTypeAllowableValues();
        if (!is_null($this->container['parcel_type']) && !in_array($this->container['parcel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'parcel_type', must be one of '%s'",
                $this->container['parcel_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['items_list']) && (count($this->container['items_list']) < 1)) {
            $invalidProperties[] = "invalid value for 'items_list', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id A reference ID for the parcel, to allow matching up with pickup/dropoff locations. Should be unique within the context of a route.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerDimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerDimensions $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight_kg
     *
     * @return float
     */
    public function getWeightKg()
    {
        return $this->container['weight_kg'];
    }

    /**
     * Sets weight_kg
     *
     * @param float $weight_kg Weight of the package in Kilograms
     *
     * @return self
     */
    public function setWeightKg($weight_kg)
    {
        if (is_null($weight_kg)) {
            throw new \InvalidArgumentException('non-nullable weight_kg cannot be null');
        }
        $this->container['weight_kg'] = $weight_kg;

        return $this;
    }

    /**
     * Gets parcel_type
     *
     * @return string
     */
    public function getParcelType()
    {
        return $this->container['parcel_type'];
    }

    /**
     * Sets parcel_type
     *
     * @param string $parcel_type <u>The type of package</u>: <br> <table>   <tr><td>alcohol</td>          <td>A parcel containing alcohol</td></tr>   <tr><td>cake</td>             <td>A parcel containing a cake</td></tr>   <tr><td>flowers</td>          <td>A parcel containing flowers</td></tr>   <tr><td>parcel</td>           <td>A parcel containing miscellaneous items</td></tr>   <tr><td>perishable</td>       <td>A parcel containing perishable items</td></tr>   <tr><td>custom</td>           <td>A parcel with custom dimensions</td></tr>         </table>
     *
     * @return self
     */
    public function setParcelType($parcel_type)
    {
        if (is_null($parcel_type)) {
            throw new \InvalidArgumentException('non-nullable parcel_type cannot be null');
        }
        $allowedValues = $this->getParcelTypeAllowableValues();
        if (!in_array($parcel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'parcel_type', must be one of '%s'",
                    $parcel_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['parcel_type'] = $parcel_type;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string|null
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string|null $template_name template_name
     *
     * @return self
     */
    public function setTemplateName($template_name)
    {
        if (is_null($template_name)) {
            throw new \InvalidArgumentException('non-nullable template_name cannot be null');
        }
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets items_list
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInner[]|null
     */
    public function getItemsList()
    {
        return $this->container['items_list'];
    }

    /**
     * Sets items_list
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInner[]|null $items_list items_list
     *
     * @return self
     */
    public function setItemsList($items_list)
    {
        if (is_null($items_list)) {
            throw new \InvalidArgumentException('non-nullable items_list cannot be null');
        }


        if ((count($items_list) < 1)) {
            throw new \InvalidArgumentException('invalid length for $items_list when calling QuotePostRequestParcelsInner., number of items must be greater than or equal to 1.');
        }
        $this->container['items_list'] = $items_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


