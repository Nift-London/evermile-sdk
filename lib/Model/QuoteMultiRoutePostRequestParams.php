<?php
/**
 * QuoteMultiRoutePostRequestParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuoteMultiRoutePostRequestParams Class Doc Comment
 *
 * @category Class
 * @description Parameters for a multi-route quote request
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuoteMultiRoutePostRequestParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_multiRoute_post_request_params';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'proposal_types' => 'string[]',
        'exclude_carriers' => 'string[]',
        'excluded_vehicle_types' => 'string[]',
        'earliest_pickup_start_time' => '\DateTime',
        'latest_pickup_end_time' => '\DateTime',
        'earliest_dropoff_start_time' => '\DateTime',
        'latest_dropoff_end_time' => '\DateTime',
        'optimize_tasks_order' => 'bool',
        'optimization_params' => '\OpenAPI\Client\Model\QuoteMultiRoutePostRequestParamsOptimizationParamsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'proposal_types' => null,
        'exclude_carriers' => null,
        'excluded_vehicle_types' => null,
        'earliest_pickup_start_time' => 'date-time',
        'latest_pickup_end_time' => 'date-time',
        'earliest_dropoff_start_time' => 'date-time',
        'latest_dropoff_end_time' => 'date-time',
        'optimize_tasks_order' => null,
        'optimization_params' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'proposal_types' => false,
        'exclude_carriers' => false,
        'excluded_vehicle_types' => false,
        'earliest_pickup_start_time' => false,
        'latest_pickup_end_time' => false,
        'earliest_dropoff_start_time' => false,
        'latest_dropoff_end_time' => false,
        'optimize_tasks_order' => false,
        'optimization_params' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'proposal_types' => 'proposalTypes',
        'exclude_carriers' => 'excludeCarriers',
        'excluded_vehicle_types' => 'excludedVehicleTypes',
        'earliest_pickup_start_time' => 'earliestPickupStartTime',
        'latest_pickup_end_time' => 'latestPickupEndTime',
        'earliest_dropoff_start_time' => 'earliestDropoffStartTime',
        'latest_dropoff_end_time' => 'latestDropoffEndTime',
        'optimize_tasks_order' => 'optimizeTasksOrder',
        'optimization_params' => 'optimizationParams'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'proposal_types' => 'setProposalTypes',
        'exclude_carriers' => 'setExcludeCarriers',
        'excluded_vehicle_types' => 'setExcludedVehicleTypes',
        'earliest_pickup_start_time' => 'setEarliestPickupStartTime',
        'latest_pickup_end_time' => 'setLatestPickupEndTime',
        'earliest_dropoff_start_time' => 'setEarliestDropoffStartTime',
        'latest_dropoff_end_time' => 'setLatestDropoffEndTime',
        'optimize_tasks_order' => 'setOptimizeTasksOrder',
        'optimization_params' => 'setOptimizationParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'proposal_types' => 'getProposalTypes',
        'exclude_carriers' => 'getExcludeCarriers',
        'excluded_vehicle_types' => 'getExcludedVehicleTypes',
        'earliest_pickup_start_time' => 'getEarliestPickupStartTime',
        'latest_pickup_end_time' => 'getLatestPickupEndTime',
        'earliest_dropoff_start_time' => 'getEarliestDropoffStartTime',
        'latest_dropoff_end_time' => 'getLatestDropoffEndTime',
        'optimize_tasks_order' => 'getOptimizeTasksOrder',
        'optimization_params' => 'getOptimizationParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROPOSAL_TYPES_GREEN = 'Green';
    public const PROPOSAL_TYPES_FLEXIBLE = 'flexible';
    public const PROPOSAL_TYPES_STORE_PICKUP = 'storePickup';
    public const PROPOSAL_TYPES_OWN_FLEET = 'ownFleet';
    public const PROPOSAL_TYPES_COLLECTION_POINT = 'CollectionPoint';
    public const EXCLUDE_CARRIERS_STUART = 'Stuart';
    public const EXCLUDE_CARRIERS_GOPHR = 'Gophr';
    public const EXCLUDE_CARRIERS_PACKFLEET = 'Packfleet';
    public const EXCLUDE_CARRIERS_PEDIVAN = 'Pedivan';
    public const EXCLUDE_CARRIERS_PEDIVAN_FBX = 'PedivanFBX';
    public const EXCLUDE_CARRIERS_PEDIVAN_SAGE = 'PedivanSage';
    public const EXCLUDE_CARRIERS_PEDIVAN_OVERNIGHT = 'PedivanOvernight';
    public const EXCLUDE_CARRIERS_BRISQQ = 'Brisqq';
    public const EXCLUDE_CARRIERS_FINMILE = 'Finmile';
    public const EXCLUDE_CARRIERS_FINMILE_GREEN_ELF = 'FinmileGreenElf';
    public const EXCLUDE_CARRIERS_UBER = 'Uber';
    public const EXCLUDE_CARRIERS_DPD = 'DPD';
    public const EXCLUDE_CARRIERS_SPEED_COURIERS = 'SpeedCouriers';
    public const EXCLUDE_CARRIERS_EVERMILE_MANUAL = 'EvermileManual';
    public const EXCLUDE_CARRIERS_EVERMILE_FLICK_FIRST = 'EvermileFlickFirst';
    public const EXCLUDE_CARRIERS_EVERMILE_GO_PANDA = 'EvermileGoPanda';
    public const EXCLUDE_CARRIERS_EVERMILE_VANUSE = 'EvermileVanuse';
    public const EXCLUDE_CARRIERS_APC = 'APC';
    public const EXCLUDE_CARRIERS_UPS = 'UPS';
    public const EXCLUDE_CARRIERS_DHL = 'DHL';
    public const EXCLUDE_CARRIERS_EVERMILE_OWN_FLEET = 'EvermileOwnFleet';
    public const EXCLUDE_CARRIERS_GO_PANDA = 'GoPanda';
    public const EXCLUDED_VEHICLE_TYPES_PUSHBIKE = 'pushbike';
    public const EXCLUDED_VEHICLE_TYPES_MOTORBIKE = 'motorbike';
    public const EXCLUDED_VEHICLE_TYPES_CARGO_BIKE = 'cargo_bike';
    public const EXCLUDED_VEHICLE_TYPES_CAR = 'car';
    public const EXCLUDED_VEHICLE_TYPES_SMALL_VAN = 'small_van';
    public const EXCLUDED_VEHICLE_TYPES_MEDIUM_VAN = 'medium_van';
    public const EXCLUDED_VEHICLE_TYPES_LARGE_VAN = 'large_van';
    public const EXCLUDED_VEHICLE_TYPES_XLARGE_VAN = 'xlarge_van';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProposalTypesAllowableValues()
    {
        return [
            self::PROPOSAL_TYPES_GREEN,
            self::PROPOSAL_TYPES_FLEXIBLE,
            self::PROPOSAL_TYPES_STORE_PICKUP,
            self::PROPOSAL_TYPES_OWN_FLEET,
            self::PROPOSAL_TYPES_COLLECTION_POINT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcludeCarriersAllowableValues()
    {
        return [
            self::EXCLUDE_CARRIERS_STUART,
            self::EXCLUDE_CARRIERS_GOPHR,
            self::EXCLUDE_CARRIERS_PACKFLEET,
            self::EXCLUDE_CARRIERS_PEDIVAN,
            self::EXCLUDE_CARRIERS_PEDIVAN_FBX,
            self::EXCLUDE_CARRIERS_PEDIVAN_SAGE,
            self::EXCLUDE_CARRIERS_PEDIVAN_OVERNIGHT,
            self::EXCLUDE_CARRIERS_BRISQQ,
            self::EXCLUDE_CARRIERS_FINMILE,
            self::EXCLUDE_CARRIERS_FINMILE_GREEN_ELF,
            self::EXCLUDE_CARRIERS_UBER,
            self::EXCLUDE_CARRIERS_DPD,
            self::EXCLUDE_CARRIERS_SPEED_COURIERS,
            self::EXCLUDE_CARRIERS_EVERMILE_MANUAL,
            self::EXCLUDE_CARRIERS_EVERMILE_FLICK_FIRST,
            self::EXCLUDE_CARRIERS_EVERMILE_GO_PANDA,
            self::EXCLUDE_CARRIERS_EVERMILE_VANUSE,
            self::EXCLUDE_CARRIERS_APC,
            self::EXCLUDE_CARRIERS_UPS,
            self::EXCLUDE_CARRIERS_DHL,
            self::EXCLUDE_CARRIERS_EVERMILE_OWN_FLEET,
            self::EXCLUDE_CARRIERS_GO_PANDA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcludedVehicleTypesAllowableValues()
    {
        return [
            self::EXCLUDED_VEHICLE_TYPES_PUSHBIKE,
            self::EXCLUDED_VEHICLE_TYPES_MOTORBIKE,
            self::EXCLUDED_VEHICLE_TYPES_CARGO_BIKE,
            self::EXCLUDED_VEHICLE_TYPES_CAR,
            self::EXCLUDED_VEHICLE_TYPES_SMALL_VAN,
            self::EXCLUDED_VEHICLE_TYPES_MEDIUM_VAN,
            self::EXCLUDED_VEHICLE_TYPES_LARGE_VAN,
            self::EXCLUDED_VEHICLE_TYPES_XLARGE_VAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('proposal_types', $data ?? [], null);
        $this->setIfExists('exclude_carriers', $data ?? [], null);
        $this->setIfExists('excluded_vehicle_types', $data ?? [], null);
        $this->setIfExists('earliest_pickup_start_time', $data ?? [], null);
        $this->setIfExists('latest_pickup_end_time', $data ?? [], null);
        $this->setIfExists('earliest_dropoff_start_time', $data ?? [], null);
        $this->setIfExists('latest_dropoff_end_time', $data ?? [], null);
        $this->setIfExists('optimize_tasks_order', $data ?? [], true);
        $this->setIfExists('optimization_params', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['proposal_types']) && (count($this->container['proposal_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'proposal_types', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['excluded_vehicle_types']) && (count($this->container['excluded_vehicle_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'excluded_vehicle_types', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets proposal_types
     *
     * @return string[]|null
     */
    public function getProposalTypes()
    {
        return $this->container['proposal_types'];
    }

    /**
     * Sets proposal_types
     *
     * @param string[]|null $proposal_types proposal_types
     *
     * @return self
     */
    public function setProposalTypes($proposal_types)
    {
        if (is_null($proposal_types)) {
            throw new \InvalidArgumentException('non-nullable proposal_types cannot be null');
        }
        $allowedValues = $this->getProposalTypesAllowableValues();
        if (array_diff($proposal_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'proposal_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        if ((count($proposal_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $proposal_types when calling QuoteMultiRoutePostRequestParams., number of items must be greater than or equal to 1.');
        }
        $this->container['proposal_types'] = $proposal_types;

        return $this;
    }

    /**
     * Gets exclude_carriers
     *
     * @return string[]|null
     */
    public function getExcludeCarriers()
    {
        return $this->container['exclude_carriers'];
    }

    /**
     * Sets exclude_carriers
     *
     * @param string[]|null $exclude_carriers An array of carriers names to exclude from the proposals results
     *
     * @return self
     */
    public function setExcludeCarriers($exclude_carriers)
    {
        if (is_null($exclude_carriers)) {
            throw new \InvalidArgumentException('non-nullable exclude_carriers cannot be null');
        }
        $allowedValues = $this->getExcludeCarriersAllowableValues();
        if (array_diff($exclude_carriers, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exclude_carriers', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exclude_carriers'] = $exclude_carriers;

        return $this;
    }

    /**
     * Gets excluded_vehicle_types
     *
     * @return string[]|null
     */
    public function getExcludedVehicleTypes()
    {
        return $this->container['excluded_vehicle_types'];
    }

    /**
     * Sets excluded_vehicle_types
     *
     * @param string[]|null $excluded_vehicle_types Which vehicle types to exclude from the request. **note** excluding vehicle types may result in higher prices.
     *
     * @return self
     */
    public function setExcludedVehicleTypes($excluded_vehicle_types)
    {
        if (is_null($excluded_vehicle_types)) {
            throw new \InvalidArgumentException('non-nullable excluded_vehicle_types cannot be null');
        }
        $allowedValues = $this->getExcludedVehicleTypesAllowableValues();
        if (array_diff($excluded_vehicle_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'excluded_vehicle_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        if ((count($excluded_vehicle_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $excluded_vehicle_types when calling QuoteMultiRoutePostRequestParams., number of items must be greater than or equal to 1.');
        }
        $this->container['excluded_vehicle_types'] = $excluded_vehicle_types;

        return $this;
    }

    /**
     * Gets earliest_pickup_start_time
     *
     * @return \DateTime|null
     */
    public function getEarliestPickupStartTime()
    {
        return $this->container['earliest_pickup_start_time'];
    }

    /**
     * Sets earliest_pickup_start_time
     *
     * @param \DateTime|null $earliest_pickup_start_time The earliest pickup start time in ISO8601 format. **note** Set either a pickup or a dropoff window. Not both.
     *
     * @return self
     */
    public function setEarliestPickupStartTime($earliest_pickup_start_time)
    {
        if (is_null($earliest_pickup_start_time)) {
            throw new \InvalidArgumentException('non-nullable earliest_pickup_start_time cannot be null');
        }
        $this->container['earliest_pickup_start_time'] = $earliest_pickup_start_time;

        return $this;
    }

    /**
     * Gets latest_pickup_end_time
     *
     * @return \DateTime|null
     */
    public function getLatestPickupEndTime()
    {
        return $this->container['latest_pickup_end_time'];
    }

    /**
     * Sets latest_pickup_end_time
     *
     * @param \DateTime|null $latest_pickup_end_time The latest pickup end time in ISO8601 format. **note** Set either a pickup or a dropoff window. Not both.
     *
     * @return self
     */
    public function setLatestPickupEndTime($latest_pickup_end_time)
    {
        if (is_null($latest_pickup_end_time)) {
            throw new \InvalidArgumentException('non-nullable latest_pickup_end_time cannot be null');
        }
        $this->container['latest_pickup_end_time'] = $latest_pickup_end_time;

        return $this;
    }

    /**
     * Gets earliest_dropoff_start_time
     *
     * @return \DateTime|null
     */
    public function getEarliestDropoffStartTime()
    {
        return $this->container['earliest_dropoff_start_time'];
    }

    /**
     * Sets earliest_dropoff_start_time
     *
     * @param \DateTime|null $earliest_dropoff_start_time The earliest dropoff start time in ISO8601 format. **note** Set either a pickup or a dropoff window. Not both.
     *
     * @return self
     */
    public function setEarliestDropoffStartTime($earliest_dropoff_start_time)
    {
        if (is_null($earliest_dropoff_start_time)) {
            throw new \InvalidArgumentException('non-nullable earliest_dropoff_start_time cannot be null');
        }
        $this->container['earliest_dropoff_start_time'] = $earliest_dropoff_start_time;

        return $this;
    }

    /**
     * Gets latest_dropoff_end_time
     *
     * @return \DateTime|null
     */
    public function getLatestDropoffEndTime()
    {
        return $this->container['latest_dropoff_end_time'];
    }

    /**
     * Sets latest_dropoff_end_time
     *
     * @param \DateTime|null $latest_dropoff_end_time The latest dropoff end time in ISO8601 format. **note** Set either a pickup or a dropoff window. Not both.
     *
     * @return self
     */
    public function setLatestDropoffEndTime($latest_dropoff_end_time)
    {
        if (is_null($latest_dropoff_end_time)) {
            throw new \InvalidArgumentException('non-nullable latest_dropoff_end_time cannot be null');
        }
        $this->container['latest_dropoff_end_time'] = $latest_dropoff_end_time;

        return $this;
    }

    /**
     * Gets optimize_tasks_order
     *
     * @return bool|null
     */
    public function getOptimizeTasksOrder()
    {
        return $this->container['optimize_tasks_order'];
    }

    /**
     * Sets optimize_tasks_order
     *
     * @param bool|null $optimize_tasks_order Whether to optimize the order of the tasks. **note** Not optimizing the tasks order (setting to false) may result in higher prices.
     *
     * @return self
     */
    public function setOptimizeTasksOrder($optimize_tasks_order)
    {
        if (is_null($optimize_tasks_order)) {
            throw new \InvalidArgumentException('non-nullable optimize_tasks_order cannot be null');
        }
        $this->container['optimize_tasks_order'] = $optimize_tasks_order;

        return $this;
    }

    /**
     * Gets optimization_params
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePostRequestParamsOptimizationParamsInner[]|null
     */
    public function getOptimizationParams()
    {
        return $this->container['optimization_params'];
    }

    /**
     * Sets optimization_params
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePostRequestParamsOptimizationParamsInner[]|null $optimization_params List of optimization parameters per carrier
     *
     * @return self
     */
    public function setOptimizationParams($optimization_params)
    {
        if (is_null($optimization_params)) {
            throw new \InvalidArgumentException('non-nullable optimization_params cannot be null');
        }
        $this->container['optimization_params'] = $optimization_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


