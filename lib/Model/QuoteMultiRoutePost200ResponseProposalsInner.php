<?php
/**
 * QuoteMultiRoutePost200ResponseProposalsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuoteMultiRoutePost200ResponseProposalsInner Class Doc Comment
 *
 * @category Class
 * @description The data for a single route proposal (response for a multi route quote request)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuoteMultiRoutePost200ResponseProposalsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_multiRoute_post_200_response_proposals_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'price' => '\OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPrice',
        'price_vat' => '\OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPriceVat',
        'price_per_drop' => '\OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPricePerDrop',
        'credit_back' => 'int',
        'predicted_emission_saving_kg' => 'float',
        'routes' => '\OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInner[]',
        'optimized_tasks_order' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'price' => null,
        'price_vat' => null,
        'price_per_drop' => null,
        'credit_back' => 'int64',
        'predicted_emission_saving_kg' => 'float',
        'routes' => null,
        'optimized_tasks_order' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'price' => false,
        'price_vat' => false,
        'price_per_drop' => false,
        'credit_back' => false,
        'predicted_emission_saving_kg' => false,
        'routes' => false,
        'optimized_tasks_order' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'price' => 'price',
        'price_vat' => 'priceVat',
        'price_per_drop' => 'pricePerDrop',
        'credit_back' => 'creditBack',
        'predicted_emission_saving_kg' => 'predictedEmissionSavingKg',
        'routes' => 'routes',
        'optimized_tasks_order' => 'optimizedTasksOrder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'price' => 'setPrice',
        'price_vat' => 'setPriceVat',
        'price_per_drop' => 'setPricePerDrop',
        'credit_back' => 'setCreditBack',
        'predicted_emission_saving_kg' => 'setPredictedEmissionSavingKg',
        'routes' => 'setRoutes',
        'optimized_tasks_order' => 'setOptimizedTasksOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'price' => 'getPrice',
        'price_vat' => 'getPriceVat',
        'price_per_drop' => 'getPricePerDrop',
        'credit_back' => 'getCreditBack',
        'predicted_emission_saving_kg' => 'getPredictedEmissionSavingKg',
        'routes' => 'getRoutes',
        'optimized_tasks_order' => 'getOptimizedTasksOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_vat', $data ?? [], null);
        $this->setIfExists('price_per_drop', $data ?? [], null);
        $this->setIfExists('credit_back', $data ?? [], null);
        $this->setIfExists('predicted_emission_saving_kg', $data ?? [], null);
        $this->setIfExists('routes', $data ?? [], null);
        $this->setIfExists('optimized_tasks_order', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['price_vat'] === null) {
            $invalidProperties[] = "'price_vat' can't be null";
        }
        if ($this->container['price_per_drop'] === null) {
            $invalidProperties[] = "'price_per_drop' can't be null";
        }
        if ($this->container['routes'] === null) {
            $invalidProperties[] = "'routes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The proposal ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPrice
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPrice $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_vat
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPriceVat
     */
    public function getPriceVat()
    {
        return $this->container['price_vat'];
    }

    /**
     * Sets price_vat
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPriceVat $price_vat price_vat
     *
     * @return self
     */
    public function setPriceVat($price_vat)
    {
        if (is_null($price_vat)) {
            throw new \InvalidArgumentException('non-nullable price_vat cannot be null');
        }
        $this->container['price_vat'] = $price_vat;

        return $this;
    }

    /**
     * Gets price_per_drop
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPricePerDrop
     */
    public function getPricePerDrop()
    {
        return $this->container['price_per_drop'];
    }

    /**
     * Sets price_per_drop
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerPricePerDrop $price_per_drop price_per_drop
     *
     * @return self
     */
    public function setPricePerDrop($price_per_drop)
    {
        if (is_null($price_per_drop)) {
            throw new \InvalidArgumentException('non-nullable price_per_drop cannot be null');
        }
        $this->container['price_per_drop'] = $price_per_drop;

        return $this;
    }

    /**
     * Gets credit_back
     *
     * @return int|null
     */
    public function getCreditBack()
    {
        return $this->container['credit_back'];
    }

    /**
     * Sets credit_back
     *
     * @param int|null $credit_back The amount of credits this proposal awards, in credit cents
     *
     * @return self
     */
    public function setCreditBack($credit_back)
    {
        if (is_null($credit_back)) {
            throw new \InvalidArgumentException('non-nullable credit_back cannot be null');
        }
        $this->container['credit_back'] = $credit_back;

        return $this;
    }

    /**
     * Gets predicted_emission_saving_kg
     *
     * @return float|null
     */
    public function getPredictedEmissionSavingKg()
    {
        return $this->container['predicted_emission_saving_kg'];
    }

    /**
     * Sets predicted_emission_saving_kg
     *
     * @param float|null $predicted_emission_saving_kg The total predicted emission saving for this proposal
     *
     * @return self
     */
    public function setPredictedEmissionSavingKg($predicted_emission_saving_kg)
    {
        if (is_null($predicted_emission_saving_kg)) {
            throw new \InvalidArgumentException('non-nullable predicted_emission_saving_kg cannot be null');
        }
        $this->container['predicted_emission_saving_kg'] = $predicted_emission_saving_kg;

        return $this;
    }

    /**
     * Gets routes
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInner[]
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInner[] $routes An array of routes for this proposal
     *
     * @return self
     */
    public function setRoutes($routes)
    {
        if (is_null($routes)) {
            throw new \InvalidArgumentException('non-nullable routes cannot be null');
        }
        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets optimized_tasks_order
     *
     * @return bool|null
     */
    public function getOptimizedTasksOrder()
    {
        return $this->container['optimized_tasks_order'];
    }

    /**
     * Sets optimized_tasks_order
     *
     * @param bool|null $optimized_tasks_order Whether the order of the tasks is optimized
     *
     * @return self
     */
    public function setOptimizedTasksOrder($optimized_tasks_order)
    {
        if (is_null($optimized_tasks_order)) {
            throw new \InvalidArgumentException('non-nullable optimized_tasks_order cannot be null');
        }
        $this->container['optimized_tasks_order'] = $optimized_tasks_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


