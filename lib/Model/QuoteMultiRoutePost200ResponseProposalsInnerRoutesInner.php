<?php
/**
 * QuoteMultiRoutePost200ResponseProposalsInnerRoutesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuoteMultiRoutePost200ResponseProposalsInnerRoutesInner Class Doc Comment
 *
 * @category Class
 * @description The data for a single route (response for a multi route quote request)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuoteMultiRoutePost200ResponseProposalsInnerRoutesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_multiRoute_post_200_response_proposals_inner_routes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'pickup_tasks' => '\OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInnerPickupTasksInner[]',
        'dropoff_tasks' => '\OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInnerPickupTasksInner[]',
        'delivery_company' => 'string',
        'types' => 'string[]',
        'predicted_emission_saving_kg' => 'float',
        'vehicle_type' => 'string',
        'price' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'price_vat' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'pickup_tasks' => null,
        'dropoff_tasks' => null,
        'delivery_company' => null,
        'types' => null,
        'predicted_emission_saving_kg' => 'float',
        'vehicle_type' => null,
        'price' => null,
        'price_vat' => null,
        'external_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'pickup_tasks' => false,
        'dropoff_tasks' => false,
        'delivery_company' => false,
        'types' => false,
        'predicted_emission_saving_kg' => false,
        'vehicle_type' => false,
        'price' => false,
        'price_vat' => false,
        'external_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pickup_tasks' => 'pickupTasks',
        'dropoff_tasks' => 'dropoffTasks',
        'delivery_company' => 'deliveryCompany',
        'types' => 'types',
        'predicted_emission_saving_kg' => 'predictedEmissionSavingKg',
        'vehicle_type' => 'vehicleType',
        'price' => 'price',
        'price_vat' => 'priceVat',
        'external_id' => 'externalId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pickup_tasks' => 'setPickupTasks',
        'dropoff_tasks' => 'setDropoffTasks',
        'delivery_company' => 'setDeliveryCompany',
        'types' => 'setTypes',
        'predicted_emission_saving_kg' => 'setPredictedEmissionSavingKg',
        'vehicle_type' => 'setVehicleType',
        'price' => 'setPrice',
        'price_vat' => 'setPriceVat',
        'external_id' => 'setExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pickup_tasks' => 'getPickupTasks',
        'dropoff_tasks' => 'getDropoffTasks',
        'delivery_company' => 'getDeliveryCompany',
        'types' => 'getTypes',
        'predicted_emission_saving_kg' => 'getPredictedEmissionSavingKg',
        'vehicle_type' => 'getVehicleType',
        'price' => 'getPrice',
        'price_vat' => 'getPriceVat',
        'external_id' => 'getExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPES_GREEN = 'Green';
    public const TYPES_FLEXIBLE = 'flexible';
    public const TYPES_STORE_PICKUP = 'storePickup';
    public const TYPES_OWN_FLEET = 'ownFleet';
    public const TYPES_COLLECTION_POINT = 'CollectionPoint';
    public const VEHICLE_TYPE_PUSHBIKE = 'pushbike';
    public const VEHICLE_TYPE_MOTORBIKE = 'motorbike';
    public const VEHICLE_TYPE_CARGO_BIKE = 'cargo_bike';
    public const VEHICLE_TYPE_CAR = 'car';
    public const VEHICLE_TYPE_SMALL_VAN = 'small_van';
    public const VEHICLE_TYPE_MEDIUM_VAN = 'medium_van';
    public const VEHICLE_TYPE_LARGE_VAN = 'large_van';
    public const VEHICLE_TYPE_XLARGE_VAN = 'xlarge_van';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypesAllowableValues()
    {
        return [
            self::TYPES_GREEN,
            self::TYPES_FLEXIBLE,
            self::TYPES_STORE_PICKUP,
            self::TYPES_OWN_FLEET,
            self::TYPES_COLLECTION_POINT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVehicleTypeAllowableValues()
    {
        return [
            self::VEHICLE_TYPE_PUSHBIKE,
            self::VEHICLE_TYPE_MOTORBIKE,
            self::VEHICLE_TYPE_CARGO_BIKE,
            self::VEHICLE_TYPE_CAR,
            self::VEHICLE_TYPE_SMALL_VAN,
            self::VEHICLE_TYPE_MEDIUM_VAN,
            self::VEHICLE_TYPE_LARGE_VAN,
            self::VEHICLE_TYPE_XLARGE_VAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('pickup_tasks', $data ?? [], null);
        $this->setIfExists('dropoff_tasks', $data ?? [], null);
        $this->setIfExists('delivery_company', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('predicted_emission_saving_kg', $data ?? [], null);
        $this->setIfExists('vehicle_type', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_vat', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['pickup_tasks'] === null) {
            $invalidProperties[] = "'pickup_tasks' can't be null";
        }
        if ($this->container['dropoff_tasks'] === null) {
            $invalidProperties[] = "'dropoff_tasks' can't be null";
        }
        if ($this->container['vehicle_type'] === null) {
            $invalidProperties[] = "'vehicle_type' can't be null";
        }
        $allowedValues = $this->getVehicleTypeAllowableValues();
        if (!is_null($this->container['vehicle_type']) && !in_array($this->container['vehicle_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vehicle_type', must be one of '%s'",
                $this->container['vehicle_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['price_vat'] === null) {
            $invalidProperties[] = "'price_vat' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The route ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pickup_tasks
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInnerPickupTasksInner[]
     */
    public function getPickupTasks()
    {
        return $this->container['pickup_tasks'];
    }

    /**
     * Sets pickup_tasks
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInnerPickupTasksInner[] $pickup_tasks A list of locations to which the items will be delivered.
     *
     * @return self
     */
    public function setPickupTasks($pickup_tasks)
    {
        if (is_null($pickup_tasks)) {
            throw new \InvalidArgumentException('non-nullable pickup_tasks cannot be null');
        }
        $this->container['pickup_tasks'] = $pickup_tasks;

        return $this;
    }

    /**
     * Gets dropoff_tasks
     *
     * @return \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInnerPickupTasksInner[]
     */
    public function getDropoffTasks()
    {
        return $this->container['dropoff_tasks'];
    }

    /**
     * Sets dropoff_tasks
     *
     * @param \OpenAPI\Client\Model\QuoteMultiRoutePost200ResponseProposalsInnerRoutesInnerPickupTasksInner[] $dropoff_tasks A list of locations to which the items will be delivered.
     *
     * @return self
     */
    public function setDropoffTasks($dropoff_tasks)
    {
        if (is_null($dropoff_tasks)) {
            throw new \InvalidArgumentException('non-nullable dropoff_tasks cannot be null');
        }
        $this->container['dropoff_tasks'] = $dropoff_tasks;

        return $this;
    }

    /**
     * Gets delivery_company
     *
     * @return string|null
     */
    public function getDeliveryCompany()
    {
        return $this->container['delivery_company'];
    }

    /**
     * Sets delivery_company
     *
     * @param string|null $delivery_company The company that will perform the delivery (if known)
     *
     * @return self
     */
    public function setDeliveryCompany($delivery_company)
    {
        if (is_null($delivery_company)) {
            throw new \InvalidArgumentException('non-nullable delivery_company cannot be null');
        }
        $this->container['delivery_company'] = $delivery_company;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types types
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }
        $allowedValues = $this->getTypesAllowableValues();
        if (array_diff($types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets predicted_emission_saving_kg
     *
     * @return float|null
     */
    public function getPredictedEmissionSavingKg()
    {
        return $this->container['predicted_emission_saving_kg'];
    }

    /**
     * Sets predicted_emission_saving_kg
     *
     * @param float|null $predicted_emission_saving_kg predicted_emission_saving_kg
     *
     * @return self
     */
    public function setPredictedEmissionSavingKg($predicted_emission_saving_kg)
    {
        if (is_null($predicted_emission_saving_kg)) {
            throw new \InvalidArgumentException('non-nullable predicted_emission_saving_kg cannot be null');
        }
        $this->container['predicted_emission_saving_kg'] = $predicted_emission_saving_kg;

        return $this;
    }

    /**
     * Gets vehicle_type
     *
     * @return string
     */
    public function getVehicleType()
    {
        return $this->container['vehicle_type'];
    }

    /**
     * Sets vehicle_type
     *
     * @param string $vehicle_type vehicle_type
     *
     * @return self
     */
    public function setVehicleType($vehicle_type)
    {
        if (is_null($vehicle_type)) {
            throw new \InvalidArgumentException('non-nullable vehicle_type cannot be null');
        }
        $allowedValues = $this->getVehicleTypeAllowableValues();
        if (!in_array($vehicle_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vehicle_type', must be one of '%s'",
                    $vehicle_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vehicle_type'] = $vehicle_type;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_vat
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue
     */
    public function getPriceVat()
    {
        return $this->container['price_vat'];
    }

    /**
     * Sets price_vat
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue $price_vat price_vat
     *
     * @return self
     */
    public function setPriceVat($price_vat)
    {
        if (is_null($price_vat)) {
            throw new \InvalidArgumentException('non-nullable price_vat cannot be null');
        }
        $this->container['price_vat'] = $price_vat;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The external route ID
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


