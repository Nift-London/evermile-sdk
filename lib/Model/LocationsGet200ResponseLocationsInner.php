<?php
/**
 * LocationsGet200ResponseLocationsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocationsGet200ResponseLocationsInner Class Doc Comment
 *
 * @category Class
 * @description A location with an ID property
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocationsGet200ResponseLocationsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_locations_get_200_response_locations_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'merchant_id' => 'string',
        'name' => 'string',
        'address' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress',
        'phone' => 'string',
        'email' => 'string',
        'notes' => 'string',
        'is_default' => 'bool',
        'is_store_pickup_default' => 'bool',
        'store_id' => 'string',
        'schedule' => '\OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfSchedule',
        'delivery_enabled' => 'bool',
        'store_pickup_enabled' => 'bool',
        'delivery_config' => '\OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfDeliveryConfig',
        'store_pickup_config' => '\OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfDeliveryConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'merchant_id' => 'uuid',
        'name' => null,
        'address' => null,
        'phone' => null,
        'email' => null,
        'notes' => null,
        'is_default' => null,
        'is_store_pickup_default' => null,
        'store_id' => 'uuid',
        'schedule' => null,
        'delivery_enabled' => null,
        'store_pickup_enabled' => null,
        'delivery_config' => null,
        'store_pickup_config' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'merchant_id' => false,
        'name' => false,
        'address' => false,
        'phone' => false,
        'email' => false,
        'notes' => false,
        'is_default' => false,
        'is_store_pickup_default' => false,
        'store_id' => false,
        'schedule' => false,
        'delivery_enabled' => false,
        'store_pickup_enabled' => false,
        'delivery_config' => false,
        'store_pickup_config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantId',
        'name' => 'name',
        'address' => 'address',
        'phone' => 'phone',
        'email' => 'email',
        'notes' => 'notes',
        'is_default' => 'isDefault',
        'is_store_pickup_default' => 'isStorePickupDefault',
        'store_id' => 'storeId',
        'schedule' => 'schedule',
        'delivery_enabled' => 'deliveryEnabled',
        'store_pickup_enabled' => 'storePickupEnabled',
        'delivery_config' => 'deliveryConfig',
        'store_pickup_config' => 'storePickupConfig'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'address' => 'setAddress',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'notes' => 'setNotes',
        'is_default' => 'setIsDefault',
        'is_store_pickup_default' => 'setIsStorePickupDefault',
        'store_id' => 'setStoreId',
        'schedule' => 'setSchedule',
        'delivery_enabled' => 'setDeliveryEnabled',
        'store_pickup_enabled' => 'setStorePickupEnabled',
        'delivery_config' => 'setDeliveryConfig',
        'store_pickup_config' => 'setStorePickupConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'address' => 'getAddress',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'notes' => 'getNotes',
        'is_default' => 'getIsDefault',
        'is_store_pickup_default' => 'getIsStorePickupDefault',
        'store_id' => 'getStoreId',
        'schedule' => 'getSchedule',
        'delivery_enabled' => 'getDeliveryEnabled',
        'store_pickup_enabled' => 'getStorePickupEnabled',
        'delivery_config' => 'getDeliveryConfig',
        'store_pickup_config' => 'getStorePickupConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('is_store_pickup_default', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('delivery_enabled', $data ?? [], null);
        $this->setIfExists('store_pickup_enabled', $data ?? [], null);
        $this->setIfExists('delivery_config', $data ?? [], null);
        $this->setIfExists('store_pickup_config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The location's evermile ID. Used for updating a location (if provided)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id The customer ID to which this location belongs
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name An informative name for this location
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone A phone number for this location (relevant when location is used as sender_info)
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email An email of the contact person for this location (relevant when location is used as sender_info)
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Additional notes to describe this location
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default True if this is the default location
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_store_pickup_default
     *
     * @return bool|null
     */
    public function getIsStorePickupDefault()
    {
        return $this->container['is_store_pickup_default'];
    }

    /**
     * Sets is_store_pickup_default
     *
     * @param bool|null $is_store_pickup_default True if this is the default store pickup location
     *
     * @return self
     */
    public function setIsStorePickupDefault($is_store_pickup_default)
    {
        if (is_null($is_store_pickup_default)) {
            throw new \InvalidArgumentException('non-nullable is_store_pickup_default cannot be null');
        }
        $this->container['is_store_pickup_default'] = $is_store_pickup_default;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id A store ID associated with this location
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfSchedule|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfSchedule|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets delivery_enabled
     *
     * @return bool|null
     */
    public function getDeliveryEnabled()
    {
        return $this->container['delivery_enabled'];
    }

    /**
     * Sets delivery_enabled
     *
     * @param bool|null $delivery_enabled Whether this location is enabled for deliveries
     *
     * @return self
     */
    public function setDeliveryEnabled($delivery_enabled)
    {
        if (is_null($delivery_enabled)) {
            throw new \InvalidArgumentException('non-nullable delivery_enabled cannot be null');
        }
        $this->container['delivery_enabled'] = $delivery_enabled;

        return $this;
    }

    /**
     * Gets store_pickup_enabled
     *
     * @return bool|null
     */
    public function getStorePickupEnabled()
    {
        return $this->container['store_pickup_enabled'];
    }

    /**
     * Sets store_pickup_enabled
     *
     * @param bool|null $store_pickup_enabled Whether this location is enabled for store pickups
     *
     * @return self
     */
    public function setStorePickupEnabled($store_pickup_enabled)
    {
        if (is_null($store_pickup_enabled)) {
            throw new \InvalidArgumentException('non-nullable store_pickup_enabled cannot be null');
        }
        $this->container['store_pickup_enabled'] = $store_pickup_enabled;

        return $this;
    }

    /**
     * Gets delivery_config
     *
     * @return \OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfDeliveryConfig|null
     */
    public function getDeliveryConfig()
    {
        return $this->container['delivery_config'];
    }

    /**
     * Sets delivery_config
     *
     * @param \OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfDeliveryConfig|null $delivery_config delivery_config
     *
     * @return self
     */
    public function setDeliveryConfig($delivery_config)
    {
        if (is_null($delivery_config)) {
            throw new \InvalidArgumentException('non-nullable delivery_config cannot be null');
        }
        $this->container['delivery_config'] = $delivery_config;

        return $this;
    }

    /**
     * Gets store_pickup_config
     *
     * @return \OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfDeliveryConfig|null
     */
    public function getStorePickupConfig()
    {
        return $this->container['store_pickup_config'];
    }

    /**
     * Sets store_pickup_config
     *
     * @param \OpenAPI\Client\Model\LocationsGet200ResponseLocationsInnerAllOfDeliveryConfig|null $store_pickup_config store_pickup_config
     *
     * @return self
     */
    public function setStorePickupConfig($store_pickup_config)
    {
        if (is_null($store_pickup_config)) {
            throw new \InvalidArgumentException('non-nullable store_pickup_config cannot be null');
        }
        $this->container['store_pickup_config'] = $store_pickup_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


