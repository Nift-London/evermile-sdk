<?php
/**
 * OrdersPaginatedHistoryGet200ResponseResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrdersPaginatedHistoryGet200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @description An order item
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrdersPaginatedHistoryGet200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_orders_paginatedHistory_get_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'pickup_window' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerPickupWindow',
        'carrier' => 'string',
        'status' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerStatus',
        'creation_time' => '\DateTime',
        'updated_time' => '\DateTime',
        'label_print_time' => '\DateTime',
        'dropoff_address' => 'string',
        'dropoff_geo_location' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerDropoffGeoLocation',
        'dropoff_window' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerPickupWindow',
        'estimated_arrival_time' => '\DateTime',
        'customer' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer',
        'notes' => 'string',
        'aggregation_id' => 'string',
        'parcels_count' => 'int',
        'external_order_id' => 'string',
        'store_id' => 'string',
        'order_tracking_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo',
        'handoff_type' => 'string',
        'handoff_info' => '\OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo',
        'used_credits' => 'bool',
        'label_required' => 'bool',
        'proof_of_collection' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]',
        'proof_of_delivery' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]',
        'username' => 'string',
        'expected_vehicle_type' => 'string',
        'delivery_method' => 'string',
        'origin' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress',
        'pickup_contact_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer',
        'sender_contact_details' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails',
        'is_gift' => 'bool',
        'route_order_index' => 'int',
        'route_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerRouteInfo',
        'schedule_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerScheduleInfo',
        'extra_external_ids' => 'string[]',
        'is_return' => 'bool',
        'simulated_order' => 'bool',
        'value' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'edit_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerEditInfo',
        'is_nationwide' => 'bool',
        'carrier_delivery_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'pickup_window' => null,
        'carrier' => null,
        'status' => null,
        'creation_time' => 'date-time',
        'updated_time' => 'date-time',
        'label_print_time' => 'date-time',
        'dropoff_address' => null,
        'dropoff_geo_location' => null,
        'dropoff_window' => null,
        'estimated_arrival_time' => 'date-time',
        'customer' => null,
        'notes' => null,
        'aggregation_id' => 'uuid',
        'parcels_count' => 'int32',
        'external_order_id' => null,
        'store_id' => 'uuid',
        'order_tracking_info' => null,
        'handoff_type' => null,
        'handoff_info' => null,
        'used_credits' => null,
        'label_required' => null,
        'proof_of_collection' => null,
        'proof_of_delivery' => null,
        'username' => null,
        'expected_vehicle_type' => null,
        'delivery_method' => null,
        'origin' => null,
        'pickup_contact_info' => null,
        'sender_contact_details' => null,
        'is_gift' => null,
        'route_order_index' => null,
        'route_info' => null,
        'schedule_info' => null,
        'extra_external_ids' => null,
        'is_return' => null,
        'simulated_order' => null,
        'value' => null,
        'edit_info' => null,
        'is_nationwide' => null,
        'carrier_delivery_url' => 'url'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'pickup_window' => false,
        'carrier' => false,
        'status' => false,
        'creation_time' => false,
        'updated_time' => false,
        'label_print_time' => false,
        'dropoff_address' => false,
        'dropoff_geo_location' => false,
        'dropoff_window' => false,
        'estimated_arrival_time' => false,
        'customer' => false,
        'notes' => false,
        'aggregation_id' => false,
        'parcels_count' => false,
        'external_order_id' => false,
        'store_id' => false,
        'order_tracking_info' => false,
        'handoff_type' => false,
        'handoff_info' => false,
        'used_credits' => false,
        'label_required' => false,
        'proof_of_collection' => false,
        'proof_of_delivery' => false,
        'username' => false,
        'expected_vehicle_type' => false,
        'delivery_method' => false,
        'origin' => false,
        'pickup_contact_info' => false,
        'sender_contact_details' => false,
        'is_gift' => false,
        'route_order_index' => false,
        'route_info' => false,
        'schedule_info' => false,
        'extra_external_ids' => false,
        'is_return' => false,
        'simulated_order' => false,
        'value' => false,
        'edit_info' => false,
        'is_nationwide' => false,
        'carrier_delivery_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pickup_window' => 'pickupWindow',
        'carrier' => 'carrier',
        'status' => 'status',
        'creation_time' => 'creationTime',
        'updated_time' => 'updatedTime',
        'label_print_time' => 'labelPrintTime',
        'dropoff_address' => 'dropoffAddress',
        'dropoff_geo_location' => 'dropoffGeoLocation',
        'dropoff_window' => 'dropoffWindow',
        'estimated_arrival_time' => 'estimatedArrivalTime',
        'customer' => 'customer',
        'notes' => 'notes',
        'aggregation_id' => 'aggregationId',
        'parcels_count' => 'parcelsCount',
        'external_order_id' => 'externalOrderId',
        'store_id' => 'storeId',
        'order_tracking_info' => 'orderTrackingInfo',
        'handoff_type' => 'handoffType',
        'handoff_info' => 'handoffInfo',
        'used_credits' => 'usedCredits',
        'label_required' => 'labelRequired',
        'proof_of_collection' => 'proofOfCollection',
        'proof_of_delivery' => 'proofOfDelivery',
        'username' => 'username',
        'expected_vehicle_type' => 'expectedVehicleType',
        'delivery_method' => 'deliveryMethod',
        'origin' => 'origin',
        'pickup_contact_info' => 'pickupContactInfo',
        'sender_contact_details' => 'senderContactDetails',
        'is_gift' => 'isGift',
        'route_order_index' => 'routeOrderIndex',
        'route_info' => 'routeInfo',
        'schedule_info' => 'scheduleInfo',
        'extra_external_ids' => 'extraExternalIds',
        'is_return' => 'isReturn',
        'simulated_order' => 'simulatedOrder',
        'value' => 'value',
        'edit_info' => 'editInfo',
        'is_nationwide' => 'isNationwide',
        'carrier_delivery_url' => 'carrierDeliveryUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pickup_window' => 'setPickupWindow',
        'carrier' => 'setCarrier',
        'status' => 'setStatus',
        'creation_time' => 'setCreationTime',
        'updated_time' => 'setUpdatedTime',
        'label_print_time' => 'setLabelPrintTime',
        'dropoff_address' => 'setDropoffAddress',
        'dropoff_geo_location' => 'setDropoffGeoLocation',
        'dropoff_window' => 'setDropoffWindow',
        'estimated_arrival_time' => 'setEstimatedArrivalTime',
        'customer' => 'setCustomer',
        'notes' => 'setNotes',
        'aggregation_id' => 'setAggregationId',
        'parcels_count' => 'setParcelsCount',
        'external_order_id' => 'setExternalOrderId',
        'store_id' => 'setStoreId',
        'order_tracking_info' => 'setOrderTrackingInfo',
        'handoff_type' => 'setHandoffType',
        'handoff_info' => 'setHandoffInfo',
        'used_credits' => 'setUsedCredits',
        'label_required' => 'setLabelRequired',
        'proof_of_collection' => 'setProofOfCollection',
        'proof_of_delivery' => 'setProofOfDelivery',
        'username' => 'setUsername',
        'expected_vehicle_type' => 'setExpectedVehicleType',
        'delivery_method' => 'setDeliveryMethod',
        'origin' => 'setOrigin',
        'pickup_contact_info' => 'setPickupContactInfo',
        'sender_contact_details' => 'setSenderContactDetails',
        'is_gift' => 'setIsGift',
        'route_order_index' => 'setRouteOrderIndex',
        'route_info' => 'setRouteInfo',
        'schedule_info' => 'setScheduleInfo',
        'extra_external_ids' => 'setExtraExternalIds',
        'is_return' => 'setIsReturn',
        'simulated_order' => 'setSimulatedOrder',
        'value' => 'setValue',
        'edit_info' => 'setEditInfo',
        'is_nationwide' => 'setIsNationwide',
        'carrier_delivery_url' => 'setCarrierDeliveryUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pickup_window' => 'getPickupWindow',
        'carrier' => 'getCarrier',
        'status' => 'getStatus',
        'creation_time' => 'getCreationTime',
        'updated_time' => 'getUpdatedTime',
        'label_print_time' => 'getLabelPrintTime',
        'dropoff_address' => 'getDropoffAddress',
        'dropoff_geo_location' => 'getDropoffGeoLocation',
        'dropoff_window' => 'getDropoffWindow',
        'estimated_arrival_time' => 'getEstimatedArrivalTime',
        'customer' => 'getCustomer',
        'notes' => 'getNotes',
        'aggregation_id' => 'getAggregationId',
        'parcels_count' => 'getParcelsCount',
        'external_order_id' => 'getExternalOrderId',
        'store_id' => 'getStoreId',
        'order_tracking_info' => 'getOrderTrackingInfo',
        'handoff_type' => 'getHandoffType',
        'handoff_info' => 'getHandoffInfo',
        'used_credits' => 'getUsedCredits',
        'label_required' => 'getLabelRequired',
        'proof_of_collection' => 'getProofOfCollection',
        'proof_of_delivery' => 'getProofOfDelivery',
        'username' => 'getUsername',
        'expected_vehicle_type' => 'getExpectedVehicleType',
        'delivery_method' => 'getDeliveryMethod',
        'origin' => 'getOrigin',
        'pickup_contact_info' => 'getPickupContactInfo',
        'sender_contact_details' => 'getSenderContactDetails',
        'is_gift' => 'getIsGift',
        'route_order_index' => 'getRouteOrderIndex',
        'route_info' => 'getRouteInfo',
        'schedule_info' => 'getScheduleInfo',
        'extra_external_ids' => 'getExtraExternalIds',
        'is_return' => 'getIsReturn',
        'simulated_order' => 'getSimulatedOrder',
        'value' => 'getValue',
        'edit_info' => 'getEditInfo',
        'is_nationwide' => 'getIsNationwide',
        'carrier_delivery_url' => 'getCarrierDeliveryUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HANDOFF_TYPE_NONE = 'none';
    public const HANDOFF_TYPE_RECEIVE = 'receive';
    public const HANDOFF_TYPE_HANDOFF = 'handoff';
    public const EXPECTED_VEHICLE_TYPE_PUSHBIKE = 'pushbike';
    public const EXPECTED_VEHICLE_TYPE_MOTORBIKE = 'motorbike';
    public const EXPECTED_VEHICLE_TYPE_CARGO_BIKE = 'cargo_bike';
    public const EXPECTED_VEHICLE_TYPE_CAR = 'car';
    public const EXPECTED_VEHICLE_TYPE_SMALL_VAN = 'small_van';
    public const EXPECTED_VEHICLE_TYPE_MEDIUM_VAN = 'medium_van';
    public const EXPECTED_VEHICLE_TYPE_LARGE_VAN = 'large_van';
    public const EXPECTED_VEHICLE_TYPE_XLARGE_VAN = 'xlarge_van';
    public const DELIVERY_METHOD_DELIVERY = 'delivery';
    public const DELIVERY_METHOD_STORE_PICKUP = 'storePickup';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandoffTypeAllowableValues()
    {
        return [
            self::HANDOFF_TYPE_NONE,
            self::HANDOFF_TYPE_RECEIVE,
            self::HANDOFF_TYPE_HANDOFF,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpectedVehicleTypeAllowableValues()
    {
        return [
            self::EXPECTED_VEHICLE_TYPE_PUSHBIKE,
            self::EXPECTED_VEHICLE_TYPE_MOTORBIKE,
            self::EXPECTED_VEHICLE_TYPE_CARGO_BIKE,
            self::EXPECTED_VEHICLE_TYPE_CAR,
            self::EXPECTED_VEHICLE_TYPE_SMALL_VAN,
            self::EXPECTED_VEHICLE_TYPE_MEDIUM_VAN,
            self::EXPECTED_VEHICLE_TYPE_LARGE_VAN,
            self::EXPECTED_VEHICLE_TYPE_XLARGE_VAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryMethodAllowableValues()
    {
        return [
            self::DELIVERY_METHOD_DELIVERY,
            self::DELIVERY_METHOD_STORE_PICKUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('pickup_window', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('updated_time', $data ?? [], null);
        $this->setIfExists('label_print_time', $data ?? [], null);
        $this->setIfExists('dropoff_address', $data ?? [], null);
        $this->setIfExists('dropoff_geo_location', $data ?? [], null);
        $this->setIfExists('dropoff_window', $data ?? [], null);
        $this->setIfExists('estimated_arrival_time', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('aggregation_id', $data ?? [], null);
        $this->setIfExists('parcels_count', $data ?? [], null);
        $this->setIfExists('external_order_id', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('order_tracking_info', $data ?? [], null);
        $this->setIfExists('handoff_type', $data ?? [], null);
        $this->setIfExists('handoff_info', $data ?? [], null);
        $this->setIfExists('used_credits', $data ?? [], null);
        $this->setIfExists('label_required', $data ?? [], null);
        $this->setIfExists('proof_of_collection', $data ?? [], null);
        $this->setIfExists('proof_of_delivery', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('expected_vehicle_type', $data ?? [], null);
        $this->setIfExists('delivery_method', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('pickup_contact_info', $data ?? [], null);
        $this->setIfExists('sender_contact_details', $data ?? [], null);
        $this->setIfExists('is_gift', $data ?? [], false);
        $this->setIfExists('route_order_index', $data ?? [], null);
        $this->setIfExists('route_info', $data ?? [], null);
        $this->setIfExists('schedule_info', $data ?? [], null);
        $this->setIfExists('extra_external_ids', $data ?? [], null);
        $this->setIfExists('is_return', $data ?? [], null);
        $this->setIfExists('simulated_order', $data ?? [], false);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('edit_info', $data ?? [], null);
        $this->setIfExists('is_nationwide', $data ?? [], null);
        $this->setIfExists('carrier_delivery_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['pickup_window'] === null) {
            $invalidProperties[] = "'pickup_window' can't be null";
        }
        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['creation_time'] === null) {
            $invalidProperties[] = "'creation_time' can't be null";
        }
        if ($this->container['dropoff_address'] === null) {
            $invalidProperties[] = "'dropoff_address' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['aggregation_id'] === null) {
            $invalidProperties[] = "'aggregation_id' can't be null";
        }
        if ($this->container['parcels_count'] === null) {
            $invalidProperties[] = "'parcels_count' can't be null";
        }
        if ($this->container['external_order_id'] === null) {
            $invalidProperties[] = "'external_order_id' can't be null";
        }
        if ($this->container['handoff_type'] === null) {
            $invalidProperties[] = "'handoff_type' can't be null";
        }
        $allowedValues = $this->getHandoffTypeAllowableValues();
        if (!is_null($this->container['handoff_type']) && !in_array($this->container['handoff_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'handoff_type', must be one of '%s'",
                $this->container['handoff_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['used_credits'] === null) {
            $invalidProperties[] = "'used_credits' can't be null";
        }
        if ($this->container['label_required'] === null) {
            $invalidProperties[] = "'label_required' can't be null";
        }
        $allowedValues = $this->getExpectedVehicleTypeAllowableValues();
        if (!is_null($this->container['expected_vehicle_type']) && !in_array($this->container['expected_vehicle_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expected_vehicle_type', must be one of '%s'",
                $this->container['expected_vehicle_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['delivery_method'] === null) {
            $invalidProperties[] = "'delivery_method' can't be null";
        }
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($this->container['delivery_method']) && !in_array($this->container['delivery_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_method', must be one of '%s'",
                $this->container['delivery_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['simulated_order'] === null) {
            $invalidProperties[] = "'simulated_order' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The order ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pickup_window
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerPickupWindow
     */
    public function getPickupWindow()
    {
        return $this->container['pickup_window'];
    }

    /**
     * Sets pickup_window
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerPickupWindow $pickup_window pickup_window
     *
     * @return self
     */
    public function setPickupWindow($pickup_window)
    {
        if (is_null($pickup_window)) {
            throw new \InvalidArgumentException('non-nullable pickup_window cannot be null');
        }
        $this->container['pickup_window'] = $pickup_window;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier The carrier name
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return \DateTime
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param \DateTime $creation_time The order original creation time in ISO8601 format
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            throw new \InvalidArgumentException('non-nullable creation_time cannot be null');
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time The order last update time in ISO8601 format
     *
     * @return self
     */
    public function setUpdatedTime($updated_time)
    {
        if (is_null($updated_time)) {
            throw new \InvalidArgumentException('non-nullable updated_time cannot be null');
        }
        $this->container['updated_time'] = $updated_time;

        return $this;
    }

    /**
     * Gets label_print_time
     *
     * @return \DateTime|null
     */
    public function getLabelPrintTime()
    {
        return $this->container['label_print_time'];
    }

    /**
     * Sets label_print_time
     *
     * @param \DateTime|null $label_print_time The last time a label was printed in ISO8601 format
     *
     * @return self
     */
    public function setLabelPrintTime($label_print_time)
    {
        if (is_null($label_print_time)) {
            throw new \InvalidArgumentException('non-nullable label_print_time cannot be null');
        }
        $this->container['label_print_time'] = $label_print_time;

        return $this;
    }

    /**
     * Gets dropoff_address
     *
     * @return string
     */
    public function getDropoffAddress()
    {
        return $this->container['dropoff_address'];
    }

    /**
     * Sets dropoff_address
     *
     * @param string $dropoff_address The dropoff address
     *
     * @return self
     */
    public function setDropoffAddress($dropoff_address)
    {
        if (is_null($dropoff_address)) {
            throw new \InvalidArgumentException('non-nullable dropoff_address cannot be null');
        }
        $this->container['dropoff_address'] = $dropoff_address;

        return $this;
    }

    /**
     * Gets dropoff_geo_location
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerDropoffGeoLocation|null
     */
    public function getDropoffGeoLocation()
    {
        return $this->container['dropoff_geo_location'];
    }

    /**
     * Sets dropoff_geo_location
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerDropoffGeoLocation|null $dropoff_geo_location dropoff_geo_location
     *
     * @return self
     */
    public function setDropoffGeoLocation($dropoff_geo_location)
    {
        if (is_null($dropoff_geo_location)) {
            throw new \InvalidArgumentException('non-nullable dropoff_geo_location cannot be null');
        }
        $this->container['dropoff_geo_location'] = $dropoff_geo_location;

        return $this;
    }

    /**
     * Gets dropoff_window
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerPickupWindow|null
     */
    public function getDropoffWindow()
    {
        return $this->container['dropoff_window'];
    }

    /**
     * Sets dropoff_window
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerPickupWindow|null $dropoff_window dropoff_window
     *
     * @return self
     */
    public function setDropoffWindow($dropoff_window)
    {
        if (is_null($dropoff_window)) {
            throw new \InvalidArgumentException('non-nullable dropoff_window cannot be null');
        }
        $this->container['dropoff_window'] = $dropoff_window;

        return $this;
    }

    /**
     * Gets estimated_arrival_time
     *
     * @return \DateTime|null
     */
    public function getEstimatedArrivalTime()
    {
        return $this->container['estimated_arrival_time'];
    }

    /**
     * Sets estimated_arrival_time
     *
     * @param \DateTime|null $estimated_arrival_time The estimated arrival time in ISO8601 format
     *
     * @return self
     */
    public function setEstimatedArrivalTime($estimated_arrival_time)
    {
        if (is_null($estimated_arrival_time)) {
            throw new \InvalidArgumentException('non-nullable estimated_arrival_time cannot be null');
        }
        $this->container['estimated_arrival_time'] = $estimated_arrival_time;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes The dropoff note
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets aggregation_id
     *
     * @return string
     */
    public function getAggregationId()
    {
        return $this->container['aggregation_id'];
    }

    /**
     * Sets aggregation_id
     *
     * @param string $aggregation_id The aggregation ID
     *
     * @return self
     */
    public function setAggregationId($aggregation_id)
    {
        if (is_null($aggregation_id)) {
            throw new \InvalidArgumentException('non-nullable aggregation_id cannot be null');
        }
        $this->container['aggregation_id'] = $aggregation_id;

        return $this;
    }

    /**
     * Gets parcels_count
     *
     * @return int
     */
    public function getParcelsCount()
    {
        return $this->container['parcels_count'];
    }

    /**
     * Sets parcels_count
     *
     * @param int $parcels_count The number of parcels in this order
     *
     * @return self
     */
    public function setParcelsCount($parcels_count)
    {
        if (is_null($parcels_count)) {
            throw new \InvalidArgumentException('non-nullable parcels_count cannot be null');
        }
        $this->container['parcels_count'] = $parcels_count;

        return $this;
    }

    /**
     * Gets external_order_id
     *
     * @return string
     */
    public function getExternalOrderId()
    {
        return $this->container['external_order_id'];
    }

    /**
     * Sets external_order_id
     *
     * @param string $external_order_id An external order ID attached to this order
     *
     * @return self
     */
    public function setExternalOrderId($external_order_id)
    {
        if (is_null($external_order_id)) {
            throw new \InvalidArgumentException('non-nullable external_order_id cannot be null');
        }
        $this->container['external_order_id'] = $external_order_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id The ID of the e-commerce store for this order (if exists)
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets order_tracking_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo|null
     */
    public function getOrderTrackingInfo()
    {
        return $this->container['order_tracking_info'];
    }

    /**
     * Sets order_tracking_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo|null $order_tracking_info order_tracking_info
     *
     * @return self
     */
    public function setOrderTrackingInfo($order_tracking_info)
    {
        if (is_null($order_tracking_info)) {
            throw new \InvalidArgumentException('non-nullable order_tracking_info cannot be null');
        }
        $this->container['order_tracking_info'] = $order_tracking_info;

        return $this;
    }

    /**
     * Gets handoff_type
     *
     * @return string
     */
    public function getHandoffType()
    {
        return $this->container['handoff_type'];
    }

    /**
     * Sets handoff_type
     *
     * @param string $handoff_type handoff_type
     *
     * @return self
     */
    public function setHandoffType($handoff_type)
    {
        if (is_null($handoff_type)) {
            throw new \InvalidArgumentException('non-nullable handoff_type cannot be null');
        }
        $allowedValues = $this->getHandoffTypeAllowableValues();
        if (!in_array($handoff_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'handoff_type', must be one of '%s'",
                    $handoff_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handoff_type'] = $handoff_type;

        return $this;
    }

    /**
     * Gets handoff_info
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo|null
     */
    public function getHandoffInfo()
    {
        return $this->container['handoff_info'];
    }

    /**
     * Sets handoff_info
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo|null $handoff_info handoff_info
     *
     * @return self
     */
    public function setHandoffInfo($handoff_info)
    {
        if (is_null($handoff_info)) {
            throw new \InvalidArgumentException('non-nullable handoff_info cannot be null');
        }
        $this->container['handoff_info'] = $handoff_info;

        return $this;
    }

    /**
     * Gets used_credits
     *
     * @return bool
     */
    public function getUsedCredits()
    {
        return $this->container['used_credits'];
    }

    /**
     * Sets used_credits
     *
     * @param bool $used_credits Whether credits were used to pay for this order
     *
     * @return self
     */
    public function setUsedCredits($used_credits)
    {
        if (is_null($used_credits)) {
            throw new \InvalidArgumentException('non-nullable used_credits cannot be null');
        }
        $this->container['used_credits'] = $used_credits;

        return $this;
    }

    /**
     * Gets label_required
     *
     * @return bool
     */
    public function getLabelRequired()
    {
        return $this->container['label_required'];
    }

    /**
     * Sets label_required
     *
     * @param bool $label_required Whether label is required
     *
     * @return self
     */
    public function setLabelRequired($label_required)
    {
        if (is_null($label_required)) {
            throw new \InvalidArgumentException('non-nullable label_required cannot be null');
        }
        $this->container['label_required'] = $label_required;

        return $this;
    }

    /**
     * Gets proof_of_collection
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null
     */
    public function getProofOfCollection()
    {
        return $this->container['proof_of_collection'];
    }

    /**
     * Sets proof_of_collection
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null $proof_of_collection Proof of collection for an order
     *
     * @return self
     */
    public function setProofOfCollection($proof_of_collection)
    {
        if (is_null($proof_of_collection)) {
            throw new \InvalidArgumentException('non-nullable proof_of_collection cannot be null');
        }
        $this->container['proof_of_collection'] = $proof_of_collection;

        return $this;
    }

    /**
     * Gets proof_of_delivery
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null
     */
    public function getProofOfDelivery()
    {
        return $this->container['proof_of_delivery'];
    }

    /**
     * Sets proof_of_delivery
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null $proof_of_delivery Proof of delivery for an order
     *
     * @return self
     */
    public function setProofOfDelivery($proof_of_delivery)
    {
        if (is_null($proof_of_delivery)) {
            throw new \InvalidArgumentException('non-nullable proof_of_delivery cannot be null');
        }
        $this->container['proof_of_delivery'] = $proof_of_delivery;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The name of the user who created the order
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets expected_vehicle_type
     *
     * @return string|null
     */
    public function getExpectedVehicleType()
    {
        return $this->container['expected_vehicle_type'];
    }

    /**
     * Sets expected_vehicle_type
     *
     * @param string|null $expected_vehicle_type expected_vehicle_type
     *
     * @return self
     */
    public function setExpectedVehicleType($expected_vehicle_type)
    {
        if (is_null($expected_vehicle_type)) {
            throw new \InvalidArgumentException('non-nullable expected_vehicle_type cannot be null');
        }
        $allowedValues = $this->getExpectedVehicleTypeAllowableValues();
        if (!in_array($expected_vehicle_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expected_vehicle_type', must be one of '%s'",
                    $expected_vehicle_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expected_vehicle_type'] = $expected_vehicle_type;

        return $this;
    }

    /**
     * Gets delivery_method
     *
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param string $delivery_method The delivery method
     *
     * @return self
     */
    public function setDeliveryMethod($delivery_method)
    {
        if (is_null($delivery_method)) {
            throw new \InvalidArgumentException('non-nullable delivery_method cannot be null');
        }
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!in_array($delivery_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_method', must be one of '%s'",
                    $delivery_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets pickup_contact_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer|null
     */
    public function getPickupContactInfo()
    {
        return $this->container['pickup_contact_info'];
    }

    /**
     * Sets pickup_contact_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer|null $pickup_contact_info pickup_contact_info
     *
     * @return self
     */
    public function setPickupContactInfo($pickup_contact_info)
    {
        if (is_null($pickup_contact_info)) {
            throw new \InvalidArgumentException('non-nullable pickup_contact_info cannot be null');
        }
        $this->container['pickup_contact_info'] = $pickup_contact_info;

        return $this;
    }

    /**
     * Gets sender_contact_details
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails|null
     */
    public function getSenderContactDetails()
    {
        return $this->container['sender_contact_details'];
    }

    /**
     * Sets sender_contact_details
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails|null $sender_contact_details sender_contact_details
     *
     * @return self
     */
    public function setSenderContactDetails($sender_contact_details)
    {
        if (is_null($sender_contact_details)) {
            throw new \InvalidArgumentException('non-nullable sender_contact_details cannot be null');
        }
        $this->container['sender_contact_details'] = $sender_contact_details;

        return $this;
    }

    /**
     * Gets is_gift
     *
     * @return bool|null
     */
    public function getIsGift()
    {
        return $this->container['is_gift'];
    }

    /**
     * Sets is_gift
     *
     * @param bool|null $is_gift Whether this delivery is a gift
     *
     * @return self
     */
    public function setIsGift($is_gift)
    {
        if (is_null($is_gift)) {
            throw new \InvalidArgumentException('non-nullable is_gift cannot be null');
        }
        $this->container['is_gift'] = $is_gift;

        return $this;
    }

    /**
     * Gets route_order_index
     *
     * @return int|null
     */
    public function getRouteOrderIndex()
    {
        return $this->container['route_order_index'];
    }

    /**
     * Sets route_order_index
     *
     * @param int|null $route_order_index The index of the order in the route
     *
     * @return self
     */
    public function setRouteOrderIndex($route_order_index)
    {
        if (is_null($route_order_index)) {
            throw new \InvalidArgumentException('non-nullable route_order_index cannot be null');
        }
        $this->container['route_order_index'] = $route_order_index;

        return $this;
    }

    /**
     * Gets route_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerRouteInfo|null
     */
    public function getRouteInfo()
    {
        return $this->container['route_info'];
    }

    /**
     * Sets route_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerRouteInfo|null $route_info route_info
     *
     * @return self
     */
    public function setRouteInfo($route_info)
    {
        if (is_null($route_info)) {
            throw new \InvalidArgumentException('non-nullable route_info cannot be null');
        }
        $this->container['route_info'] = $route_info;

        return $this;
    }

    /**
     * Gets schedule_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerScheduleInfo|null
     */
    public function getScheduleInfo()
    {
        return $this->container['schedule_info'];
    }

    /**
     * Sets schedule_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerScheduleInfo|null $schedule_info schedule_info
     *
     * @return self
     */
    public function setScheduleInfo($schedule_info)
    {
        if (is_null($schedule_info)) {
            throw new \InvalidArgumentException('non-nullable schedule_info cannot be null');
        }
        $this->container['schedule_info'] = $schedule_info;

        return $this;
    }

    /**
     * Gets extra_external_ids
     *
     * @return string[]|null
     */
    public function getExtraExternalIds()
    {
        return $this->container['extra_external_ids'];
    }

    /**
     * Sets extra_external_ids
     *
     * @param string[]|null $extra_external_ids Additional external IDs for the order
     *
     * @return self
     */
    public function setExtraExternalIds($extra_external_ids)
    {
        if (is_null($extra_external_ids)) {
            throw new \InvalidArgumentException('non-nullable extra_external_ids cannot be null');
        }
        $this->container['extra_external_ids'] = $extra_external_ids;

        return $this;
    }

    /**
     * Gets is_return
     *
     * @return bool|null
     */
    public function getIsReturn()
    {
        return $this->container['is_return'];
    }

    /**
     * Sets is_return
     *
     * @param bool|null $is_return Whether it is required to return back to the origin location
     *
     * @return self
     */
    public function setIsReturn($is_return)
    {
        if (is_null($is_return)) {
            throw new \InvalidArgumentException('non-nullable is_return cannot be null');
        }
        $this->container['is_return'] = $is_return;

        return $this;
    }

    /**
     * Gets simulated_order
     *
     * @return bool
     */
    public function getSimulatedOrder()
    {
        return $this->container['simulated_order'];
    }

    /**
     * Sets simulated_order
     *
     * @param bool $simulated_order Whether this order is a simulated order (for testing/demo purposes)
     *
     * @return self
     */
    public function setSimulatedOrder($simulated_order)
    {
        if (is_null($simulated_order)) {
            throw new \InvalidArgumentException('non-nullable simulated_order cannot be null');
        }
        $this->container['simulated_order'] = $simulated_order;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets edit_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerEditInfo|null
     */
    public function getEditInfo()
    {
        return $this->container['edit_info'];
    }

    /**
     * Sets edit_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerEditInfo|null $edit_info edit_info
     *
     * @return self
     */
    public function setEditInfo($edit_info)
    {
        if (is_null($edit_info)) {
            throw new \InvalidArgumentException('non-nullable edit_info cannot be null');
        }
        $this->container['edit_info'] = $edit_info;

        return $this;
    }

    /**
     * Gets is_nationwide
     *
     * @return bool|null
     */
    public function getIsNationwide()
    {
        return $this->container['is_nationwide'];
    }

    /**
     * Sets is_nationwide
     *
     * @param bool|null $is_nationwide Whether it is a nationwide delivery
     *
     * @return self
     */
    public function setIsNationwide($is_nationwide)
    {
        if (is_null($is_nationwide)) {
            throw new \InvalidArgumentException('non-nullable is_nationwide cannot be null');
        }
        $this->container['is_nationwide'] = $is_nationwide;

        return $this;
    }

    /**
     * Gets carrier_delivery_url
     *
     * @return string|null
     */
    public function getCarrierDeliveryUrl()
    {
        return $this->container['carrier_delivery_url'];
    }

    /**
     * Sets carrier_delivery_url
     *
     * @param string|null $carrier_delivery_url The URL to find the delivery in the carrier (if exists)
     *
     * @return self
     */
    public function setCarrierDeliveryUrl($carrier_delivery_url)
    {
        if (is_null($carrier_delivery_url)) {
            throw new \InvalidArgumentException('non-nullable carrier_delivery_url cannot be null');
        }
        $this->container['carrier_delivery_url'] = $carrier_delivery_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


