<?php
/**
 * QuotePost200ResponseDateProposalsInnerProposalsInnerProposal
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuotePost200ResponseDateProposalsInnerProposalsInnerProposal Class Doc Comment
 *
 * @category Class
 * @description The data for a single proposal (response for a quote request)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuotePost200ResponseDateProposalsInnerProposalsInnerProposal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_quote_post_200_response_dateProposals_inner_proposals_inner_proposal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'price' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'price_vat' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'credit_back' => 'int',
        'estimated_pickup' => '\OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot',
        'estimated_dropoff' => '\OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot',
        'dropoff_window_type' => 'string',
        'origin' => '\OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalOrigin',
        'pickup_location_id' => 'string',
        'destination' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress',
        'delivery_company' => 'string',
        'labels' => 'string[]',
        'price_level' => 'int',
        'handoff_info' => '\OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo',
        'types' => 'string[]',
        'predicted_emission_saving_kg' => 'float',
        'vehicle_type' => 'string',
        'specific_liability_coverage' => '\OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalSpecificLiabilityCoverage',
        'overnight_type' => 'string',
        'estimated_pickup_within_store_hours' => 'bool',
        'origin_destination_distance_meters' => 'int',
        'promotion_id' => 'string',
        'promotion_applied' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'price' => null,
        'price_vat' => null,
        'credit_back' => 'int64',
        'estimated_pickup' => null,
        'estimated_dropoff' => null,
        'dropoff_window_type' => null,
        'origin' => null,
        'pickup_location_id' => 'uuid',
        'destination' => null,
        'delivery_company' => null,
        'labels' => null,
        'price_level' => 'int32',
        'handoff_info' => null,
        'types' => null,
        'predicted_emission_saving_kg' => 'float',
        'vehicle_type' => null,
        'specific_liability_coverage' => null,
        'overnight_type' => null,
        'estimated_pickup_within_store_hours' => null,
        'origin_destination_distance_meters' => 'int32',
        'promotion_id' => 'uuid',
        'promotion_applied' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'price' => false,
        'price_vat' => false,
        'credit_back' => false,
        'estimated_pickup' => false,
        'estimated_dropoff' => false,
        'dropoff_window_type' => false,
        'origin' => false,
        'pickup_location_id' => false,
        'destination' => false,
        'delivery_company' => false,
        'labels' => false,
        'price_level' => false,
        'handoff_info' => false,
        'types' => false,
        'predicted_emission_saving_kg' => false,
        'vehicle_type' => false,
        'specific_liability_coverage' => false,
        'overnight_type' => false,
        'estimated_pickup_within_store_hours' => false,
        'origin_destination_distance_meters' => false,
        'promotion_id' => false,
        'promotion_applied' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'price' => 'price',
        'price_vat' => 'priceVat',
        'credit_back' => 'creditBack',
        'estimated_pickup' => 'estimatedPickup',
        'estimated_dropoff' => 'estimatedDropoff',
        'dropoff_window_type' => 'dropoffWindowType',
        'origin' => 'origin',
        'pickup_location_id' => 'pickupLocationId',
        'destination' => 'destination',
        'delivery_company' => 'deliveryCompany',
        'labels' => 'labels',
        'price_level' => 'priceLevel',
        'handoff_info' => 'handoffInfo',
        'types' => 'types',
        'predicted_emission_saving_kg' => 'predictedEmissionSavingKg',
        'vehicle_type' => 'vehicleType',
        'specific_liability_coverage' => 'specificLiabilityCoverage',
        'overnight_type' => 'overnightType',
        'estimated_pickup_within_store_hours' => 'estimatedPickupWithinStoreHours',
        'origin_destination_distance_meters' => 'originDestinationDistanceMeters',
        'promotion_id' => 'promotionId',
        'promotion_applied' => 'promotionApplied'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'price' => 'setPrice',
        'price_vat' => 'setPriceVat',
        'credit_back' => 'setCreditBack',
        'estimated_pickup' => 'setEstimatedPickup',
        'estimated_dropoff' => 'setEstimatedDropoff',
        'dropoff_window_type' => 'setDropoffWindowType',
        'origin' => 'setOrigin',
        'pickup_location_id' => 'setPickupLocationId',
        'destination' => 'setDestination',
        'delivery_company' => 'setDeliveryCompany',
        'labels' => 'setLabels',
        'price_level' => 'setPriceLevel',
        'handoff_info' => 'setHandoffInfo',
        'types' => 'setTypes',
        'predicted_emission_saving_kg' => 'setPredictedEmissionSavingKg',
        'vehicle_type' => 'setVehicleType',
        'specific_liability_coverage' => 'setSpecificLiabilityCoverage',
        'overnight_type' => 'setOvernightType',
        'estimated_pickup_within_store_hours' => 'setEstimatedPickupWithinStoreHours',
        'origin_destination_distance_meters' => 'setOriginDestinationDistanceMeters',
        'promotion_id' => 'setPromotionId',
        'promotion_applied' => 'setPromotionApplied'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'price' => 'getPrice',
        'price_vat' => 'getPriceVat',
        'credit_back' => 'getCreditBack',
        'estimated_pickup' => 'getEstimatedPickup',
        'estimated_dropoff' => 'getEstimatedDropoff',
        'dropoff_window_type' => 'getDropoffWindowType',
        'origin' => 'getOrigin',
        'pickup_location_id' => 'getPickupLocationId',
        'destination' => 'getDestination',
        'delivery_company' => 'getDeliveryCompany',
        'labels' => 'getLabels',
        'price_level' => 'getPriceLevel',
        'handoff_info' => 'getHandoffInfo',
        'types' => 'getTypes',
        'predicted_emission_saving_kg' => 'getPredictedEmissionSavingKg',
        'vehicle_type' => 'getVehicleType',
        'specific_liability_coverage' => 'getSpecificLiabilityCoverage',
        'overnight_type' => 'getOvernightType',
        'estimated_pickup_within_store_hours' => 'getEstimatedPickupWithinStoreHours',
        'origin_destination_distance_meters' => 'getOriginDestinationDistanceMeters',
        'promotion_id' => 'getPromotionId',
        'promotion_applied' => 'getPromotionApplied'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DROPOFF_WINDOW_TYPE_SCHEDULED_WINDOW = 'scheduledWindow';
    public const DROPOFF_WINDOW_TYPE_ALL_DAY = 'allDay';
    public const DROPOFF_WINDOW_TYPE_EXPRESS = 'express';
    public const DROPOFF_WINDOW_TYPE_STORE_PICKUP = 'storePickup';
    public const LABELS_BEST = 'best';
    public const LABELS_CHEAPEST = 'cheapest';
    public const LABELS_QUICKEST = 'quickest';
    public const LABELS_CURRENT = 'current';
    public const TYPES_GREEN = 'Green';
    public const TYPES_FLEXIBLE = 'flexible';
    public const TYPES_STORE_PICKUP = 'storePickup';
    public const TYPES_OWN_FLEET = 'ownFleet';
    public const TYPES_COLLECTION_POINT = 'CollectionPoint';
    public const VEHICLE_TYPE_PUSHBIKE = 'pushbike';
    public const VEHICLE_TYPE_MOTORBIKE = 'motorbike';
    public const VEHICLE_TYPE_CARGO_BIKE = 'cargo_bike';
    public const VEHICLE_TYPE_CAR = 'car';
    public const VEHICLE_TYPE_SMALL_VAN = 'small_van';
    public const VEHICLE_TYPE_MEDIUM_VAN = 'medium_van';
    public const VEHICLE_TYPE_LARGE_VAN = 'large_van';
    public const VEHICLE_TYPE_XLARGE_VAN = 'xlarge_van';
    public const OVERNIGHT_TYPE_NOT_OVERNIGHT = 'notOvernight';
    public const OVERNIGHT_TYPE_PARCEL_OVERNIGHT = 'parcelOvernight';
    public const OVERNIGHT_TYPE_DELICATE_GOODS_OVERNIGHT = 'delicateGoodsOvernight';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropoffWindowTypeAllowableValues()
    {
        return [
            self::DROPOFF_WINDOW_TYPE_SCHEDULED_WINDOW,
            self::DROPOFF_WINDOW_TYPE_ALL_DAY,
            self::DROPOFF_WINDOW_TYPE_EXPRESS,
            self::DROPOFF_WINDOW_TYPE_STORE_PICKUP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelsAllowableValues()
    {
        return [
            self::LABELS_BEST,
            self::LABELS_CHEAPEST,
            self::LABELS_QUICKEST,
            self::LABELS_CURRENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypesAllowableValues()
    {
        return [
            self::TYPES_GREEN,
            self::TYPES_FLEXIBLE,
            self::TYPES_STORE_PICKUP,
            self::TYPES_OWN_FLEET,
            self::TYPES_COLLECTION_POINT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVehicleTypeAllowableValues()
    {
        return [
            self::VEHICLE_TYPE_PUSHBIKE,
            self::VEHICLE_TYPE_MOTORBIKE,
            self::VEHICLE_TYPE_CARGO_BIKE,
            self::VEHICLE_TYPE_CAR,
            self::VEHICLE_TYPE_SMALL_VAN,
            self::VEHICLE_TYPE_MEDIUM_VAN,
            self::VEHICLE_TYPE_LARGE_VAN,
            self::VEHICLE_TYPE_XLARGE_VAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOvernightTypeAllowableValues()
    {
        return [
            self::OVERNIGHT_TYPE_NOT_OVERNIGHT,
            self::OVERNIGHT_TYPE_PARCEL_OVERNIGHT,
            self::OVERNIGHT_TYPE_DELICATE_GOODS_OVERNIGHT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_vat', $data ?? [], null);
        $this->setIfExists('credit_back', $data ?? [], null);
        $this->setIfExists('estimated_pickup', $data ?? [], null);
        $this->setIfExists('estimated_dropoff', $data ?? [], null);
        $this->setIfExists('dropoff_window_type', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('pickup_location_id', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('delivery_company', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('price_level', $data ?? [], null);
        $this->setIfExists('handoff_info', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('predicted_emission_saving_kg', $data ?? [], null);
        $this->setIfExists('vehicle_type', $data ?? [], null);
        $this->setIfExists('specific_liability_coverage', $data ?? [], null);
        $this->setIfExists('overnight_type', $data ?? [], null);
        $this->setIfExists('estimated_pickup_within_store_hours', $data ?? [], null);
        $this->setIfExists('origin_destination_distance_meters', $data ?? [], null);
        $this->setIfExists('promotion_id', $data ?? [], null);
        $this->setIfExists('promotion_applied', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['estimated_pickup'] === null) {
            $invalidProperties[] = "'estimated_pickup' can't be null";
        }
        if ($this->container['estimated_dropoff'] === null) {
            $invalidProperties[] = "'estimated_dropoff' can't be null";
        }
        if ($this->container['dropoff_window_type'] === null) {
            $invalidProperties[] = "'dropoff_window_type' can't be null";
        }
        $allowedValues = $this->getDropoffWindowTypeAllowableValues();
        if (!is_null($this->container['dropoff_window_type']) && !in_array($this->container['dropoff_window_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dropoff_window_type', must be one of '%s'",
                $this->container['dropoff_window_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if (!is_null($this->container['price_level']) && ($this->container['price_level'] < 1)) {
            $invalidProperties[] = "invalid value for 'price_level', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getVehicleTypeAllowableValues();
        if (!is_null($this->container['vehicle_type']) && !in_array($this->container['vehicle_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vehicle_type', must be one of '%s'",
                $this->container['vehicle_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['overnight_type'] === null) {
            $invalidProperties[] = "'overnight_type' can't be null";
        }
        $allowedValues = $this->getOvernightTypeAllowableValues();
        if (!is_null($this->container['overnight_type']) && !in_array($this->container['overnight_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'overnight_type', must be one of '%s'",
                $this->container['overnight_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['estimated_pickup_within_store_hours'] === null) {
            $invalidProperties[] = "'estimated_pickup_within_store_hours' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The proposal ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_vat
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue|null
     */
    public function getPriceVat()
    {
        return $this->container['price_vat'];
    }

    /**
     * Sets price_vat
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue|null $price_vat price_vat
     *
     * @return self
     */
    public function setPriceVat($price_vat)
    {
        if (is_null($price_vat)) {
            throw new \InvalidArgumentException('non-nullable price_vat cannot be null');
        }
        $this->container['price_vat'] = $price_vat;

        return $this;
    }

    /**
     * Gets credit_back
     *
     * @return int|null
     */
    public function getCreditBack()
    {
        return $this->container['credit_back'];
    }

    /**
     * Sets credit_back
     *
     * @param int|null $credit_back The amount of credits this proposal awards, in credit cents
     *
     * @return self
     */
    public function setCreditBack($credit_back)
    {
        if (is_null($credit_back)) {
            throw new \InvalidArgumentException('non-nullable credit_back cannot be null');
        }
        $this->container['credit_back'] = $credit_back;

        return $this;
    }

    /**
     * Gets estimated_pickup
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot
     */
    public function getEstimatedPickup()
    {
        return $this->container['estimated_pickup'];
    }

    /**
     * Sets estimated_pickup
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot $estimated_pickup estimated_pickup
     *
     * @return self
     */
    public function setEstimatedPickup($estimated_pickup)
    {
        if (is_null($estimated_pickup)) {
            throw new \InvalidArgumentException('non-nullable estimated_pickup cannot be null');
        }
        $this->container['estimated_pickup'] = $estimated_pickup;

        return $this;
    }

    /**
     * Gets estimated_dropoff
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot
     */
    public function getEstimatedDropoff()
    {
        return $this->container['estimated_dropoff'];
    }

    /**
     * Sets estimated_dropoff
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot $estimated_dropoff estimated_dropoff
     *
     * @return self
     */
    public function setEstimatedDropoff($estimated_dropoff)
    {
        if (is_null($estimated_dropoff)) {
            throw new \InvalidArgumentException('non-nullable estimated_dropoff cannot be null');
        }
        $this->container['estimated_dropoff'] = $estimated_dropoff;

        return $this;
    }

    /**
     * Gets dropoff_window_type
     *
     * @return string
     */
    public function getDropoffWindowType()
    {
        return $this->container['dropoff_window_type'];
    }

    /**
     * Sets dropoff_window_type
     *
     * @param string $dropoff_window_type <u>The reported issue</u>: <br>             <table>   <tr><td>scheduledWindow</td>     <td>A scheduled delivery window</td></tr>   <tr><td>allDay</td>              <td>An all day window</td></tr>   <tr><td>express</td>             <td>An express window</td></tr> </table>
     *
     * @return self
     */
    public function setDropoffWindowType($dropoff_window_type)
    {
        if (is_null($dropoff_window_type)) {
            throw new \InvalidArgumentException('non-nullable dropoff_window_type cannot be null');
        }
        $allowedValues = $this->getDropoffWindowTypeAllowableValues();
        if (!in_array($dropoff_window_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dropoff_window_type', must be one of '%s'",
                    $dropoff_window_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dropoff_window_type'] = $dropoff_window_type;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalOrigin
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalOrigin $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets pickup_location_id
     *
     * @return string|null
     */
    public function getPickupLocationId()
    {
        return $this->container['pickup_location_id'];
    }

    /**
     * Sets pickup_location_id
     *
     * @param string|null $pickup_location_id The id of an existing sender location with the sender contact details (optional)
     *
     * @return self
     */
    public function setPickupLocationId($pickup_location_id)
    {
        if (is_null($pickup_location_id)) {
            throw new \InvalidArgumentException('non-nullable pickup_location_id cannot be null');
        }
        $this->container['pickup_location_id'] = $pickup_location_id;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets delivery_company
     *
     * @return string|null
     */
    public function getDeliveryCompany()
    {
        return $this->container['delivery_company'];
    }

    /**
     * Sets delivery_company
     *
     * @param string|null $delivery_company The company that will perform the delivery (if known)
     *
     * @return self
     */
    public function setDeliveryCompany($delivery_company)
    {
        if (is_null($delivery_company)) {
            throw new \InvalidArgumentException('non-nullable delivery_company cannot be null');
        }
        $this->container['delivery_company'] = $delivery_company;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels An array of labels for this proposal
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $allowedValues = $this->getLabelsAllowableValues();
        if (array_diff($labels, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'labels', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets price_level
     *
     * @return int|null
     */
    public function getPriceLevel()
    {
        return $this->container['price_level'];
    }

    /**
     * Sets price_level
     *
     * @param int|null $price_level price_level
     *
     * @return self
     */
    public function setPriceLevel($price_level)
    {
        if (is_null($price_level)) {
            throw new \InvalidArgumentException('non-nullable price_level cannot be null');
        }

        if (($price_level < 1)) {
            throw new \InvalidArgumentException('invalid value for $price_level when calling QuotePost200ResponseDateProposalsInnerProposalsInnerProposal., must be bigger than or equal to 1.');
        }

        $this->container['price_level'] = $price_level;

        return $this;
    }

    /**
     * Gets handoff_info
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo|null
     */
    public function getHandoffInfo()
    {
        return $this->container['handoff_info'];
    }

    /**
     * Sets handoff_info
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo|null $handoff_info handoff_info
     *
     * @return self
     */
    public function setHandoffInfo($handoff_info)
    {
        if (is_null($handoff_info)) {
            throw new \InvalidArgumentException('non-nullable handoff_info cannot be null');
        }
        $this->container['handoff_info'] = $handoff_info;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types types
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }
        $allowedValues = $this->getTypesAllowableValues();
        if (array_diff($types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets predicted_emission_saving_kg
     *
     * @return float|null
     */
    public function getPredictedEmissionSavingKg()
    {
        return $this->container['predicted_emission_saving_kg'];
    }

    /**
     * Sets predicted_emission_saving_kg
     *
     * @param float|null $predicted_emission_saving_kg predicted_emission_saving_kg
     *
     * @return self
     */
    public function setPredictedEmissionSavingKg($predicted_emission_saving_kg)
    {
        if (is_null($predicted_emission_saving_kg)) {
            throw new \InvalidArgumentException('non-nullable predicted_emission_saving_kg cannot be null');
        }
        $this->container['predicted_emission_saving_kg'] = $predicted_emission_saving_kg;

        return $this;
    }

    /**
     * Gets vehicle_type
     *
     * @return string|null
     */
    public function getVehicleType()
    {
        return $this->container['vehicle_type'];
    }

    /**
     * Sets vehicle_type
     *
     * @param string|null $vehicle_type vehicle_type
     *
     * @return self
     */
    public function setVehicleType($vehicle_type)
    {
        if (is_null($vehicle_type)) {
            throw new \InvalidArgumentException('non-nullable vehicle_type cannot be null');
        }
        $allowedValues = $this->getVehicleTypeAllowableValues();
        if (!in_array($vehicle_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vehicle_type', must be one of '%s'",
                    $vehicle_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vehicle_type'] = $vehicle_type;

        return $this;
    }

    /**
     * Gets specific_liability_coverage
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalSpecificLiabilityCoverage|null
     */
    public function getSpecificLiabilityCoverage()
    {
        return $this->container['specific_liability_coverage'];
    }

    /**
     * Sets specific_liability_coverage
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalSpecificLiabilityCoverage|null $specific_liability_coverage specific_liability_coverage
     *
     * @return self
     */
    public function setSpecificLiabilityCoverage($specific_liability_coverage)
    {
        if (is_null($specific_liability_coverage)) {
            throw new \InvalidArgumentException('non-nullable specific_liability_coverage cannot be null');
        }
        $this->container['specific_liability_coverage'] = $specific_liability_coverage;

        return $this;
    }

    /**
     * Gets overnight_type
     *
     * @return string
     */
    public function getOvernightType()
    {
        return $this->container['overnight_type'];
    }

    /**
     * Sets overnight_type
     *
     * @param string $overnight_type The type of overnight delivery (if it's overnight)
     *
     * @return self
     */
    public function setOvernightType($overnight_type)
    {
        if (is_null($overnight_type)) {
            throw new \InvalidArgumentException('non-nullable overnight_type cannot be null');
        }
        $allowedValues = $this->getOvernightTypeAllowableValues();
        if (!in_array($overnight_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'overnight_type', must be one of '%s'",
                    $overnight_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['overnight_type'] = $overnight_type;

        return $this;
    }

    /**
     * Gets estimated_pickup_within_store_hours
     *
     * @return bool
     */
    public function getEstimatedPickupWithinStoreHours()
    {
        return $this->container['estimated_pickup_within_store_hours'];
    }

    /**
     * Sets estimated_pickup_within_store_hours
     *
     * @param bool $estimated_pickup_within_store_hours Whether the estimated pickup is within store hours
     *
     * @return self
     */
    public function setEstimatedPickupWithinStoreHours($estimated_pickup_within_store_hours)
    {
        if (is_null($estimated_pickup_within_store_hours)) {
            throw new \InvalidArgumentException('non-nullable estimated_pickup_within_store_hours cannot be null');
        }
        $this->container['estimated_pickup_within_store_hours'] = $estimated_pickup_within_store_hours;

        return $this;
    }

    /**
     * Gets origin_destination_distance_meters
     *
     * @return int|null
     */
    public function getOriginDestinationDistanceMeters()
    {
        return $this->container['origin_destination_distance_meters'];
    }

    /**
     * Sets origin_destination_distance_meters
     *
     * @param int|null $origin_destination_distance_meters origin_destination_distance_meters
     *
     * @return self
     */
    public function setOriginDestinationDistanceMeters($origin_destination_distance_meters)
    {
        if (is_null($origin_destination_distance_meters)) {
            throw new \InvalidArgumentException('non-nullable origin_destination_distance_meters cannot be null');
        }
        $this->container['origin_destination_distance_meters'] = $origin_destination_distance_meters;

        return $this;
    }

    /**
     * Gets promotion_id
     *
     * @return string|null
     */
    public function getPromotionId()
    {
        return $this->container['promotion_id'];
    }

    /**
     * Sets promotion_id
     *
     * @param string|null $promotion_id The id of the promotion that this proposal was created from
     *
     * @return self
     */
    public function setPromotionId($promotion_id)
    {
        if (is_null($promotion_id)) {
            throw new \InvalidArgumentException('non-nullable promotion_id cannot be null');
        }
        $this->container['promotion_id'] = $promotion_id;

        return $this;
    }

    /**
     * Gets promotion_applied
     *
     * @return bool|null
     */
    public function getPromotionApplied()
    {
        return $this->container['promotion_applied'];
    }

    /**
     * Sets promotion_applied
     *
     * @param bool|null $promotion_applied Whether a promotion was applied to this proposal
     *
     * @return self
     */
    public function setPromotionApplied($promotion_applied)
    {
        if (is_null($promotion_applied)) {
            throw new \InvalidArgumentException('non-nullable promotion_applied cannot be null');
        }
        $this->container['promotion_applied'] = $promotion_applied;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


