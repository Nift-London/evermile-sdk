<?php
/**
 * OrderPost201ResponseCostBreakdownInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderPost201ResponseCostBreakdownInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderPost201ResponseCostBreakdownInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_order_post_201_response_costBreakdown_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'price' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'waiver_details' => '\OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerWaiverDetails',
        'cancellation_fee_info' => '\OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerCancellationFeeInfo',
        'liability_info' => '\OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerLiabilityInfo',
        'discount_info' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValueDiscount',
        'comment' => 'string',
        'item_id' => 'string',
        'performed_by' => 'string',
        'effective_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'price' => null,
        'waiver_details' => null,
        'cancellation_fee_info' => null,
        'liability_info' => null,
        'discount_info' => null,
        'comment' => null,
        'item_id' => null,
        'performed_by' => null,
        'effective_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'price' => false,
        'waiver_details' => false,
        'cancellation_fee_info' => false,
        'liability_info' => false,
        'discount_info' => false,
        'comment' => false,
        'item_id' => false,
        'performed_by' => false,
        'effective_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'price' => 'price',
        'waiver_details' => 'waiverDetails',
        'cancellation_fee_info' => 'cancellationFeeInfo',
        'liability_info' => 'liabilityInfo',
        'discount_info' => 'discountInfo',
        'comment' => 'comment',
        'item_id' => 'itemId',
        'performed_by' => 'performedBy',
        'effective_date' => 'effectiveDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'price' => 'setPrice',
        'waiver_details' => 'setWaiverDetails',
        'cancellation_fee_info' => 'setCancellationFeeInfo',
        'liability_info' => 'setLiabilityInfo',
        'discount_info' => 'setDiscountInfo',
        'comment' => 'setComment',
        'item_id' => 'setItemId',
        'performed_by' => 'setPerformedBy',
        'effective_date' => 'setEffectiveDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'price' => 'getPrice',
        'waiver_details' => 'getWaiverDetails',
        'cancellation_fee_info' => 'getCancellationFeeInfo',
        'liability_info' => 'getLiabilityInfo',
        'discount_info' => 'getDiscountInfo',
        'comment' => 'getComment',
        'item_id' => 'getItemId',
        'performed_by' => 'getPerformedBy',
        'effective_date' => 'getEffectiveDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NAME_COST_ITEM_DELIVERY_COST = 'CostItemDeliveryCost';
    public const NAME_COST_ITEM_BOOKING_FEE = 'CostItemBookingFee';
    public const NAME_COST_ITEM_LIABILITY = 'CostItemLiability';
    public const NAME_COST_ITEM_WAITING_TIME = 'CostItemWaitingTime';
    public const NAME_COST_ITEM_ADDITIONAL_PARCELS = 'CostItemAdditionalParcels';
    public const NAME_COST_ITEM_LATE_AMENDMENT = 'CostItemLateAmendment';
    public const NAME_COST_ITEM_OVERWEIGHT = 'CostItemOverweight';
    public const NAME_COST_ITEM_OVERSIZE = 'CostItemOversize';
    public const NAME_COST_ITEM_RETURN_TO_STORE = 'CostItemReturnToStore';
    public const NAME_COST_ITEM_CREDIT_USAGE = 'CostItemCreditUsage';
    public const NAME_COST_ITEM_CANCELLATION = 'CostItemCancellation';
    public const NAME_COST_ITEM_DISCOUNT = 'CostItemDiscount';
    public const NAME_COST_ITEM_CANCELLED_AT_PICKUP = 'CostItemCancelledAtPickup';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_COST_ITEM_DELIVERY_COST,
            self::NAME_COST_ITEM_BOOKING_FEE,
            self::NAME_COST_ITEM_LIABILITY,
            self::NAME_COST_ITEM_WAITING_TIME,
            self::NAME_COST_ITEM_ADDITIONAL_PARCELS,
            self::NAME_COST_ITEM_LATE_AMENDMENT,
            self::NAME_COST_ITEM_OVERWEIGHT,
            self::NAME_COST_ITEM_OVERSIZE,
            self::NAME_COST_ITEM_RETURN_TO_STORE,
            self::NAME_COST_ITEM_CREDIT_USAGE,
            self::NAME_COST_ITEM_CANCELLATION,
            self::NAME_COST_ITEM_DISCOUNT,
            self::NAME_COST_ITEM_CANCELLED_AT_PICKUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('waiver_details', $data ?? [], null);
        $this->setIfExists('cancellation_fee_info', $data ?? [], null);
        $this->setIfExists('liability_info', $data ?? [], null);
        $this->setIfExists('discount_info', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('performed_by', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getNameAllowableValues();
        if (!is_null($this->container['name']) && !in_array($this->container['name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'name', must be one of '%s'",
                $this->container['name'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['effective_date'] === null) {
            $invalidProperties[] = "'effective_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name <u>The cost item name</u>: <br>             <table>   <tr><td>CostItemDeliveryCost</td>     <td>The cost of the delivery</td></tr>   <tr><td>CostItemBookingFee</td>              <td>The booking fee of the delivery</td></tr>   <tr><td>CostItemLiability</td>             <td>The cost of the liability coverage</td></tr>   <tr><td>CostItemWaitingTime</td>             <td>The cost of the waiting time</td></tr>   <tr><td>CostItemAdditionalParcels</td>             <td>The cost of the additional parcels</td></tr>   <tr><td>CostItemLateAmendment</td>             <td>The cost for late amendment</td></tr>   <tr><td>CostItemOverweight</td>             <td>The cost for overweight</td></tr>   <tr><td>CostItemOversize</td>             <td>The cost for oversize</td></tr>   <tr><td>CostItemReturnToStore</td>             <td>The cost item returned to store</td></tr>   <tr><td>CostItemCreditUsage</td>             <td>The credit usage</td></tr>   <tr><td>CostItemCancellation</td>             <td>The cost for a cancellation</td></tr>   <tr><td>CostItemDiscount</td>             <td>A delivery discount</td></tr>   <tr><td>CostItemCancelledAtPickup</td>     <td>The cost for a cancellation at pickup</td></tr> </table>
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $allowedValues = $this->getNameAllowableValues();
        if (!in_array($name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'name', must be one of '%s'",
                    $name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets waiver_details
     *
     * @return \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerWaiverDetails|null
     */
    public function getWaiverDetails()
    {
        return $this->container['waiver_details'];
    }

    /**
     * Sets waiver_details
     *
     * @param \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerWaiverDetails|null $waiver_details waiver_details
     *
     * @return self
     */
    public function setWaiverDetails($waiver_details)
    {
        if (is_null($waiver_details)) {
            throw new \InvalidArgumentException('non-nullable waiver_details cannot be null');
        }
        $this->container['waiver_details'] = $waiver_details;

        return $this;
    }

    /**
     * Gets cancellation_fee_info
     *
     * @return \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerCancellationFeeInfo|null
     */
    public function getCancellationFeeInfo()
    {
        return $this->container['cancellation_fee_info'];
    }

    /**
     * Sets cancellation_fee_info
     *
     * @param \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerCancellationFeeInfo|null $cancellation_fee_info cancellation_fee_info
     *
     * @return self
     */
    public function setCancellationFeeInfo($cancellation_fee_info)
    {
        if (is_null($cancellation_fee_info)) {
            throw new \InvalidArgumentException('non-nullable cancellation_fee_info cannot be null');
        }
        $this->container['cancellation_fee_info'] = $cancellation_fee_info;

        return $this;
    }

    /**
     * Gets liability_info
     *
     * @return \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerLiabilityInfo|null
     */
    public function getLiabilityInfo()
    {
        return $this->container['liability_info'];
    }

    /**
     * Sets liability_info
     *
     * @param \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInnerLiabilityInfo|null $liability_info liability_info
     *
     * @return self
     */
    public function setLiabilityInfo($liability_info)
    {
        if (is_null($liability_info)) {
            throw new \InvalidArgumentException('non-nullable liability_info cannot be null');
        }
        $this->container['liability_info'] = $liability_info;

        return $this;
    }

    /**
     * Gets discount_info
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValueDiscount|null
     */
    public function getDiscountInfo()
    {
        return $this->container['discount_info'];
    }

    /**
     * Sets discount_info
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValueDiscount|null $discount_info discount_info
     *
     * @return self
     */
    public function setDiscountInfo($discount_info)
    {
        if (is_null($discount_info)) {
            throw new \InvalidArgumentException('non-nullable discount_info cannot be null');
        }
        $this->container['discount_info'] = $discount_info;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment A freeform comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id The ID of the cost item
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets performed_by
     *
     * @return string|null
     */
    public function getPerformedBy()
    {
        return $this->container['performed_by'];
    }

    /**
     * Sets performed_by
     *
     * @param string|null $performed_by Who created this item
     *
     * @return self
     */
    public function setPerformedBy($performed_by)
    {
        if (is_null($performed_by)) {
            throw new \InvalidArgumentException('non-nullable performed_by cannot be null');
        }
        $this->container['performed_by'] = $performed_by;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The effective date of the cost item
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


