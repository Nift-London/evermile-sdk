<?php
/**
 * OrderPostRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderPostRequest Class Doc Comment
 *
 * @category Class
 * @description Parameters for an order request
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_order_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'proposal_id' => 'string',
        'external_order_id' => 'string',
        'pickup_contact_details' => '\OpenAPI\Client\Model\OrderPostRequestPickupContactDetails',
        'pickup_location_id' => 'string',
        'dropoff_contact_details' => '\OpenAPI\Client\Model\OrderPostRequestDropoffContactDetails',
        'sender_contact_details' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails',
        'use_credits' => 'bool',
        'proof_of_delivery_requirement' => 'string[]',
        'extended_liability_coverage_cents' => 'int',
        'draft_order_id' => 'string',
        'recipient_message' => 'string',
        'is_gift' => 'bool',
        'simulated_order' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'proposal_id' => 'uuid',
        'external_order_id' => null,
        'pickup_contact_details' => null,
        'pickup_location_id' => 'uuid',
        'dropoff_contact_details' => null,
        'sender_contact_details' => null,
        'use_credits' => null,
        'proof_of_delivery_requirement' => null,
        'extended_liability_coverage_cents' => 'int64',
        'draft_order_id' => 'uuid',
        'recipient_message' => null,
        'is_gift' => null,
        'simulated_order' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'proposal_id' => false,
        'external_order_id' => false,
        'pickup_contact_details' => false,
        'pickup_location_id' => false,
        'dropoff_contact_details' => false,
        'sender_contact_details' => false,
        'use_credits' => false,
        'proof_of_delivery_requirement' => false,
        'extended_liability_coverage_cents' => false,
        'draft_order_id' => false,
        'recipient_message' => false,
        'is_gift' => false,
        'simulated_order' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'proposal_id' => 'proposalId',
        'external_order_id' => 'externalOrderId',
        'pickup_contact_details' => 'pickupContactDetails',
        'pickup_location_id' => 'pickupLocationId',
        'dropoff_contact_details' => 'dropoffContactDetails',
        'sender_contact_details' => 'senderContactDetails',
        'use_credits' => 'useCredits',
        'proof_of_delivery_requirement' => 'proofOfDeliveryRequirement',
        'extended_liability_coverage_cents' => 'extendedLiabilityCoverageCents',
        'draft_order_id' => 'draftOrderId',
        'recipient_message' => 'recipientMessage',
        'is_gift' => 'isGift',
        'simulated_order' => 'simulatedOrder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'proposal_id' => 'setProposalId',
        'external_order_id' => 'setExternalOrderId',
        'pickup_contact_details' => 'setPickupContactDetails',
        'pickup_location_id' => 'setPickupLocationId',
        'dropoff_contact_details' => 'setDropoffContactDetails',
        'sender_contact_details' => 'setSenderContactDetails',
        'use_credits' => 'setUseCredits',
        'proof_of_delivery_requirement' => 'setProofOfDeliveryRequirement',
        'extended_liability_coverage_cents' => 'setExtendedLiabilityCoverageCents',
        'draft_order_id' => 'setDraftOrderId',
        'recipient_message' => 'setRecipientMessage',
        'is_gift' => 'setIsGift',
        'simulated_order' => 'setSimulatedOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'proposal_id' => 'getProposalId',
        'external_order_id' => 'getExternalOrderId',
        'pickup_contact_details' => 'getPickupContactDetails',
        'pickup_location_id' => 'getPickupLocationId',
        'dropoff_contact_details' => 'getDropoffContactDetails',
        'sender_contact_details' => 'getSenderContactDetails',
        'use_credits' => 'getUseCredits',
        'proof_of_delivery_requirement' => 'getProofOfDeliveryRequirement',
        'extended_liability_coverage_cents' => 'getExtendedLiabilityCoverageCents',
        'draft_order_id' => 'getDraftOrderId',
        'recipient_message' => 'getRecipientMessage',
        'is_gift' => 'getIsGift',
        'simulated_order' => 'getSimulatedOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROOF_OF_DELIVERY_REQUIREMENT_SIGNATURE = 'signature';
    public const PROOF_OF_DELIVERY_REQUIREMENT_PARCEL_PHOTO = 'parcelPhoto';
    public const PROOF_OF_DELIVERY_REQUIREMENT_PHOTO_ID = 'photoId';
    public const PROOF_OF_DELIVERY_REQUIREMENT_ANY = 'any';
    public const PROOF_OF_DELIVERY_REQUIREMENT_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProofOfDeliveryRequirementAllowableValues()
    {
        return [
            self::PROOF_OF_DELIVERY_REQUIREMENT_SIGNATURE,
            self::PROOF_OF_DELIVERY_REQUIREMENT_PARCEL_PHOTO,
            self::PROOF_OF_DELIVERY_REQUIREMENT_PHOTO_ID,
            self::PROOF_OF_DELIVERY_REQUIREMENT_ANY,
            self::PROOF_OF_DELIVERY_REQUIREMENT_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('proposal_id', $data ?? [], null);
        $this->setIfExists('external_order_id', $data ?? [], '');
        $this->setIfExists('pickup_contact_details', $data ?? [], null);
        $this->setIfExists('pickup_location_id', $data ?? [], null);
        $this->setIfExists('dropoff_contact_details', $data ?? [], null);
        $this->setIfExists('sender_contact_details', $data ?? [], null);
        $this->setIfExists('use_credits', $data ?? [], false);
        $this->setIfExists('proof_of_delivery_requirement', $data ?? [], null);
        $this->setIfExists('extended_liability_coverage_cents', $data ?? [], null);
        $this->setIfExists('draft_order_id', $data ?? [], null);
        $this->setIfExists('recipient_message', $data ?? [], null);
        $this->setIfExists('is_gift', $data ?? [], false);
        $this->setIfExists('simulated_order', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['proposal_id'] === null) {
            $invalidProperties[] = "'proposal_id' can't be null";
        }
        if ($this->container['use_credits'] === null) {
            $invalidProperties[] = "'use_credits' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets proposal_id
     *
     * @return string
     */
    public function getProposalId()
    {
        return $this->container['proposal_id'];
    }

    /**
     * Sets proposal_id
     *
     * @param string $proposal_id The proposal ID to create order from
     *
     * @return self
     */
    public function setProposalId($proposal_id)
    {
        if (is_null($proposal_id)) {
            throw new \InvalidArgumentException('non-nullable proposal_id cannot be null');
        }
        $this->container['proposal_id'] = $proposal_id;

        return $this;
    }

    /**
     * Gets external_order_id
     *
     * @return string|null
     */
    public function getExternalOrderId()
    {
        return $this->container['external_order_id'];
    }

    /**
     * Sets external_order_id
     *
     * @param string|null $external_order_id An external order ID (reference ID) to attach to this order
     *
     * @return self
     */
    public function setExternalOrderId($external_order_id)
    {
        if (is_null($external_order_id)) {
            throw new \InvalidArgumentException('non-nullable external_order_id cannot be null');
        }
        $this->container['external_order_id'] = $external_order_id;

        return $this;
    }

    /**
     * Gets pickup_contact_details
     *
     * @return \OpenAPI\Client\Model\OrderPostRequestPickupContactDetails|null
     */
    public function getPickupContactDetails()
    {
        return $this->container['pickup_contact_details'];
    }

    /**
     * Sets pickup_contact_details
     *
     * @param \OpenAPI\Client\Model\OrderPostRequestPickupContactDetails|null $pickup_contact_details pickup_contact_details
     *
     * @return self
     */
    public function setPickupContactDetails($pickup_contact_details)
    {
        if (is_null($pickup_contact_details)) {
            throw new \InvalidArgumentException('non-nullable pickup_contact_details cannot be null');
        }
        $this->container['pickup_contact_details'] = $pickup_contact_details;

        return $this;
    }

    /**
     * Gets pickup_location_id
     *
     * @return string|null
     */
    public function getPickupLocationId()
    {
        return $this->container['pickup_location_id'];
    }

    /**
     * Sets pickup_location_id
     *
     * @param string|null $pickup_location_id The id of an existing sender location with the sender contact details
     *
     * @return self
     */
    public function setPickupLocationId($pickup_location_id)
    {
        if (is_null($pickup_location_id)) {
            throw new \InvalidArgumentException('non-nullable pickup_location_id cannot be null');
        }
        $this->container['pickup_location_id'] = $pickup_location_id;

        return $this;
    }

    /**
     * Gets dropoff_contact_details
     *
     * @return \OpenAPI\Client\Model\OrderPostRequestDropoffContactDetails|null
     */
    public function getDropoffContactDetails()
    {
        return $this->container['dropoff_contact_details'];
    }

    /**
     * Sets dropoff_contact_details
     *
     * @param \OpenAPI\Client\Model\OrderPostRequestDropoffContactDetails|null $dropoff_contact_details dropoff_contact_details
     *
     * @return self
     */
    public function setDropoffContactDetails($dropoff_contact_details)
    {
        if (is_null($dropoff_contact_details)) {
            throw new \InvalidArgumentException('non-nullable dropoff_contact_details cannot be null');
        }
        $this->container['dropoff_contact_details'] = $dropoff_contact_details;

        return $this;
    }

    /**
     * Gets sender_contact_details
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails|null
     */
    public function getSenderContactDetails()
    {
        return $this->container['sender_contact_details'];
    }

    /**
     * Sets sender_contact_details
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails|null $sender_contact_details sender_contact_details
     *
     * @return self
     */
    public function setSenderContactDetails($sender_contact_details)
    {
        if (is_null($sender_contact_details)) {
            throw new \InvalidArgumentException('non-nullable sender_contact_details cannot be null');
        }
        $this->container['sender_contact_details'] = $sender_contact_details;

        return $this;
    }

    /**
     * Gets use_credits
     *
     * @return bool
     */
    public function getUseCredits()
    {
        return $this->container['use_credits'];
    }

    /**
     * Sets use_credits
     *
     * @param bool $use_credits Whether to use available credits to pay for order
     *
     * @return self
     */
    public function setUseCredits($use_credits)
    {
        if (is_null($use_credits)) {
            throw new \InvalidArgumentException('non-nullable use_credits cannot be null');
        }
        $this->container['use_credits'] = $use_credits;

        return $this;
    }

    /**
     * Gets proof_of_delivery_requirement
     *
     * @return string[]|null
     */
    public function getProofOfDeliveryRequirement()
    {
        return $this->container['proof_of_delivery_requirement'];
    }

    /**
     * Sets proof_of_delivery_requirement
     *
     * @param string[]|null $proof_of_delivery_requirement Proof of delivery requirements for a parcel, Optional. Will override any POD passed in on the quote
     *
     * @return self
     */
    public function setProofOfDeliveryRequirement($proof_of_delivery_requirement)
    {
        if (is_null($proof_of_delivery_requirement)) {
            throw new \InvalidArgumentException('non-nullable proof_of_delivery_requirement cannot be null');
        }
        $allowedValues = $this->getProofOfDeliveryRequirementAllowableValues();
        if (array_diff($proof_of_delivery_requirement, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'proof_of_delivery_requirement', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proof_of_delivery_requirement'] = $proof_of_delivery_requirement;

        return $this;
    }

    /**
     * Gets extended_liability_coverage_cents
     *
     * @return int|null
     */
    public function getExtendedLiabilityCoverageCents()
    {
        return $this->container['extended_liability_coverage_cents'];
    }

    /**
     * Sets extended_liability_coverage_cents
     *
     * @param int|null $extended_liability_coverage_cents The amount of extended liability coverage required for this order
     *
     * @return self
     */
    public function setExtendedLiabilityCoverageCents($extended_liability_coverage_cents)
    {
        if (is_null($extended_liability_coverage_cents)) {
            throw new \InvalidArgumentException('non-nullable extended_liability_coverage_cents cannot be null');
        }
        $this->container['extended_liability_coverage_cents'] = $extended_liability_coverage_cents;

        return $this;
    }

    /**
     * Gets draft_order_id
     *
     * @return string|null
     */
    public function getDraftOrderId()
    {
        return $this->container['draft_order_id'];
    }

    /**
     * Sets draft_order_id
     *
     * @param string|null $draft_order_id The draft's evermile ID. Used for marking the draft as ordered. (if provided)
     *
     * @return self
     */
    public function setDraftOrderId($draft_order_id)
    {
        if (is_null($draft_order_id)) {
            throw new \InvalidArgumentException('non-nullable draft_order_id cannot be null');
        }
        $this->container['draft_order_id'] = $draft_order_id;

        return $this;
    }

    /**
     * Gets recipient_message
     *
     * @return string|null
     */
    public function getRecipientMessage()
    {
        return $this->container['recipient_message'];
    }

    /**
     * Sets recipient_message
     *
     * @param string|null $recipient_message Additional message for the recipient
     *
     * @return self
     */
    public function setRecipientMessage($recipient_message)
    {
        if (is_null($recipient_message)) {
            throw new \InvalidArgumentException('non-nullable recipient_message cannot be null');
        }
        $this->container['recipient_message'] = $recipient_message;

        return $this;
    }

    /**
     * Gets is_gift
     *
     * @return bool|null
     */
    public function getIsGift()
    {
        return $this->container['is_gift'];
    }

    /**
     * Sets is_gift
     *
     * @param bool|null $is_gift Whether this delivery is a gift
     *
     * @return self
     */
    public function setIsGift($is_gift)
    {
        if (is_null($is_gift)) {
            throw new \InvalidArgumentException('non-nullable is_gift cannot be null');
        }
        $this->container['is_gift'] = $is_gift;

        return $this;
    }

    /**
     * Gets simulated_order
     *
     * @return bool|null
     */
    public function getSimulatedOrder()
    {
        return $this->container['simulated_order'];
    }

    /**
     * Sets simulated_order
     *
     * @param bool|null $simulated_order Whether this order is a simulated order (for testing/demo purposes)
     *
     * @return self
     */
    public function setSimulatedOrder($simulated_order)
    {
        if (is_null($simulated_order)) {
            throw new \InvalidArgumentException('non-nullable simulated_order cannot be null');
        }
        $this->container['simulated_order'] = $simulated_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


