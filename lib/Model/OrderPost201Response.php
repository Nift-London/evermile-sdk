<?php
/**
 * OrderPost201Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderPost201Response Class Doc Comment
 *
 * @category Class
 * @description The details of a booked order
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderPost201Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_order_post_201_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'external_order_id' => 'string',
        'store_id' => 'string',
        'store_name' => 'string',
        'status' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerStatus',
        'communicated_pickup' => '\OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot',
        'communicated_dropoff' => '\OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot',
        'actual_pickup' => '\DateTime',
        'actual_dropoff' => '\DateTime',
        'pickup_eta' => '\DateTime',
        'dropoff_eta' => '\DateTime',
        'courier_location' => '\OpenAPI\Client\Model\OrderPost201ResponseCourierLocation',
        'origin' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress',
        'destination' => '\OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress',
        'customer' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer',
        'delivery_company' => 'string',
        'parcels' => '\OpenAPI\Client\Model\OrderPost201ResponseParcelsInner[]',
        'value' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'instructions' => 'string',
        'customer_instructions' => 'string',
        'handling' => 'string[]',
        'proof_of_delivery_requirement' => 'string[]',
        'tracking_url' => 'string',
        'customer_tracking_url' => 'string',
        'sender_tracking_url' => 'string',
        'order_tracking_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo',
        'handoff_type' => 'string',
        'handoff_info' => '\OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo',
        'used_credits' => 'bool',
        'proof_of_collection' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]',
        'proof_of_delivery' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]',
        'notes' => 'string[]',
        'merchant_name' => 'string',
        'label_required' => 'bool',
        'label_print_time' => '\DateTime',
        'label_url' => 'string',
        'liability_coverage_cents' => 'int',
        'username' => 'string',
        'delivery_method' => 'string',
        'expected_vehicle_type' => 'string',
        'actual_vehicle_type' => 'string',
        'cost_breakdown' => '\OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInner[]',
        'total_value' => '\OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue',
        'pickup_contact_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer',
        'proposal_types' => 'string[]',
        'sender_contact_details' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails',
        'is_gift' => 'bool',
        'recipient_message' => 'string',
        'additional_properties' => 'array<string,mixed>',
        'route_order_index' => 'int',
        'route_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerRouteInfo',
        'estimated_pickup_within_store_hours' => 'bool',
        'requested_sla' => 'string',
        'schedule_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerScheduleInfo',
        'extra_external_ids' => 'string[]',
        'is_return' => 'bool',
        'simulated_order' => 'bool',
        'happiness' => '\OpenAPI\Client\Model\OrderPost201ResponseHappiness',
        'edit_info' => '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerEditInfo',
        'proposal_label' => 'string',
        'is_nationwide' => 'bool',
        'carrier_delivery_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'external_order_id' => null,
        'store_id' => 'uuid',
        'store_name' => null,
        'status' => null,
        'communicated_pickup' => null,
        'communicated_dropoff' => null,
        'actual_pickup' => 'date-time',
        'actual_dropoff' => 'date-time',
        'pickup_eta' => 'date-time',
        'dropoff_eta' => 'date-time',
        'courier_location' => null,
        'origin' => null,
        'destination' => null,
        'customer' => null,
        'delivery_company' => null,
        'parcels' => null,
        'value' => null,
        'instructions' => null,
        'customer_instructions' => null,
        'handling' => null,
        'proof_of_delivery_requirement' => null,
        'tracking_url' => null,
        'customer_tracking_url' => null,
        'sender_tracking_url' => null,
        'order_tracking_info' => null,
        'handoff_type' => null,
        'handoff_info' => null,
        'used_credits' => null,
        'proof_of_collection' => null,
        'proof_of_delivery' => null,
        'notes' => null,
        'merchant_name' => null,
        'label_required' => null,
        'label_print_time' => 'date-time',
        'label_url' => 'url',
        'liability_coverage_cents' => 'int64',
        'username' => null,
        'delivery_method' => null,
        'expected_vehicle_type' => null,
        'actual_vehicle_type' => null,
        'cost_breakdown' => null,
        'total_value' => null,
        'pickup_contact_info' => null,
        'proposal_types' => null,
        'sender_contact_details' => null,
        'is_gift' => null,
        'recipient_message' => null,
        'additional_properties' => null,
        'route_order_index' => null,
        'route_info' => null,
        'estimated_pickup_within_store_hours' => null,
        'requested_sla' => null,
        'schedule_info' => null,
        'extra_external_ids' => null,
        'is_return' => null,
        'simulated_order' => null,
        'happiness' => null,
        'edit_info' => null,
        'proposal_label' => null,
        'is_nationwide' => null,
        'carrier_delivery_url' => 'url'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'external_order_id' => false,
        'store_id' => false,
        'store_name' => false,
        'status' => false,
        'communicated_pickup' => false,
        'communicated_dropoff' => false,
        'actual_pickup' => false,
        'actual_dropoff' => false,
        'pickup_eta' => false,
        'dropoff_eta' => false,
        'courier_location' => false,
        'origin' => false,
        'destination' => false,
        'customer' => false,
        'delivery_company' => false,
        'parcels' => false,
        'value' => false,
        'instructions' => false,
        'customer_instructions' => false,
        'handling' => false,
        'proof_of_delivery_requirement' => false,
        'tracking_url' => false,
        'customer_tracking_url' => false,
        'sender_tracking_url' => false,
        'order_tracking_info' => false,
        'handoff_type' => false,
        'handoff_info' => false,
        'used_credits' => false,
        'proof_of_collection' => false,
        'proof_of_delivery' => false,
        'notes' => false,
        'merchant_name' => false,
        'label_required' => false,
        'label_print_time' => false,
        'label_url' => false,
        'liability_coverage_cents' => false,
        'username' => false,
        'delivery_method' => false,
        'expected_vehicle_type' => false,
        'actual_vehicle_type' => false,
        'cost_breakdown' => false,
        'total_value' => false,
        'pickup_contact_info' => false,
        'proposal_types' => false,
        'sender_contact_details' => false,
        'is_gift' => false,
        'recipient_message' => false,
        'additional_properties' => false,
        'route_order_index' => false,
        'route_info' => false,
        'estimated_pickup_within_store_hours' => false,
        'requested_sla' => false,
        'schedule_info' => false,
        'extra_external_ids' => false,
        'is_return' => false,
        'simulated_order' => false,
        'happiness' => false,
        'edit_info' => false,
        'proposal_label' => false,
        'is_nationwide' => false,
        'carrier_delivery_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_order_id' => 'externalOrderId',
        'store_id' => 'storeId',
        'store_name' => 'storeName',
        'status' => 'status',
        'communicated_pickup' => 'communicatedPickup',
        'communicated_dropoff' => 'communicatedDropoff',
        'actual_pickup' => 'actualPickup',
        'actual_dropoff' => 'actualDropoff',
        'pickup_eta' => 'pickupEta',
        'dropoff_eta' => 'dropoffEta',
        'courier_location' => 'courierLocation',
        'origin' => 'origin',
        'destination' => 'destination',
        'customer' => 'customer',
        'delivery_company' => 'deliveryCompany',
        'parcels' => 'parcels',
        'value' => 'value',
        'instructions' => 'instructions',
        'customer_instructions' => 'customerInstructions',
        'handling' => 'handling',
        'proof_of_delivery_requirement' => 'proofOfDeliveryRequirement',
        'tracking_url' => 'trackingUrl',
        'customer_tracking_url' => 'customerTrackingUrl',
        'sender_tracking_url' => 'senderTrackingUrl',
        'order_tracking_info' => 'orderTrackingInfo',
        'handoff_type' => 'handoffType',
        'handoff_info' => 'handoffInfo',
        'used_credits' => 'usedCredits',
        'proof_of_collection' => 'proofOfCollection',
        'proof_of_delivery' => 'proofOfDelivery',
        'notes' => 'notes',
        'merchant_name' => 'merchantName',
        'label_required' => 'labelRequired',
        'label_print_time' => 'labelPrintTime',
        'label_url' => 'labelUrl',
        'liability_coverage_cents' => 'liabilityCoverageCents',
        'username' => 'username',
        'delivery_method' => 'deliveryMethod',
        'expected_vehicle_type' => 'expectedVehicleType',
        'actual_vehicle_type' => 'actualVehicleType',
        'cost_breakdown' => 'costBreakdown',
        'total_value' => 'totalValue',
        'pickup_contact_info' => 'pickupContactInfo',
        'proposal_types' => 'proposalTypes',
        'sender_contact_details' => 'senderContactDetails',
        'is_gift' => 'isGift',
        'recipient_message' => 'recipientMessage',
        'additional_properties' => 'additionalProperties',
        'route_order_index' => 'routeOrderIndex',
        'route_info' => 'routeInfo',
        'estimated_pickup_within_store_hours' => 'estimatedPickupWithinStoreHours',
        'requested_sla' => 'requestedSla',
        'schedule_info' => 'scheduleInfo',
        'extra_external_ids' => 'extraExternalIds',
        'is_return' => 'isReturn',
        'simulated_order' => 'simulatedOrder',
        'happiness' => 'happiness',
        'edit_info' => 'editInfo',
        'proposal_label' => 'proposalLabel',
        'is_nationwide' => 'isNationwide',
        'carrier_delivery_url' => 'carrierDeliveryUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_order_id' => 'setExternalOrderId',
        'store_id' => 'setStoreId',
        'store_name' => 'setStoreName',
        'status' => 'setStatus',
        'communicated_pickup' => 'setCommunicatedPickup',
        'communicated_dropoff' => 'setCommunicatedDropoff',
        'actual_pickup' => 'setActualPickup',
        'actual_dropoff' => 'setActualDropoff',
        'pickup_eta' => 'setPickupEta',
        'dropoff_eta' => 'setDropoffEta',
        'courier_location' => 'setCourierLocation',
        'origin' => 'setOrigin',
        'destination' => 'setDestination',
        'customer' => 'setCustomer',
        'delivery_company' => 'setDeliveryCompany',
        'parcels' => 'setParcels',
        'value' => 'setValue',
        'instructions' => 'setInstructions',
        'customer_instructions' => 'setCustomerInstructions',
        'handling' => 'setHandling',
        'proof_of_delivery_requirement' => 'setProofOfDeliveryRequirement',
        'tracking_url' => 'setTrackingUrl',
        'customer_tracking_url' => 'setCustomerTrackingUrl',
        'sender_tracking_url' => 'setSenderTrackingUrl',
        'order_tracking_info' => 'setOrderTrackingInfo',
        'handoff_type' => 'setHandoffType',
        'handoff_info' => 'setHandoffInfo',
        'used_credits' => 'setUsedCredits',
        'proof_of_collection' => 'setProofOfCollection',
        'proof_of_delivery' => 'setProofOfDelivery',
        'notes' => 'setNotes',
        'merchant_name' => 'setMerchantName',
        'label_required' => 'setLabelRequired',
        'label_print_time' => 'setLabelPrintTime',
        'label_url' => 'setLabelUrl',
        'liability_coverage_cents' => 'setLiabilityCoverageCents',
        'username' => 'setUsername',
        'delivery_method' => 'setDeliveryMethod',
        'expected_vehicle_type' => 'setExpectedVehicleType',
        'actual_vehicle_type' => 'setActualVehicleType',
        'cost_breakdown' => 'setCostBreakdown',
        'total_value' => 'setTotalValue',
        'pickup_contact_info' => 'setPickupContactInfo',
        'proposal_types' => 'setProposalTypes',
        'sender_contact_details' => 'setSenderContactDetails',
        'is_gift' => 'setIsGift',
        'recipient_message' => 'setRecipientMessage',
        'additional_properties' => 'setAdditionalProperties',
        'route_order_index' => 'setRouteOrderIndex',
        'route_info' => 'setRouteInfo',
        'estimated_pickup_within_store_hours' => 'setEstimatedPickupWithinStoreHours',
        'requested_sla' => 'setRequestedSla',
        'schedule_info' => 'setScheduleInfo',
        'extra_external_ids' => 'setExtraExternalIds',
        'is_return' => 'setIsReturn',
        'simulated_order' => 'setSimulatedOrder',
        'happiness' => 'setHappiness',
        'edit_info' => 'setEditInfo',
        'proposal_label' => 'setProposalLabel',
        'is_nationwide' => 'setIsNationwide',
        'carrier_delivery_url' => 'setCarrierDeliveryUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_order_id' => 'getExternalOrderId',
        'store_id' => 'getStoreId',
        'store_name' => 'getStoreName',
        'status' => 'getStatus',
        'communicated_pickup' => 'getCommunicatedPickup',
        'communicated_dropoff' => 'getCommunicatedDropoff',
        'actual_pickup' => 'getActualPickup',
        'actual_dropoff' => 'getActualDropoff',
        'pickup_eta' => 'getPickupEta',
        'dropoff_eta' => 'getDropoffEta',
        'courier_location' => 'getCourierLocation',
        'origin' => 'getOrigin',
        'destination' => 'getDestination',
        'customer' => 'getCustomer',
        'delivery_company' => 'getDeliveryCompany',
        'parcels' => 'getParcels',
        'value' => 'getValue',
        'instructions' => 'getInstructions',
        'customer_instructions' => 'getCustomerInstructions',
        'handling' => 'getHandling',
        'proof_of_delivery_requirement' => 'getProofOfDeliveryRequirement',
        'tracking_url' => 'getTrackingUrl',
        'customer_tracking_url' => 'getCustomerTrackingUrl',
        'sender_tracking_url' => 'getSenderTrackingUrl',
        'order_tracking_info' => 'getOrderTrackingInfo',
        'handoff_type' => 'getHandoffType',
        'handoff_info' => 'getHandoffInfo',
        'used_credits' => 'getUsedCredits',
        'proof_of_collection' => 'getProofOfCollection',
        'proof_of_delivery' => 'getProofOfDelivery',
        'notes' => 'getNotes',
        'merchant_name' => 'getMerchantName',
        'label_required' => 'getLabelRequired',
        'label_print_time' => 'getLabelPrintTime',
        'label_url' => 'getLabelUrl',
        'liability_coverage_cents' => 'getLiabilityCoverageCents',
        'username' => 'getUsername',
        'delivery_method' => 'getDeliveryMethod',
        'expected_vehicle_type' => 'getExpectedVehicleType',
        'actual_vehicle_type' => 'getActualVehicleType',
        'cost_breakdown' => 'getCostBreakdown',
        'total_value' => 'getTotalValue',
        'pickup_contact_info' => 'getPickupContactInfo',
        'proposal_types' => 'getProposalTypes',
        'sender_contact_details' => 'getSenderContactDetails',
        'is_gift' => 'getIsGift',
        'recipient_message' => 'getRecipientMessage',
        'additional_properties' => 'getAdditionalProperties',
        'route_order_index' => 'getRouteOrderIndex',
        'route_info' => 'getRouteInfo',
        'estimated_pickup_within_store_hours' => 'getEstimatedPickupWithinStoreHours',
        'requested_sla' => 'getRequestedSla',
        'schedule_info' => 'getScheduleInfo',
        'extra_external_ids' => 'getExtraExternalIds',
        'is_return' => 'getIsReturn',
        'simulated_order' => 'getSimulatedOrder',
        'happiness' => 'getHappiness',
        'edit_info' => 'getEditInfo',
        'proposal_label' => 'getProposalLabel',
        'is_nationwide' => 'getIsNationwide',
        'carrier_delivery_url' => 'getCarrierDeliveryUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HANDLING_ALCOHOL = 'alcohol';
    public const HANDLING_CAKE = 'cake';
    public const HANDLING_FLOWERS = 'flowers';
    public const HANDLING_FLUIDS = 'fluids';
    public const HANDLING_FRAGILE = 'fragile';
    public const HANDLING_HOT = 'hot';
    public const HANDLING_PERISHABLE = 'perishable';
    public const HANDLING_PRESCRIPTION_DRUGS = 'prescriptionDrugs';
    public const HANDLING_REQUIRES_REFRIGERATION = 'requiresRefrigeration';
    public const HANDLING_RIGHT_SIDE_UP = 'rightSideUp';
    public const HANDLING_TEMPERATURE_CONTROLLED = 'temperatureControlled';
    public const PROOF_OF_DELIVERY_REQUIREMENT_SIGNATURE = 'signature';
    public const PROOF_OF_DELIVERY_REQUIREMENT_PARCEL_PHOTO = 'parcelPhoto';
    public const PROOF_OF_DELIVERY_REQUIREMENT_PHOTO_ID = 'photoId';
    public const PROOF_OF_DELIVERY_REQUIREMENT_ANY = 'any';
    public const PROOF_OF_DELIVERY_REQUIREMENT_NONE = 'none';
    public const HANDOFF_TYPE_NONE = 'none';
    public const HANDOFF_TYPE_RECEIVE = 'receive';
    public const HANDOFF_TYPE_HANDOFF = 'handoff';
    public const DELIVERY_METHOD_DELIVERY = 'delivery';
    public const DELIVERY_METHOD_STORE_PICKUP = 'storePickup';
    public const EXPECTED_VEHICLE_TYPE_PUSHBIKE = 'pushbike';
    public const EXPECTED_VEHICLE_TYPE_MOTORBIKE = 'motorbike';
    public const EXPECTED_VEHICLE_TYPE_CARGO_BIKE = 'cargo_bike';
    public const EXPECTED_VEHICLE_TYPE_CAR = 'car';
    public const EXPECTED_VEHICLE_TYPE_SMALL_VAN = 'small_van';
    public const EXPECTED_VEHICLE_TYPE_MEDIUM_VAN = 'medium_van';
    public const EXPECTED_VEHICLE_TYPE_LARGE_VAN = 'large_van';
    public const EXPECTED_VEHICLE_TYPE_XLARGE_VAN = 'xlarge_van';
    public const ACTUAL_VEHICLE_TYPE_PUSHBIKE = 'pushbike';
    public const ACTUAL_VEHICLE_TYPE_MOTORBIKE = 'motorbike';
    public const ACTUAL_VEHICLE_TYPE_CARGO_BIKE = 'cargo_bike';
    public const ACTUAL_VEHICLE_TYPE_CAR = 'car';
    public const ACTUAL_VEHICLE_TYPE_SMALL_VAN = 'small_van';
    public const ACTUAL_VEHICLE_TYPE_MEDIUM_VAN = 'medium_van';
    public const ACTUAL_VEHICLE_TYPE_LARGE_VAN = 'large_van';
    public const ACTUAL_VEHICLE_TYPE_XLARGE_VAN = 'xlarge_van';
    public const PROPOSAL_TYPES_GREEN = 'Green';
    public const PROPOSAL_TYPES_FLEXIBLE = 'flexible';
    public const PROPOSAL_TYPES_STORE_PICKUP = 'storePickup';
    public const PROPOSAL_TYPES_OWN_FLEET = 'ownFleet';
    public const PROPOSAL_TYPES_COLLECTION_POINT = 'CollectionPoint';
    public const REQUESTED_SLA_EXPRESS = 'express';
    public const REQUESTED_SLA_SAME_DAY = 'sameDay';
    public const REQUESTED_SLA_NEXT_DAY = 'nextDay';
    public const REQUESTED_SLA_TWO_OR_MORE = 'twoOrMore';
    public const PROPOSAL_LABEL_EARLY_MORNING = 'earlyMorning';
    public const PROPOSAL_LABEL_MORNING = 'morning';
    public const PROPOSAL_LABEL_NOON = 'noon';
    public const PROPOSAL_LABEL_AFTERNOON = 'afternoon';
    public const PROPOSAL_LABEL_EVENING = 'evening';
    public const PROPOSAL_LABEL_ALL_DAY = 'allDay';
    public const PROPOSAL_LABEL_EXPRESS = 'express';
    public const PROPOSAL_LABEL_FLEXIBLE = 'flexible';
    public const PROPOSAL_LABEL_STORE_PICKUP = 'storePickup';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandlingAllowableValues()
    {
        return [
            self::HANDLING_ALCOHOL,
            self::HANDLING_CAKE,
            self::HANDLING_FLOWERS,
            self::HANDLING_FLUIDS,
            self::HANDLING_FRAGILE,
            self::HANDLING_HOT,
            self::HANDLING_PERISHABLE,
            self::HANDLING_PRESCRIPTION_DRUGS,
            self::HANDLING_REQUIRES_REFRIGERATION,
            self::HANDLING_RIGHT_SIDE_UP,
            self::HANDLING_TEMPERATURE_CONTROLLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProofOfDeliveryRequirementAllowableValues()
    {
        return [
            self::PROOF_OF_DELIVERY_REQUIREMENT_SIGNATURE,
            self::PROOF_OF_DELIVERY_REQUIREMENT_PARCEL_PHOTO,
            self::PROOF_OF_DELIVERY_REQUIREMENT_PHOTO_ID,
            self::PROOF_OF_DELIVERY_REQUIREMENT_ANY,
            self::PROOF_OF_DELIVERY_REQUIREMENT_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandoffTypeAllowableValues()
    {
        return [
            self::HANDOFF_TYPE_NONE,
            self::HANDOFF_TYPE_RECEIVE,
            self::HANDOFF_TYPE_HANDOFF,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryMethodAllowableValues()
    {
        return [
            self::DELIVERY_METHOD_DELIVERY,
            self::DELIVERY_METHOD_STORE_PICKUP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpectedVehicleTypeAllowableValues()
    {
        return [
            self::EXPECTED_VEHICLE_TYPE_PUSHBIKE,
            self::EXPECTED_VEHICLE_TYPE_MOTORBIKE,
            self::EXPECTED_VEHICLE_TYPE_CARGO_BIKE,
            self::EXPECTED_VEHICLE_TYPE_CAR,
            self::EXPECTED_VEHICLE_TYPE_SMALL_VAN,
            self::EXPECTED_VEHICLE_TYPE_MEDIUM_VAN,
            self::EXPECTED_VEHICLE_TYPE_LARGE_VAN,
            self::EXPECTED_VEHICLE_TYPE_XLARGE_VAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActualVehicleTypeAllowableValues()
    {
        return [
            self::ACTUAL_VEHICLE_TYPE_PUSHBIKE,
            self::ACTUAL_VEHICLE_TYPE_MOTORBIKE,
            self::ACTUAL_VEHICLE_TYPE_CARGO_BIKE,
            self::ACTUAL_VEHICLE_TYPE_CAR,
            self::ACTUAL_VEHICLE_TYPE_SMALL_VAN,
            self::ACTUAL_VEHICLE_TYPE_MEDIUM_VAN,
            self::ACTUAL_VEHICLE_TYPE_LARGE_VAN,
            self::ACTUAL_VEHICLE_TYPE_XLARGE_VAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProposalTypesAllowableValues()
    {
        return [
            self::PROPOSAL_TYPES_GREEN,
            self::PROPOSAL_TYPES_FLEXIBLE,
            self::PROPOSAL_TYPES_STORE_PICKUP,
            self::PROPOSAL_TYPES_OWN_FLEET,
            self::PROPOSAL_TYPES_COLLECTION_POINT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestedSlaAllowableValues()
    {
        return [
            self::REQUESTED_SLA_EXPRESS,
            self::REQUESTED_SLA_SAME_DAY,
            self::REQUESTED_SLA_NEXT_DAY,
            self::REQUESTED_SLA_TWO_OR_MORE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProposalLabelAllowableValues()
    {
        return [
            self::PROPOSAL_LABEL_EARLY_MORNING,
            self::PROPOSAL_LABEL_MORNING,
            self::PROPOSAL_LABEL_NOON,
            self::PROPOSAL_LABEL_AFTERNOON,
            self::PROPOSAL_LABEL_EVENING,
            self::PROPOSAL_LABEL_ALL_DAY,
            self::PROPOSAL_LABEL_EXPRESS,
            self::PROPOSAL_LABEL_FLEXIBLE,
            self::PROPOSAL_LABEL_STORE_PICKUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_order_id', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('store_name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('communicated_pickup', $data ?? [], null);
        $this->setIfExists('communicated_dropoff', $data ?? [], null);
        $this->setIfExists('actual_pickup', $data ?? [], null);
        $this->setIfExists('actual_dropoff', $data ?? [], null);
        $this->setIfExists('pickup_eta', $data ?? [], null);
        $this->setIfExists('dropoff_eta', $data ?? [], null);
        $this->setIfExists('courier_location', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('delivery_company', $data ?? [], null);
        $this->setIfExists('parcels', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('customer_instructions', $data ?? [], null);
        $this->setIfExists('handling', $data ?? [], null);
        $this->setIfExists('proof_of_delivery_requirement', $data ?? [], null);
        $this->setIfExists('tracking_url', $data ?? [], null);
        $this->setIfExists('customer_tracking_url', $data ?? [], null);
        $this->setIfExists('sender_tracking_url', $data ?? [], null);
        $this->setIfExists('order_tracking_info', $data ?? [], null);
        $this->setIfExists('handoff_type', $data ?? [], null);
        $this->setIfExists('handoff_info', $data ?? [], null);
        $this->setIfExists('used_credits', $data ?? [], null);
        $this->setIfExists('proof_of_collection', $data ?? [], null);
        $this->setIfExists('proof_of_delivery', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('merchant_name', $data ?? [], null);
        $this->setIfExists('label_required', $data ?? [], null);
        $this->setIfExists('label_print_time', $data ?? [], null);
        $this->setIfExists('label_url', $data ?? [], null);
        $this->setIfExists('liability_coverage_cents', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('delivery_method', $data ?? [], null);
        $this->setIfExists('expected_vehicle_type', $data ?? [], null);
        $this->setIfExists('actual_vehicle_type', $data ?? [], null);
        $this->setIfExists('cost_breakdown', $data ?? [], null);
        $this->setIfExists('total_value', $data ?? [], null);
        $this->setIfExists('pickup_contact_info', $data ?? [], null);
        $this->setIfExists('proposal_types', $data ?? [], null);
        $this->setIfExists('sender_contact_details', $data ?? [], null);
        $this->setIfExists('is_gift', $data ?? [], false);
        $this->setIfExists('recipient_message', $data ?? [], null);
        $this->setIfExists('additional_properties', $data ?? [], null);
        $this->setIfExists('route_order_index', $data ?? [], null);
        $this->setIfExists('route_info', $data ?? [], null);
        $this->setIfExists('estimated_pickup_within_store_hours', $data ?? [], null);
        $this->setIfExists('requested_sla', $data ?? [], null);
        $this->setIfExists('schedule_info', $data ?? [], null);
        $this->setIfExists('extra_external_ids', $data ?? [], null);
        $this->setIfExists('is_return', $data ?? [], null);
        $this->setIfExists('simulated_order', $data ?? [], false);
        $this->setIfExists('happiness', $data ?? [], null);
        $this->setIfExists('edit_info', $data ?? [], null);
        $this->setIfExists('proposal_label', $data ?? [], null);
        $this->setIfExists('is_nationwide', $data ?? [], null);
        $this->setIfExists('carrier_delivery_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['external_order_id'] === null) {
            $invalidProperties[] = "'external_order_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['communicated_pickup'] === null) {
            $invalidProperties[] = "'communicated_pickup' can't be null";
        }
        if ($this->container['communicated_dropoff'] === null) {
            $invalidProperties[] = "'communicated_dropoff' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['parcels'] === null) {
            $invalidProperties[] = "'parcels' can't be null";
        }
        if ((count($this->container['parcels']) < 1)) {
            $invalidProperties[] = "invalid value for 'parcels', number of items must be greater than or equal to 1.";
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['handoff_type'] === null) {
            $invalidProperties[] = "'handoff_type' can't be null";
        }
        $allowedValues = $this->getHandoffTypeAllowableValues();
        if (!is_null($this->container['handoff_type']) && !in_array($this->container['handoff_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'handoff_type', must be one of '%s'",
                $this->container['handoff_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['used_credits'] === null) {
            $invalidProperties[] = "'used_credits' can't be null";
        }
        if ($this->container['merchant_name'] === null) {
            $invalidProperties[] = "'merchant_name' can't be null";
        }
        if ($this->container['label_required'] === null) {
            $invalidProperties[] = "'label_required' can't be null";
        }
        if ($this->container['delivery_method'] === null) {
            $invalidProperties[] = "'delivery_method' can't be null";
        }
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($this->container['delivery_method']) && !in_array($this->container['delivery_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_method', must be one of '%s'",
                $this->container['delivery_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExpectedVehicleTypeAllowableValues();
        if (!is_null($this->container['expected_vehicle_type']) && !in_array($this->container['expected_vehicle_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expected_vehicle_type', must be one of '%s'",
                $this->container['expected_vehicle_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActualVehicleTypeAllowableValues();
        if (!is_null($this->container['actual_vehicle_type']) && !in_array($this->container['actual_vehicle_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actual_vehicle_type', must be one of '%s'",
                $this->container['actual_vehicle_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cost_breakdown'] === null) {
            $invalidProperties[] = "'cost_breakdown' can't be null";
        }
        if ($this->container['total_value'] === null) {
            $invalidProperties[] = "'total_value' can't be null";
        }
        if ($this->container['estimated_pickup_within_store_hours'] === null) {
            $invalidProperties[] = "'estimated_pickup_within_store_hours' can't be null";
        }
        $allowedValues = $this->getRequestedSlaAllowableValues();
        if (!is_null($this->container['requested_sla']) && !in_array($this->container['requested_sla'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'requested_sla', must be one of '%s'",
                $this->container['requested_sla'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['simulated_order'] === null) {
            $invalidProperties[] = "'simulated_order' can't be null";
        }
        $allowedValues = $this->getProposalLabelAllowableValues();
        if (!is_null($this->container['proposal_label']) && !in_array($this->container['proposal_label'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'proposal_label', must be one of '%s'",
                $this->container['proposal_label'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the order
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_order_id
     *
     * @return string
     */
    public function getExternalOrderId()
    {
        return $this->container['external_order_id'];
    }

    /**
     * Sets external_order_id
     *
     * @param string $external_order_id An external order ID attached to this order
     *
     * @return self
     */
    public function setExternalOrderId($external_order_id)
    {
        if (is_null($external_order_id)) {
            throw new \InvalidArgumentException('non-nullable external_order_id cannot be null');
        }
        $this->container['external_order_id'] = $external_order_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id The ID of the e-commerce store for this order (if exists)
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string|null
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string|null $store_name The name of the store for this order (if exists)
     *
     * @return self
     */
    public function setStoreName($store_name)
    {
        if (is_null($store_name)) {
            throw new \InvalidArgumentException('non-nullable store_name cannot be null');
        }
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets communicated_pickup
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot
     */
    public function getCommunicatedPickup()
    {
        return $this->container['communicated_pickup'];
    }

    /**
     * Sets communicated_pickup
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot $communicated_pickup communicated_pickup
     *
     * @return self
     */
    public function setCommunicatedPickup($communicated_pickup)
    {
        if (is_null($communicated_pickup)) {
            throw new \InvalidArgumentException('non-nullable communicated_pickup cannot be null');
        }
        $this->container['communicated_pickup'] = $communicated_pickup;

        return $this;
    }

    /**
     * Gets communicated_dropoff
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot
     */
    public function getCommunicatedDropoff()
    {
        return $this->container['communicated_dropoff'];
    }

    /**
     * Sets communicated_dropoff
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestDestinationLocationsInnerDeliverySlot $communicated_dropoff communicated_dropoff
     *
     * @return self
     */
    public function setCommunicatedDropoff($communicated_dropoff)
    {
        if (is_null($communicated_dropoff)) {
            throw new \InvalidArgumentException('non-nullable communicated_dropoff cannot be null');
        }
        $this->container['communicated_dropoff'] = $communicated_dropoff;

        return $this;
    }

    /**
     * Gets actual_pickup
     *
     * @return \DateTime|null
     */
    public function getActualPickup()
    {
        return $this->container['actual_pickup'];
    }

    /**
     * Sets actual_pickup
     *
     * @param \DateTime|null $actual_pickup The actual pickup time in ISO8601 format (for packages picked up)
     *
     * @return self
     */
    public function setActualPickup($actual_pickup)
    {
        if (is_null($actual_pickup)) {
            throw new \InvalidArgumentException('non-nullable actual_pickup cannot be null');
        }
        $this->container['actual_pickup'] = $actual_pickup;

        return $this;
    }

    /**
     * Gets actual_dropoff
     *
     * @return \DateTime|null
     */
    public function getActualDropoff()
    {
        return $this->container['actual_dropoff'];
    }

    /**
     * Sets actual_dropoff
     *
     * @param \DateTime|null $actual_dropoff The actual dropoff time in ISO8601 format (for packages dropped off)
     *
     * @return self
     */
    public function setActualDropoff($actual_dropoff)
    {
        if (is_null($actual_dropoff)) {
            throw new \InvalidArgumentException('non-nullable actual_dropoff cannot be null');
        }
        $this->container['actual_dropoff'] = $actual_dropoff;

        return $this;
    }

    /**
     * Gets pickup_eta
     *
     * @return \DateTime|null
     */
    public function getPickupEta()
    {
        return $this->container['pickup_eta'];
    }

    /**
     * Sets pickup_eta
     *
     * @param \DateTime|null $pickup_eta The expected pickup time (if known)
     *
     * @return self
     */
    public function setPickupEta($pickup_eta)
    {
        if (is_null($pickup_eta)) {
            throw new \InvalidArgumentException('non-nullable pickup_eta cannot be null');
        }
        $this->container['pickup_eta'] = $pickup_eta;

        return $this;
    }

    /**
     * Gets dropoff_eta
     *
     * @return \DateTime|null
     */
    public function getDropoffEta()
    {
        return $this->container['dropoff_eta'];
    }

    /**
     * Sets dropoff_eta
     *
     * @param \DateTime|null $dropoff_eta The expected dropoff time (if known)
     *
     * @return self
     */
    public function setDropoffEta($dropoff_eta)
    {
        if (is_null($dropoff_eta)) {
            throw new \InvalidArgumentException('non-nullable dropoff_eta cannot be null');
        }
        $this->container['dropoff_eta'] = $dropoff_eta;

        return $this;
    }

    /**
     * Gets courier_location
     *
     * @return \OpenAPI\Client\Model\OrderPost201ResponseCourierLocation|null
     */
    public function getCourierLocation()
    {
        return $this->container['courier_location'];
    }

    /**
     * Sets courier_location
     *
     * @param \OpenAPI\Client\Model\OrderPost201ResponseCourierLocation|null $courier_location courier_location
     *
     * @return self
     */
    public function setCourierLocation($courier_location)
    {
        if (is_null($courier_location)) {
            throw new \InvalidArgumentException('non-nullable courier_location cannot be null');
        }
        $this->container['courier_location'] = $courier_location;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestPickupInfoOneOf1InnerAddress $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets delivery_company
     *
     * @return string|null
     */
    public function getDeliveryCompany()
    {
        return $this->container['delivery_company'];
    }

    /**
     * Sets delivery_company
     *
     * @param string|null $delivery_company The company that will perform the delivery (if known)
     *
     * @return self
     */
    public function setDeliveryCompany($delivery_company)
    {
        if (is_null($delivery_company)) {
            throw new \InvalidArgumentException('non-nullable delivery_company cannot be null');
        }
        $this->container['delivery_company'] = $delivery_company;

        return $this;
    }

    /**
     * Gets parcels
     *
     * @return \OpenAPI\Client\Model\OrderPost201ResponseParcelsInner[]
     */
    public function getParcels()
    {
        return $this->container['parcels'];
    }

    /**
     * Sets parcels
     *
     * @param \OpenAPI\Client\Model\OrderPost201ResponseParcelsInner[] $parcels The list of parcels in this order
     *
     * @return self
     */
    public function setParcels($parcels)
    {
        if (is_null($parcels)) {
            throw new \InvalidArgumentException('non-nullable parcels cannot be null');
        }


        if ((count($parcels) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parcels when calling OrderPost201Response., number of items must be greater than or equal to 1.');
        }
        $this->container['parcels'] = $parcels;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions Additional handling instructions for the packages
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets customer_instructions
     *
     * @return string|null
     */
    public function getCustomerInstructions()
    {
        return $this->container['customer_instructions'];
    }

    /**
     * Sets customer_instructions
     *
     * @param string|null $customer_instructions Additional handling instructions for the packages added by the customer
     *
     * @return self
     */
    public function setCustomerInstructions($customer_instructions)
    {
        if (is_null($customer_instructions)) {
            throw new \InvalidArgumentException('non-nullable customer_instructions cannot be null');
        }
        $this->container['customer_instructions'] = $customer_instructions;

        return $this;
    }

    /**
     * Gets handling
     *
     * @return string[]|null
     */
    public function getHandling()
    {
        return $this->container['handling'];
    }

    /**
     * Sets handling
     *
     * @param string[]|null $handling Handling instructions for a parcel
     *
     * @return self
     */
    public function setHandling($handling)
    {
        if (is_null($handling)) {
            throw new \InvalidArgumentException('non-nullable handling cannot be null');
        }
        $allowedValues = $this->getHandlingAllowableValues();
        if (array_diff($handling, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'handling', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handling'] = $handling;

        return $this;
    }

    /**
     * Gets proof_of_delivery_requirement
     *
     * @return string[]|null
     */
    public function getProofOfDeliveryRequirement()
    {
        return $this->container['proof_of_delivery_requirement'];
    }

    /**
     * Sets proof_of_delivery_requirement
     *
     * @param string[]|null $proof_of_delivery_requirement Proof of delivery requirements for a parcel
     *
     * @return self
     */
    public function setProofOfDeliveryRequirement($proof_of_delivery_requirement)
    {
        if (is_null($proof_of_delivery_requirement)) {
            throw new \InvalidArgumentException('non-nullable proof_of_delivery_requirement cannot be null');
        }
        $allowedValues = $this->getProofOfDeliveryRequirementAllowableValues();
        if (array_diff($proof_of_delivery_requirement, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'proof_of_delivery_requirement', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proof_of_delivery_requirement'] = $proof_of_delivery_requirement;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url The carrier tracking URL for this order (if exists)
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {
        if (is_null($tracking_url)) {
            throw new \InvalidArgumentException('non-nullable tracking_url cannot be null');
        }
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets customer_tracking_url
     *
     * @return string|null
     */
    public function getCustomerTrackingUrl()
    {
        return $this->container['customer_tracking_url'];
    }

    /**
     * Sets customer_tracking_url
     *
     * @param string|null $customer_tracking_url The Evermile customer tracking URL for this order (if exists)
     *
     * @return self
     */
    public function setCustomerTrackingUrl($customer_tracking_url)
    {
        if (is_null($customer_tracking_url)) {
            throw new \InvalidArgumentException('non-nullable customer_tracking_url cannot be null');
        }
        $this->container['customer_tracking_url'] = $customer_tracking_url;

        return $this;
    }

    /**
     * Gets sender_tracking_url
     *
     * @return string|null
     */
    public function getSenderTrackingUrl()
    {
        return $this->container['sender_tracking_url'];
    }

    /**
     * Sets sender_tracking_url
     *
     * @param string|null $sender_tracking_url The sender tracking URL for this order (if exists)
     *
     * @return self
     */
    public function setSenderTrackingUrl($sender_tracking_url)
    {
        if (is_null($sender_tracking_url)) {
            throw new \InvalidArgumentException('non-nullable sender_tracking_url cannot be null');
        }
        $this->container['sender_tracking_url'] = $sender_tracking_url;

        return $this;
    }

    /**
     * Gets order_tracking_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo|null
     */
    public function getOrderTrackingInfo()
    {
        return $this->container['order_tracking_info'];
    }

    /**
     * Sets order_tracking_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo|null $order_tracking_info order_tracking_info
     *
     * @return self
     */
    public function setOrderTrackingInfo($order_tracking_info)
    {
        if (is_null($order_tracking_info)) {
            throw new \InvalidArgumentException('non-nullable order_tracking_info cannot be null');
        }
        $this->container['order_tracking_info'] = $order_tracking_info;

        return $this;
    }

    /**
     * Gets handoff_type
     *
     * @return string
     */
    public function getHandoffType()
    {
        return $this->container['handoff_type'];
    }

    /**
     * Sets handoff_type
     *
     * @param string $handoff_type handoff_type
     *
     * @return self
     */
    public function setHandoffType($handoff_type)
    {
        if (is_null($handoff_type)) {
            throw new \InvalidArgumentException('non-nullable handoff_type cannot be null');
        }
        $allowedValues = $this->getHandoffTypeAllowableValues();
        if (!in_array($handoff_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'handoff_type', must be one of '%s'",
                    $handoff_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handoff_type'] = $handoff_type;

        return $this;
    }

    /**
     * Gets handoff_info
     *
     * @return \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo|null
     */
    public function getHandoffInfo()
    {
        return $this->container['handoff_info'];
    }

    /**
     * Sets handoff_info
     *
     * @param \OpenAPI\Client\Model\QuotePost200ResponseDateProposalsInnerProposalsInnerProposalHandoffInfo|null $handoff_info handoff_info
     *
     * @return self
     */
    public function setHandoffInfo($handoff_info)
    {
        if (is_null($handoff_info)) {
            throw new \InvalidArgumentException('non-nullable handoff_info cannot be null');
        }
        $this->container['handoff_info'] = $handoff_info;

        return $this;
    }

    /**
     * Gets used_credits
     *
     * @return bool
     */
    public function getUsedCredits()
    {
        return $this->container['used_credits'];
    }

    /**
     * Sets used_credits
     *
     * @param bool $used_credits Whether credits were used to pay for this order
     *
     * @return self
     */
    public function setUsedCredits($used_credits)
    {
        if (is_null($used_credits)) {
            throw new \InvalidArgumentException('non-nullable used_credits cannot be null');
        }
        $this->container['used_credits'] = $used_credits;

        return $this;
    }

    /**
     * Gets proof_of_collection
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null
     */
    public function getProofOfCollection()
    {
        return $this->container['proof_of_collection'];
    }

    /**
     * Sets proof_of_collection
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null $proof_of_collection Proof of collection for an order
     *
     * @return self
     */
    public function setProofOfCollection($proof_of_collection)
    {
        if (is_null($proof_of_collection)) {
            throw new \InvalidArgumentException('non-nullable proof_of_collection cannot be null');
        }
        $this->container['proof_of_collection'] = $proof_of_collection;

        return $this;
    }

    /**
     * Gets proof_of_delivery
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null
     */
    public function getProofOfDelivery()
    {
        return $this->container['proof_of_delivery'];
    }

    /**
     * Sets proof_of_delivery
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerProofOfCollectionInner[]|null $proof_of_delivery Proof of delivery for an order
     *
     * @return self
     */
    public function setProofOfDelivery($proof_of_delivery)
    {
        if (is_null($proof_of_delivery)) {
            throw new \InvalidArgumentException('non-nullable proof_of_delivery cannot be null');
        }
        $this->container['proof_of_delivery'] = $proof_of_delivery;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[]|null $notes Courier notes from each delivery in this order
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string $merchant_name The name of the merchant for this order
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        if (is_null($merchant_name)) {
            throw new \InvalidArgumentException('non-nullable merchant_name cannot be null');
        }
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets label_required
     *
     * @return bool
     */
    public function getLabelRequired()
    {
        return $this->container['label_required'];
    }

    /**
     * Sets label_required
     *
     * @param bool $label_required Whether label is required
     *
     * @return self
     */
    public function setLabelRequired($label_required)
    {
        if (is_null($label_required)) {
            throw new \InvalidArgumentException('non-nullable label_required cannot be null');
        }
        $this->container['label_required'] = $label_required;

        return $this;
    }

    /**
     * Gets label_print_time
     *
     * @return \DateTime|null
     */
    public function getLabelPrintTime()
    {
        return $this->container['label_print_time'];
    }

    /**
     * Sets label_print_time
     *
     * @param \DateTime|null $label_print_time The last time a label was printed in ISO8601 format
     *
     * @return self
     */
    public function setLabelPrintTime($label_print_time)
    {
        if (is_null($label_print_time)) {
            throw new \InvalidArgumentException('non-nullable label_print_time cannot be null');
        }
        $this->container['label_print_time'] = $label_print_time;

        return $this;
    }

    /**
     * Gets label_url
     *
     * @return string|null
     */
    public function getLabelUrl()
    {
        return $this->container['label_url'];
    }

    /**
     * Sets label_url
     *
     * @param string|null $label_url The label URL (if one exists)
     *
     * @return self
     */
    public function setLabelUrl($label_url)
    {
        if (is_null($label_url)) {
            throw new \InvalidArgumentException('non-nullable label_url cannot be null');
        }
        $this->container['label_url'] = $label_url;

        return $this;
    }

    /**
     * Gets liability_coverage_cents
     *
     * @return int|null
     */
    public function getLiabilityCoverageCents()
    {
        return $this->container['liability_coverage_cents'];
    }

    /**
     * Sets liability_coverage_cents
     *
     * @param int|null $liability_coverage_cents The extended liability coverage in cents
     *
     * @return self
     */
    public function setLiabilityCoverageCents($liability_coverage_cents)
    {
        if (is_null($liability_coverage_cents)) {
            throw new \InvalidArgumentException('non-nullable liability_coverage_cents cannot be null');
        }
        $this->container['liability_coverage_cents'] = $liability_coverage_cents;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The name of the user who created the order
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets delivery_method
     *
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param string $delivery_method The delivery method
     *
     * @return self
     */
    public function setDeliveryMethod($delivery_method)
    {
        if (is_null($delivery_method)) {
            throw new \InvalidArgumentException('non-nullable delivery_method cannot be null');
        }
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!in_array($delivery_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_method', must be one of '%s'",
                    $delivery_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }

    /**
     * Gets expected_vehicle_type
     *
     * @return string|null
     */
    public function getExpectedVehicleType()
    {
        return $this->container['expected_vehicle_type'];
    }

    /**
     * Sets expected_vehicle_type
     *
     * @param string|null $expected_vehicle_type expected_vehicle_type
     *
     * @return self
     */
    public function setExpectedVehicleType($expected_vehicle_type)
    {
        if (is_null($expected_vehicle_type)) {
            throw new \InvalidArgumentException('non-nullable expected_vehicle_type cannot be null');
        }
        $allowedValues = $this->getExpectedVehicleTypeAllowableValues();
        if (!in_array($expected_vehicle_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expected_vehicle_type', must be one of '%s'",
                    $expected_vehicle_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expected_vehicle_type'] = $expected_vehicle_type;

        return $this;
    }

    /**
     * Gets actual_vehicle_type
     *
     * @return string|null
     */
    public function getActualVehicleType()
    {
        return $this->container['actual_vehicle_type'];
    }

    /**
     * Sets actual_vehicle_type
     *
     * @param string|null $actual_vehicle_type actual_vehicle_type
     *
     * @return self
     */
    public function setActualVehicleType($actual_vehicle_type)
    {
        if (is_null($actual_vehicle_type)) {
            throw new \InvalidArgumentException('non-nullable actual_vehicle_type cannot be null');
        }
        $allowedValues = $this->getActualVehicleTypeAllowableValues();
        if (!in_array($actual_vehicle_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actual_vehicle_type', must be one of '%s'",
                    $actual_vehicle_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actual_vehicle_type'] = $actual_vehicle_type;

        return $this;
    }

    /**
     * Gets cost_breakdown
     *
     * @return \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInner[]
     */
    public function getCostBreakdown()
    {
        return $this->container['cost_breakdown'];
    }

    /**
     * Sets cost_breakdown
     *
     * @param \OpenAPI\Client\Model\OrderPost201ResponseCostBreakdownInner[] $cost_breakdown The cost breakdown for an order
     *
     * @return self
     */
    public function setCostBreakdown($cost_breakdown)
    {
        if (is_null($cost_breakdown)) {
            throw new \InvalidArgumentException('non-nullable cost_breakdown cannot be null');
        }
        $this->container['cost_breakdown'] = $cost_breakdown;

        return $this;
    }

    /**
     * Gets total_value
     *
     * @return \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue
     */
    public function getTotalValue()
    {
        return $this->container['total_value'];
    }

    /**
     * Sets total_value
     *
     * @param \OpenAPI\Client\Model\QuotePostRequestParcelsInnerItemsListInnerValue $total_value total_value
     *
     * @return self
     */
    public function setTotalValue($total_value)
    {
        if (is_null($total_value)) {
            throw new \InvalidArgumentException('non-nullable total_value cannot be null');
        }
        $this->container['total_value'] = $total_value;

        return $this;
    }

    /**
     * Gets pickup_contact_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer|null
     */
    public function getPickupContactInfo()
    {
        return $this->container['pickup_contact_info'];
    }

    /**
     * Sets pickup_contact_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerCustomer|null $pickup_contact_info pickup_contact_info
     *
     * @return self
     */
    public function setPickupContactInfo($pickup_contact_info)
    {
        if (is_null($pickup_contact_info)) {
            throw new \InvalidArgumentException('non-nullable pickup_contact_info cannot be null');
        }
        $this->container['pickup_contact_info'] = $pickup_contact_info;

        return $this;
    }

    /**
     * Gets proposal_types
     *
     * @return string[]|null
     */
    public function getProposalTypes()
    {
        return $this->container['proposal_types'];
    }

    /**
     * Sets proposal_types
     *
     * @param string[]|null $proposal_types proposal_types
     *
     * @return self
     */
    public function setProposalTypes($proposal_types)
    {
        if (is_null($proposal_types)) {
            throw new \InvalidArgumentException('non-nullable proposal_types cannot be null');
        }
        $allowedValues = $this->getProposalTypesAllowableValues();
        if (array_diff($proposal_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'proposal_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proposal_types'] = $proposal_types;

        return $this;
    }

    /**
     * Gets sender_contact_details
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails|null
     */
    public function getSenderContactDetails()
    {
        return $this->container['sender_contact_details'];
    }

    /**
     * Sets sender_contact_details
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerSenderContactDetails|null $sender_contact_details sender_contact_details
     *
     * @return self
     */
    public function setSenderContactDetails($sender_contact_details)
    {
        if (is_null($sender_contact_details)) {
            throw new \InvalidArgumentException('non-nullable sender_contact_details cannot be null');
        }
        $this->container['sender_contact_details'] = $sender_contact_details;

        return $this;
    }

    /**
     * Gets is_gift
     *
     * @return bool|null
     */
    public function getIsGift()
    {
        return $this->container['is_gift'];
    }

    /**
     * Sets is_gift
     *
     * @param bool|null $is_gift Whether this delivery is a gift
     *
     * @return self
     */
    public function setIsGift($is_gift)
    {
        if (is_null($is_gift)) {
            throw new \InvalidArgumentException('non-nullable is_gift cannot be null');
        }
        $this->container['is_gift'] = $is_gift;

        return $this;
    }

    /**
     * Gets recipient_message
     *
     * @return string|null
     */
    public function getRecipientMessage()
    {
        return $this->container['recipient_message'];
    }

    /**
     * Sets recipient_message
     *
     * @param string|null $recipient_message Additional message for the recipient
     *
     * @return self
     */
    public function setRecipientMessage($recipient_message)
    {
        if (is_null($recipient_message)) {
            throw new \InvalidArgumentException('non-nullable recipient_message cannot be null');
        }
        $this->container['recipient_message'] = $recipient_message;

        return $this;
    }

    /**
     * Gets additional_properties
     *
     * @return array<string,mixed>|null
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     *
     * @param array<string,mixed>|null $additional_properties Additional properties for the order
     *
     * @return self
     */
    public function setAdditionalProperties($additional_properties)
    {
        if (is_null($additional_properties)) {
            throw new \InvalidArgumentException('non-nullable additional_properties cannot be null');
        }
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets route_order_index
     *
     * @return int|null
     */
    public function getRouteOrderIndex()
    {
        return $this->container['route_order_index'];
    }

    /**
     * Sets route_order_index
     *
     * @param int|null $route_order_index The index of the order in the route
     *
     * @return self
     */
    public function setRouteOrderIndex($route_order_index)
    {
        if (is_null($route_order_index)) {
            throw new \InvalidArgumentException('non-nullable route_order_index cannot be null');
        }
        $this->container['route_order_index'] = $route_order_index;

        return $this;
    }

    /**
     * Gets route_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerRouteInfo|null
     */
    public function getRouteInfo()
    {
        return $this->container['route_info'];
    }

    /**
     * Sets route_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerRouteInfo|null $route_info route_info
     *
     * @return self
     */
    public function setRouteInfo($route_info)
    {
        if (is_null($route_info)) {
            throw new \InvalidArgumentException('non-nullable route_info cannot be null');
        }
        $this->container['route_info'] = $route_info;

        return $this;
    }

    /**
     * Gets estimated_pickup_within_store_hours
     *
     * @return bool
     */
    public function getEstimatedPickupWithinStoreHours()
    {
        return $this->container['estimated_pickup_within_store_hours'];
    }

    /**
     * Sets estimated_pickup_within_store_hours
     *
     * @param bool $estimated_pickup_within_store_hours Whether the estimated pickup is within store hours
     *
     * @return self
     */
    public function setEstimatedPickupWithinStoreHours($estimated_pickup_within_store_hours)
    {
        if (is_null($estimated_pickup_within_store_hours)) {
            throw new \InvalidArgumentException('non-nullable estimated_pickup_within_store_hours cannot be null');
        }
        $this->container['estimated_pickup_within_store_hours'] = $estimated_pickup_within_store_hours;

        return $this;
    }

    /**
     * Gets requested_sla
     *
     * @return string|null
     */
    public function getRequestedSla()
    {
        return $this->container['requested_sla'];
    }

    /**
     * Sets requested_sla
     *
     * @param string|null $requested_sla requested_sla
     *
     * @return self
     */
    public function setRequestedSla($requested_sla)
    {
        if (is_null($requested_sla)) {
            throw new \InvalidArgumentException('non-nullable requested_sla cannot be null');
        }
        $allowedValues = $this->getRequestedSlaAllowableValues();
        if (!in_array($requested_sla, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'requested_sla', must be one of '%s'",
                    $requested_sla,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requested_sla'] = $requested_sla;

        return $this;
    }

    /**
     * Gets schedule_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerScheduleInfo|null
     */
    public function getScheduleInfo()
    {
        return $this->container['schedule_info'];
    }

    /**
     * Sets schedule_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerScheduleInfo|null $schedule_info schedule_info
     *
     * @return self
     */
    public function setScheduleInfo($schedule_info)
    {
        if (is_null($schedule_info)) {
            throw new \InvalidArgumentException('non-nullable schedule_info cannot be null');
        }
        $this->container['schedule_info'] = $schedule_info;

        return $this;
    }

    /**
     * Gets extra_external_ids
     *
     * @return string[]|null
     */
    public function getExtraExternalIds()
    {
        return $this->container['extra_external_ids'];
    }

    /**
     * Sets extra_external_ids
     *
     * @param string[]|null $extra_external_ids Additional external IDs for the order
     *
     * @return self
     */
    public function setExtraExternalIds($extra_external_ids)
    {
        if (is_null($extra_external_ids)) {
            throw new \InvalidArgumentException('non-nullable extra_external_ids cannot be null');
        }
        $this->container['extra_external_ids'] = $extra_external_ids;

        return $this;
    }

    /**
     * Gets is_return
     *
     * @return bool|null
     */
    public function getIsReturn()
    {
        return $this->container['is_return'];
    }

    /**
     * Sets is_return
     *
     * @param bool|null $is_return Whether it is required to return back to the origin location
     *
     * @return self
     */
    public function setIsReturn($is_return)
    {
        if (is_null($is_return)) {
            throw new \InvalidArgumentException('non-nullable is_return cannot be null');
        }
        $this->container['is_return'] = $is_return;

        return $this;
    }

    /**
     * Gets simulated_order
     *
     * @return bool
     */
    public function getSimulatedOrder()
    {
        return $this->container['simulated_order'];
    }

    /**
     * Sets simulated_order
     *
     * @param bool $simulated_order Whether this order is a simulated order (for testing/demo purposes)
     *
     * @return self
     */
    public function setSimulatedOrder($simulated_order)
    {
        if (is_null($simulated_order)) {
            throw new \InvalidArgumentException('non-nullable simulated_order cannot be null');
        }
        $this->container['simulated_order'] = $simulated_order;

        return $this;
    }

    /**
     * Gets happiness
     *
     * @return \OpenAPI\Client\Model\OrderPost201ResponseHappiness|null
     */
    public function getHappiness()
    {
        return $this->container['happiness'];
    }

    /**
     * Sets happiness
     *
     * @param \OpenAPI\Client\Model\OrderPost201ResponseHappiness|null $happiness happiness
     *
     * @return self
     */
    public function setHappiness($happiness)
    {
        if (is_null($happiness)) {
            throw new \InvalidArgumentException('non-nullable happiness cannot be null');
        }
        $this->container['happiness'] = $happiness;

        return $this;
    }

    /**
     * Gets edit_info
     *
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerEditInfo|null
     */
    public function getEditInfo()
    {
        return $this->container['edit_info'];
    }

    /**
     * Sets edit_info
     *
     * @param \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerEditInfo|null $edit_info edit_info
     *
     * @return self
     */
    public function setEditInfo($edit_info)
    {
        if (is_null($edit_info)) {
            throw new \InvalidArgumentException('non-nullable edit_info cannot be null');
        }
        $this->container['edit_info'] = $edit_info;

        return $this;
    }

    /**
     * Gets proposal_label
     *
     * @return string|null
     */
    public function getProposalLabel()
    {
        return $this->container['proposal_label'];
    }

    /**
     * Sets proposal_label
     *
     * @param string|null $proposal_label proposal_label
     *
     * @return self
     */
    public function setProposalLabel($proposal_label)
    {
        if (is_null($proposal_label)) {
            throw new \InvalidArgumentException('non-nullable proposal_label cannot be null');
        }
        $allowedValues = $this->getProposalLabelAllowableValues();
        if (!in_array($proposal_label, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'proposal_label', must be one of '%s'",
                    $proposal_label,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['proposal_label'] = $proposal_label;

        return $this;
    }

    /**
     * Gets is_nationwide
     *
     * @return bool|null
     */
    public function getIsNationwide()
    {
        return $this->container['is_nationwide'];
    }

    /**
     * Sets is_nationwide
     *
     * @param bool|null $is_nationwide Whether it is a nationwide delivery
     *
     * @return self
     */
    public function setIsNationwide($is_nationwide)
    {
        if (is_null($is_nationwide)) {
            throw new \InvalidArgumentException('non-nullable is_nationwide cannot be null');
        }
        $this->container['is_nationwide'] = $is_nationwide;

        return $this;
    }

    /**
     * Gets carrier_delivery_url
     *
     * @return string|null
     */
    public function getCarrierDeliveryUrl()
    {
        return $this->container['carrier_delivery_url'];
    }

    /**
     * Sets carrier_delivery_url
     *
     * @param string|null $carrier_delivery_url The URL to find the delivery in the carrier (if exists)
     *
     * @return self
     */
    public function setCarrierDeliveryUrl($carrier_delivery_url)
    {
        if (is_null($carrier_delivery_url)) {
            throw new \InvalidArgumentException('non-nullable carrier_delivery_url cannot be null');
        }
        $this->container['carrier_delivery_url'] = $carrier_delivery_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


