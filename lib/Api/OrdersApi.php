<?php
/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Evermile Commercial Quotes and Booking API
 *
 * This is Evermile's commercial API for handling delivery quotes and orders
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@evermile.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'orderMultiRoutePost' => [
            'application/json',
        ],
        'orderOrderIdDelete' => [
            'application/json',
        ],
        'orderOrderIdGet' => [
            'application/json',
        ],
        'orderOrderIdLabelGet' => [
            'application/json',
        ],
        'orderOrderIdLiveTrackingGet' => [
            'application/json',
        ],
        'orderOrderIdPatch' => [
            'application/json',
        ],
        'orderPost' => [
            'application/json',
        ],
        'ordersGet' => [
            'application/json',
        ],
        'ordersPaginatedHistoryGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderMultiRoutePost
     *
     * Order a route with multiple orders
     *
     * @param  \OpenAPI\Client\Model\OrderMultiRoutePostRequest $order_multi_route_post_request order_multi_route_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMultiRoutePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderMultiRoutePost201Response
     */
    public function orderMultiRoutePost($order_multi_route_post_request, $x_evermile_merchant_id = null, string $contentType = self::contentTypes['orderMultiRoutePost'][0])
    {
        list($response) = $this->orderMultiRoutePostWithHttpInfo($order_multi_route_post_request, $x_evermile_merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation orderMultiRoutePostWithHttpInfo
     *
     * Order a route with multiple orders
     *
     * @param  \OpenAPI\Client\Model\OrderMultiRoutePostRequest $order_multi_route_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMultiRoutePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderMultiRoutePost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderMultiRoutePostWithHttpInfo($order_multi_route_post_request, $x_evermile_merchant_id = null, string $contentType = self::contentTypes['orderMultiRoutePost'][0])
    {
        $request = $this->orderMultiRoutePostRequest($order_multi_route_post_request, $x_evermile_merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderMultiRoutePost201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderMultiRoutePost201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderMultiRoutePost201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderMultiRoutePost201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderMultiRoutePost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderMultiRoutePostAsync
     *
     * Order a route with multiple orders
     *
     * @param  \OpenAPI\Client\Model\OrderMultiRoutePostRequest $order_multi_route_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMultiRoutePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderMultiRoutePostAsync($order_multi_route_post_request, $x_evermile_merchant_id = null, string $contentType = self::contentTypes['orderMultiRoutePost'][0])
    {
        return $this->orderMultiRoutePostAsyncWithHttpInfo($order_multi_route_post_request, $x_evermile_merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderMultiRoutePostAsyncWithHttpInfo
     *
     * Order a route with multiple orders
     *
     * @param  \OpenAPI\Client\Model\OrderMultiRoutePostRequest $order_multi_route_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMultiRoutePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderMultiRoutePostAsyncWithHttpInfo($order_multi_route_post_request, $x_evermile_merchant_id = null, string $contentType = self::contentTypes['orderMultiRoutePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderMultiRoutePost201Response';
        $request = $this->orderMultiRoutePostRequest($order_multi_route_post_request, $x_evermile_merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderMultiRoutePost'
     *
     * @param  \OpenAPI\Client\Model\OrderMultiRoutePostRequest $order_multi_route_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderMultiRoutePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderMultiRoutePostRequest($order_multi_route_post_request, $x_evermile_merchant_id = null, string $contentType = self::contentTypes['orderMultiRoutePost'][0])
    {

        // verify the required parameter 'order_multi_route_post_request' is set
        if ($order_multi_route_post_request === null || (is_array($order_multi_route_post_request) && count($order_multi_route_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_multi_route_post_request when calling orderMultiRoutePost'
            );
        }



        $resourcePath = '/order/multiRoute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_multi_route_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_multi_route_post_request));
            } else {
                $httpBody = $order_multi_route_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderOrderIdDelete
     *
     * Cancel an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $no_confirm_if_no_fee Should the order be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $cancel_all_route Should all the route orders be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $keep_drafts Should keep as draft orders if draft exists. (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderOrderIdDelete($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $no_confirm_if_no_fee = null, $cancel_all_route = null, $keep_drafts = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderOrderIdDelete'][0])
    {
        $this->orderOrderIdDeleteWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $no_confirm_if_no_fee, $cancel_all_route, $keep_drafts, $x_evermile_token, $contentType);
    }

    /**
     * Operation orderOrderIdDeleteWithHttpInfo
     *
     * Cancel an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $no_confirm_if_no_fee Should the order be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $cancel_all_route Should all the route orders be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $keep_drafts Should keep as draft orders if draft exists. (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderOrderIdDeleteWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $no_confirm_if_no_fee = null, $cancel_all_route = null, $keep_drafts = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderOrderIdDelete'][0])
    {
        $request = $this->orderOrderIdDeleteRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $no_confirm_if_no_fee, $cancel_all_route, $keep_drafts, $x_evermile_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderOrderIdDelete402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderOrderIdDeleteAsync
     *
     * Cancel an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $no_confirm_if_no_fee Should the order be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $cancel_all_route Should all the route orders be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $keep_drafts Should keep as draft orders if draft exists. (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdDeleteAsync($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $no_confirm_if_no_fee = null, $cancel_all_route = null, $keep_drafts = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderOrderIdDelete'][0])
    {
        return $this->orderOrderIdDeleteAsyncWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $no_confirm_if_no_fee, $cancel_all_route, $keep_drafts, $x_evermile_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderOrderIdDeleteAsyncWithHttpInfo
     *
     * Cancel an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $no_confirm_if_no_fee Should the order be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $cancel_all_route Should all the route orders be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $keep_drafts Should keep as draft orders if draft exists. (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdDeleteAsyncWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $no_confirm_if_no_fee = null, $cancel_all_route = null, $keep_drafts = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderOrderIdDelete'][0])
    {
        $returnType = '';
        $request = $this->orderOrderIdDeleteRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $no_confirm_if_no_fee, $cancel_all_route, $keep_drafts, $x_evermile_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderOrderIdDelete'
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $no_confirm_if_no_fee Should the order be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $cancel_all_route Should all the route orders be cancelled immediately if there is no cancellation fee. Default is false. (optional)
     * @param  bool $keep_drafts Should keep as draft orders if draft exists. (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderOrderIdDeleteRequest($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $no_confirm_if_no_fee = null, $cancel_all_route = null, $keep_drafts = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderOrderIdDelete'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderOrderIdDelete'
            );
        }








        $resourcePath = '/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $no_confirm_if_no_fee,
            'noConfirmIfNoFee', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancel_all_route,
            'cancelAllRoute', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keep_drafts,
            'keepDrafts', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }
        // header params
        if ($x_evermile_token !== null) {
            $headerParams['x-evermile-token'] = ObjectSerializer::toHeaderValue($x_evermile_token);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderOrderIdGet
     *
     * Fetch order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $include_tracking_info Should include live tracking info with this order. Default is false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderPost201Response
     */
    public function orderOrderIdGet($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $include_tracking_info = null, string $contentType = self::contentTypes['orderOrderIdGet'][0])
    {
        list($response) = $this->orderOrderIdGetWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $include_tracking_info, $contentType);
        return $response;
    }

    /**
     * Operation orderOrderIdGetWithHttpInfo
     *
     * Fetch order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $include_tracking_info Should include live tracking info with this order. Default is false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderOrderIdGetWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $include_tracking_info = null, string $contentType = self::contentTypes['orderOrderIdGet'][0])
    {
        $request = $this->orderOrderIdGetRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $include_tracking_info, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderPost201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderPost201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderPost201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderPost201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderPost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderOrderIdGetAsync
     *
     * Fetch order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $include_tracking_info Should include live tracking info with this order. Default is false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdGetAsync($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $include_tracking_info = null, string $contentType = self::contentTypes['orderOrderIdGet'][0])
    {
        return $this->orderOrderIdGetAsyncWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $include_tracking_info, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderOrderIdGetAsyncWithHttpInfo
     *
     * Fetch order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $include_tracking_info Should include live tracking info with this order. Default is false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdGetAsyncWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $include_tracking_info = null, string $contentType = self::contentTypes['orderOrderIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderPost201Response';
        $request = $this->orderOrderIdGetRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $include_tracking_info, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderOrderIdGet'
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  bool $include_tracking_info Should include live tracking info with this order. Default is false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderOrderIdGetRequest($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $include_tracking_info = null, string $contentType = self::contentTypes['orderOrderIdGet'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderOrderIdGet'
            );
        }





        $resourcePath = '/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_tracking_info,
            'includeTrackingInfo', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderOrderIdLabelGet
     *
     * Create a label for an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLabelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function orderOrderIdLabelGet($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLabelGet'][0])
    {
        list($response) = $this->orderOrderIdLabelGetWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);
        return $response;
    }

    /**
     * Operation orderOrderIdLabelGetWithHttpInfo
     *
     * Create a label for an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLabelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderOrderIdLabelGetWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLabelGet'][0])
    {
        $request = $this->orderOrderIdLabelGetRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderOrderIdLabelGetAsync
     *
     * Create a label for an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLabelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdLabelGetAsync($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLabelGet'][0])
    {
        return $this->orderOrderIdLabelGetAsyncWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderOrderIdLabelGetAsyncWithHttpInfo
     *
     * Create a label for an order
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLabelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdLabelGetAsyncWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLabelGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->orderOrderIdLabelGetRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderOrderIdLabelGet'
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLabelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderOrderIdLabelGetRequest($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLabelGet'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderOrderIdLabelGet'
            );
        }




        $resourcePath = '/order/{orderId}/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderOrderIdLiveTrackingGet
     *
     * Fetch live order tracking
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLiveTrackingGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo
     */
    public function orderOrderIdLiveTrackingGet($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLiveTrackingGet'][0])
    {
        list($response) = $this->orderOrderIdLiveTrackingGetWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);
        return $response;
    }

    /**
     * Operation orderOrderIdLiveTrackingGetWithHttpInfo
     *
     * Fetch live order tracking
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLiveTrackingGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderOrderIdLiveTrackingGetWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLiveTrackingGet'][0])
    {
        $request = $this->orderOrderIdLiveTrackingGetRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderOrderIdLiveTrackingGetAsync
     *
     * Fetch live order tracking
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLiveTrackingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdLiveTrackingGetAsync($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLiveTrackingGet'][0])
    {
        return $this->orderOrderIdLiveTrackingGetAsyncWithHttpInfo($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderOrderIdLiveTrackingGetAsyncWithHttpInfo
     *
     * Fetch live order tracking
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLiveTrackingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdLiveTrackingGetAsyncWithHttpInfo($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLiveTrackingGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInnerOrderTrackingInfo';
        $request = $this->orderOrderIdLiveTrackingGetRequest($order_id, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderOrderIdLiveTrackingGet'
     *
     * @param  string $order_id The ID of the order (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdLiveTrackingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderOrderIdLiveTrackingGetRequest($order_id, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdLiveTrackingGet'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderOrderIdLiveTrackingGet'
            );
        }




        $resourcePath = '/order/{orderId}/liveTracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderOrderIdPatch
     *
     * Update order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  \OpenAPI\Client\Model\OrderOrderIdPatchRequest $order_order_id_patch_request order_order_id_patch_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function orderOrderIdPatch($order_id, $order_order_id_patch_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdPatch'][0])
    {
        $this->orderOrderIdPatchWithHttpInfo($order_id, $order_order_id_patch_request, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);
    }

    /**
     * Operation orderOrderIdPatchWithHttpInfo
     *
     * Update order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  \OpenAPI\Client\Model\OrderOrderIdPatchRequest $order_order_id_patch_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderOrderIdPatchWithHttpInfo($order_id, $order_order_id_patch_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdPatch'][0])
    {
        $request = $this->orderOrderIdPatchRequest($order_id, $order_order_id_patch_request, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation orderOrderIdPatchAsync
     *
     * Update order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  \OpenAPI\Client\Model\OrderOrderIdPatchRequest $order_order_id_patch_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdPatchAsync($order_id, $order_order_id_patch_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdPatch'][0])
    {
        return $this->orderOrderIdPatchAsyncWithHttpInfo($order_id, $order_order_id_patch_request, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderOrderIdPatchAsyncWithHttpInfo
     *
     * Update order details
     *
     * @param  string $order_id The ID of the order (required)
     * @param  \OpenAPI\Client\Model\OrderOrderIdPatchRequest $order_order_id_patch_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderOrderIdPatchAsyncWithHttpInfo($order_id, $order_order_id_patch_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdPatch'][0])
    {
        $returnType = '';
        $request = $this->orderOrderIdPatchRequest($order_id, $order_order_id_patch_request, $x_evermile_merchant_id, $x_evermile_trace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderOrderIdPatch'
     *
     * @param  string $order_id The ID of the order (required)
     * @param  \OpenAPI\Client\Model\OrderOrderIdPatchRequest $order_order_id_patch_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderOrderIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderOrderIdPatchRequest($order_id, $order_order_id_patch_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, string $contentType = self::contentTypes['orderOrderIdPatch'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderOrderIdPatch'
            );
        }

        // verify the required parameter 'order_order_id_patch_request' is set
        if ($order_order_id_patch_request === null || (is_array($order_order_id_patch_request) && count($order_order_id_patch_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_order_id_patch_request when calling orderOrderIdPatch'
            );
        }




        $resourcePath = '/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_order_id_patch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_order_id_patch_request));
            } else {
                $httpBody = $order_order_id_patch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderPost
     *
     * Order a delivery
     *
     * @param  \OpenAPI\Client\Model\OrderPostRequest $order_post_request order_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderPost201Response
     */
    public function orderPost($order_post_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderPost'][0])
    {
        list($response) = $this->orderPostWithHttpInfo($order_post_request, $x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $x_evermile_token, $contentType);
        return $response;
    }

    /**
     * Operation orderPostWithHttpInfo
     *
     * Order a delivery
     *
     * @param  \OpenAPI\Client\Model\OrderPostRequest $order_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderPostWithHttpInfo($order_post_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderPost'][0])
    {
        $request = $this->orderPostRequest($order_post_request, $x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $x_evermile_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\OrderPost201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderPost201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderPost201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrderPost201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderPost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderPostAsync
     *
     * Order a delivery
     *
     * @param  \OpenAPI\Client\Model\OrderPostRequest $order_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPostAsync($order_post_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderPost'][0])
    {
        return $this->orderPostAsyncWithHttpInfo($order_post_request, $x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $x_evermile_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderPostAsyncWithHttpInfo
     *
     * Order a delivery
     *
     * @param  \OpenAPI\Client\Model\OrderPostRequest $order_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPostAsyncWithHttpInfo($order_post_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderPost201Response';
        $request = $this->orderPostRequest($order_post_request, $x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $x_evermile_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderPost'
     *
     * @param  \OpenAPI\Client\Model\OrderPostRequest $order_post_request (required)
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  string $x_evermile_token A token to confirm cancellation after receiving 402 code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderPostRequest($order_post_request, $x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $x_evermile_token = null, string $contentType = self::contentTypes['orderPost'][0])
    {

        // verify the required parameter 'order_post_request' is set
        if ($order_post_request === null || (is_array($order_post_request) && count($order_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_post_request when calling orderPost'
            );
        }






        $resourcePath = '/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }
        // header params
        if ($x_evermile_store_id !== null) {
            $headerParams['X-EVERMILE-STORE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_store_id);
        }
        // header params
        if ($x_evermile_token !== null) {
            $headerParams['x-evermile-token'] = ObjectSerializer::toHeaderValue($x_evermile_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_post_request));
            } else {
                $httpBody = $order_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersGet
     *
     * Get orders
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string[] $statuses A list of all the required statuses (optional)
     * @param  bool $scheduled Whether to include scheduled (future) orders (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[]
     */
    public function ordersGet($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $from = null, $to = null, $statuses = null, $scheduled = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        list($response) = $this->ordersGetWithHttpInfo($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $from, $to, $statuses, $scheduled, $contentType);
        return $response;
    }

    /**
     * Operation ordersGetWithHttpInfo
     *
     * Get orders
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string[] $statuses A list of all the required statuses (optional)
     * @param  bool $scheduled Whether to include scheduled (future) orders (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersGetWithHttpInfo($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $from = null, $to = null, $statuses = null, $scheduled = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        $request = $this->ordersGetRequest($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $from, $to, $statuses, $scheduled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersGetAsync
     *
     * Get orders
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string[] $statuses A list of all the required statuses (optional)
     * @param  bool $scheduled Whether to include scheduled (future) orders (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersGetAsync($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $from = null, $to = null, $statuses = null, $scheduled = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        return $this->ordersGetAsyncWithHttpInfo($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $from, $to, $statuses, $scheduled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersGetAsyncWithHttpInfo
     *
     * Get orders
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string[] $statuses A list of all the required statuses (optional)
     * @param  bool $scheduled Whether to include scheduled (future) orders (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersGetAsyncWithHttpInfo($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $from = null, $to = null, $statuses = null, $scheduled = null, string $contentType = self::contentTypes['ordersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200ResponseResultsInner[]';
        $request = $this->ordersGetRequest($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $from, $to, $statuses, $scheduled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersGet'
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string[] $statuses A list of all the required statuses (optional)
     * @param  bool $scheduled Whether to include scheduled (future) orders (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersGetRequest($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $from = null, $to = null, $statuses = null, $scheduled = null, string $contentType = self::contentTypes['ordersGet'][0])
    {






        if ($statuses !== null && count($statuses) < 1) {
            throw new \InvalidArgumentException('invalid value for "$statuses" when calling OrdersApi.ordersGet, number of items must be greater than or equal to 1.');
        }
        


        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled,
            'scheduled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }
        // header params
        if ($x_evermile_store_id !== null) {
            $headerParams['X-EVERMILE-STORE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_store_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersPaginatedHistoryGet
     *
     * Get orders history with pagination
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  int $page_size The number of elements in a page. (optional)
     * @param  \DateTime $last_timestamp The last timestamp for the pagination. (optional)
     * @param  string $last_id The last id for the pagination. (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPaginatedHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response
     */
    public function ordersPaginatedHistoryGet($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $page_size = null, $last_timestamp = null, $last_id = null, $from = null, $to = null, string $contentType = self::contentTypes['ordersPaginatedHistoryGet'][0])
    {
        list($response) = $this->ordersPaginatedHistoryGetWithHttpInfo($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $page_size, $last_timestamp, $last_id, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation ordersPaginatedHistoryGetWithHttpInfo
     *
     * Get orders history with pagination
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  int $page_size The number of elements in a page. (optional)
     * @param  \DateTime $last_timestamp The last timestamp for the pagination. (optional)
     * @param  string $last_id The last id for the pagination. (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPaginatedHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersPaginatedHistoryGetWithHttpInfo($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $page_size = null, $last_timestamp = null, $last_id = null, $from = null, $to = null, string $contentType = self::contentTypes['ordersPaginatedHistoryGet'][0])
    {
        $request = $this->ordersPaginatedHistoryGetRequest($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $page_size, $last_timestamp, $last_id, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersPaginatedHistoryGetAsync
     *
     * Get orders history with pagination
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  int $page_size The number of elements in a page. (optional)
     * @param  \DateTime $last_timestamp The last timestamp for the pagination. (optional)
     * @param  string $last_id The last id for the pagination. (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPaginatedHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersPaginatedHistoryGetAsync($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $page_size = null, $last_timestamp = null, $last_id = null, $from = null, $to = null, string $contentType = self::contentTypes['ordersPaginatedHistoryGet'][0])
    {
        return $this->ordersPaginatedHistoryGetAsyncWithHttpInfo($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $page_size, $last_timestamp, $last_id, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersPaginatedHistoryGetAsyncWithHttpInfo
     *
     * Get orders history with pagination
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  int $page_size The number of elements in a page. (optional)
     * @param  \DateTime $last_timestamp The last timestamp for the pagination. (optional)
     * @param  string $last_id The last id for the pagination. (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPaginatedHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersPaginatedHistoryGetAsyncWithHttpInfo($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $page_size = null, $last_timestamp = null, $last_id = null, $from = null, $to = null, string $contentType = self::contentTypes['ordersPaginatedHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrdersPaginatedHistoryGet200Response';
        $request = $this->ordersPaginatedHistoryGetRequest($x_evermile_merchant_id, $x_evermile_trace_id, $x_evermile_store_id, $page_size, $last_timestamp, $last_id, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersPaginatedHistoryGet'
     *
     * @param  string $x_evermile_merchant_id The merchant ID, if using a client credentials token. Will be ignored with a regular user token. (optional)
     * @param  string $x_evermile_trace_id A trace ID for tracing the request through the Evermile platform (optional)
     * @param  string $x_evermile_store_id A store ID for an order&#39;s store platform context (optional)
     * @param  int $page_size The number of elements in a page. (optional)
     * @param  \DateTime $last_timestamp The last timestamp for the pagination. (optional)
     * @param  string $last_id The last id for the pagination. (optional)
     * @param  \DateTime $from The start date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  \DateTime $to The end date to query (YYYY-MM-DD). Default is today. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersPaginatedHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersPaginatedHistoryGetRequest($x_evermile_merchant_id = null, $x_evermile_trace_id = null, $x_evermile_store_id = null, $page_size = null, $last_timestamp = null, $last_id = null, $from = null, $to = null, string $contentType = self::contentTypes['ordersPaginatedHistoryGet'][0])
    {










        $resourcePath = '/orders/paginatedHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_timestamp,
            'lastTimestamp', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_id,
            'lastId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_evermile_merchant_id !== null) {
            $headerParams['X-EVERMILE-MERCHANT-ID'] = ObjectSerializer::toHeaderValue($x_evermile_merchant_id);
        }
        // header params
        if ($x_evermile_trace_id !== null) {
            $headerParams['X-EVERMILE-TRACE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_trace_id);
        }
        // header params
        if ($x_evermile_store_id !== null) {
            $headerParams['X-EVERMILE-STORE-ID'] = ObjectSerializer::toHeaderValue($x_evermile_store_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
